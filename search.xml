<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一元函数微分学</title>
      <link href="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-wei-fen-xue/yi-yuan-han-shu-wei-fen-xue/"/>
      <url>/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-wei-fen-xue/yi-yuan-han-shu-wei-fen-xue/</url>
      
        <content type="html"><![CDATA[<h1 id="一元函数微分学"><a href="#一元函数微分学" class="headerlink" title="一元函数微分学"></a>一元函数微分学</h1><h2 id="泰勒公式"><a href="#泰勒公式" class="headerlink" title="泰勒公式"></a>泰勒公式</h2><h3 id="1-麦克劳林公式："><a href="#1-麦克劳林公式：" class="headerlink" title="1. 麦克劳林公式："></a>1. 麦克劳林公式：</h3><p>$$<br>麦克劳林公式就是泰勒公式x \to 0时的特殊情况\\<br>f(x)&#x3D;f(0)+f{}’(0)x+\frac{f’’(0)x^2}{2!}+\frac{f’’’(0)x^3}{3!}+\cdots+\frac{ {f}^{(n)}(0)x^n }{n!}+R_n(x),其中R_n(x)被称为余项\\<br>拉格朗日余项:\frac{ {f}^{(n+1)}(\xi)x^{n+1} }{ {n+1}! },皮亚诺余项o((x)^n)\<br>$$</p><h3 id="2-常见的麦克劳林展开式"><a href="#2-常见的麦克劳林展开式" class="headerlink" title="2. 常见的麦克劳林展开式"></a>2. 常见的麦克劳林展开式</h3><p>$$<br>常见的麦克劳林展开式\\<br>e^x&#x3D;1+x+\frac{x^2}{2!}+\cdots+\frac{x^n}{n!}+o(x^n)\\<br>sin(x) &#x3D; x-\frac{x^3}{3!}+\frac{x^5}{5!}-\cdots+\frac{(-1)^nx^{2n+1}}{(2n+1)!}+o(x^{2n+1})\\<br>cos(x) &#x3D; 1-\frac{x^2}{2!}+\frac{x^4}{4!}-\cdots+\frac{(-1)^nx^{2n}}{(2n)!}+o(x^{2n})\\<br>\ln_{}{(1+x)} &#x3D; x - \frac{1}{2}x^2 + \frac{1}{3}x^3-\cdots+(-1)^n\frac{1}{n}x^n+o(x^n)\\<br>(1+x)^\alpha &#x3D; 1+\alpha x+\frac{\alpha(\alpha-1)x^2}{2!}+\cdots+\frac{\alpha(\alpha-1)\cdots(\alpha-n+1)x^n}{n!}+o(x^n)\\<br>\frac{1}{1-x} &#x3D; 1+x + x^2 + \cdots + x^n+o(x^n)\\<br>\frac{1}{1+x} &#x3D; 1-x+x^2-x^3+\cdots+(-1^n)x^n+o(x^n)\\<br>tan(x) &#x3D; x+\frac{1}{3}x^3+\frac{2}{15}x^5+\cdots\\<br>arcsin(x) &#x3D; x+\frac{1}{6}x^3+o(x^3)\\<br>arctan(x) &#x3D; x-\frac{x^3}{3}+\frac{x^5}{5}-\cdots+\frac{x^{2n+1}}{(2n+1)}+o(x^{2n+1})\\<br>arcsin(x)与arctan(x)都是去掉负号，其中arctan(x)是sin(x)去!<br>$$</p><p>记忆方法：</p><p><strong>指对函数一二三，正弦函数一三五，正弦对数隔一换，正弦指数有感叹。</strong></p><h2 id="微分（导数）题目（对第一章函数的补充）"><a href="#微分（导数）题目（对第一章函数的补充）" class="headerlink" title="微分（导数）题目（对第一章函数的补充）"></a>微分（导数）题目（对第一章函数的补充）</h2><h3 id="1-利用微分-x2F-导数性质求f-x-的待定系数"><a href="#1-利用微分-x2F-导数性质求f-x-的待定系数" class="headerlink" title="1. 利用微分&#x2F;导数性质求f(x)的待定系数"></a>1. 利用微分&#x2F;导数性质求f(x)的待定系数</h3><h3 id="2-极限计算中能否用洛必达"><a href="#2-极限计算中能否用洛必达" class="headerlink" title="2. 极限计算中能否用洛必达"></a>2. 极限计算中能否用洛必达</h3><ol><li>题目只说了“可导”：极限内一定不能出现f’(x)，出现了就是0分，正确的方法是凑导数的定义</li><li>题目说了“连续可导”：极限内可以洛必达，可以出现f’(x)</li><li>f(x)二阶可导：极限中可以用洛必达一次，只能出现f’(x)不能出现f’’(x)</li></ol><h3 id="3-求零点个数"><a href="#3-求零点个数" class="headerlink" title="3. 求零点个数"></a>3. 求零点个数</h3><ol><li>列表法（表格要列完整）</li><li>零点定理<img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-wei-fen-xue/yi-yuan-han-shu-wei-fen-xue/%E9%9B%B6%E7%82%B9%E5%AE%9A%E7%90%86.JPG" alt="零点定理"></li></ol><h3 id="4-证明方程有且仅有n个实根"><a href="#4-证明方程有且仅有n个实根" class="headerlink" title="4. 证明方程有且仅有n个实根"></a>4. 证明方程有且仅有n个实根</h3><ol><li>如果方程中有分母的，先考虑能否把分母去掉→变成同解方程</li><li><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-wei-fen-xue/yi-yuan-han-shu-wei-fen-xue/%E8%AF%81%E6%98%8E%E6%96%B9%E7%A8%8B%E6%9C%89n%E4%B8%AA%E5%AE%9E%E6%A0%B9.jpg" alt="证明方程有n个实根"></li><li>如果是一元三次方程，那该方程本身的起伏特性我们是很熟悉的，可以直接画图</li></ol><h3 id="5-求拐点个数和他们的坐标"><a href="#5-求拐点个数和他们的坐标" class="headerlink" title="5. 求拐点个数和他们的坐标"></a>5. 求拐点个数和他们的坐标</h3><ol><li>使用列表法（拐点：二阶导数为零的点或二阶导数不存在的点。）</li></ol><h3 id="6-微分不等式的证明题，方法有："><a href="#6-微分不等式的证明题，方法有：" class="headerlink" title="6. 微分不等式的证明题，方法有："></a>6. 微分不等式的证明题，方法有：</h3><p>（1） 利用单调性证明不等式</p><p>（2） 当题目告诉了二阶导数恒正或恒负（或者凹凸性）时可以利用泰勒展开，利用二阶导数不变号，证明不等式（方法是丢掉拉格朗日余项形成不等式，【注】“二阶导”改成“偶数阶导”，一样可以用该方法）</p><p>（3） 利用二阶导数（凹凸性）恒为正或恒为负证明不等式，（【注意】“二阶导”可以改成“偶数阶导”）</p><p>（4） 三角函数的不等式→利用cos(x)≤1多次积分证明</p><p>注：</p><p>1、微分不等式的证明关键是确定变量，然后求导，求单调性，得出不等式</p><p>2、一定要确定目标，看着题目找方法</p><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-wei-fen-xue/yi-yuan-han-shu-wei-fen-xue/%E5%BE%AE%E5%88%86%E4%B8%8D%E7%AD%89%E5%BC%8F%E6%9E%84%E9%80%A0%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0.JPG" alt="微分不等式构造辅助函数"></p><h3 id="7-求函数的导数"><a href="#7-求函数的导数" class="headerlink" title="7. 求函数的导数"></a>7. 求函数的导数</h3><ol><li><p>求导之前应对原式进行变形化简</p><ol><li>全部根号写成次方形式</li><li>等号两边取对数（特别是出现连乘时），取对数之前可能要先取绝对值</li></ol></li><li><p>函数中含有绝对值</p><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-wei-fen-xue/yi-yuan-han-shu-wei-fen-xue/%E5%87%BD%E6%95%B0%E4%B8%AD%E5%90%AB%E6%9C%89%E7%BB%9D%E5%AF%B9%E5%80%BC%E6%B1%82%E6%9E%81%E9%99%90.JPG" alt="函数中含有绝对值求极限"></p></li><li><p>若原式没有分母，导函数出现分母，则要把定义域写上</p></li><li><p>何时用定义求导数</p><ol><li><p>用求导法则很复杂但用定义求导很简单的时候</p><p>例如：<img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-wei-fen-xue/yi-yuan-han-shu-wei-fen-xue/%E5%88%A9%E7%94%A8%E5%AE%9A%E4%B9%89%E6%B1%82%E5%AF%BC.jpg" alt="利用定义求导"></p></li><li><p>题目没说在某一点可导的时候（用定义求导相当于同时在验证是否可导）</p></li><li><p>求分段函数的分界点上的导数的时候</p></li></ol></li><li><p>幂指函数求导</p><ol><li>化成指数函数再求导</li><li>两边取对数后再求导（注意可能要先两边取绝对值），尤其适用于“多个因子连乘”的函数</li></ol></li><li><p>反函数求导</p><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-wei-fen-xue/yi-yuan-han-shu-wei-fen-xue/%E5%8F%8D%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC.jpg" alt="反函数求导"></p></li><li><p>隐函数求导</p><ol><li>首先第一步是对方程进行化简（如去分母、取对数等）<ol><li>法一：两端对x求导</li><li>法二：一阶微分形式不变性</li><li>法三：</li></ol></li></ol></li></ol><h3 id="8-判断函数在某一点处是否可导"><a href="#8-判断函数在某一点处是否可导" class="headerlink" title="8. 判断函数在某一点处是否可导"></a>8. 判断函数在某一点处是否可导</h3><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-wei-fen-xue/yi-yuan-han-shu-wei-fen-xue/%E5%88%A4%E6%96%AD%E5%87%BD%E6%95%B0%E5%9C%A8%E6%9F%90%E4%B8%80%E7%82%B9%E5%8F%AF%E5%AF%BC.jpg" alt="判断函数在某一点可导"></p><h3 id="9-求函数的极值点"><a href="#9-求函数的极值点" class="headerlink" title="9. 求函数的极值点"></a>9. 求函数的极值点</h3><ol><li><p>法一：列表法</p></li><li><p>法二：定义法（准确定义见下方），有时会和极限的保号性一起使用</p><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-wei-fen-xue/yi-yuan-han-shu-wei-fen-xue/%E6%9E%81%E5%80%BC%E7%82%B9%E7%9A%84%E5%AE%9A%E4%B9%89.JPG" alt="极值点的定义"></p><p>易错点：</p><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-wei-fen-xue/yi-yuan-han-shu-wei-fen-xue/%E6%9E%81%E5%80%BC%E7%82%B9%E7%9A%84%E6%98%93%E9%94%99%E7%82%B9.jpg" alt="极值点的易错点"></p></li></ol><h3 id="10-求方程的表达式"><a href="#10-求方程的表达式" class="headerlink" title="10. 求方程的表达式"></a>10. 求方程的表达式</h3><p>对能算出个别函数值的点，先算出来。不算出来很有可能无法做下去（因为这些已知的点在后续解题步骤是需要用到的，如果不先把隐藏的条件找出来，则无法完成后续的解题。<strong>比如导数定义可能要用到某些函数值&#x3D;0的点</strong>）。</p><h3 id="11-求渐近线"><a href="#11-求渐近线" class="headerlink" title="11. 求渐近线"></a>11. 求渐近线</h3><p>求铅直渐近线时，除了考察“无定义点”外，还要考察“无定义区间的端点”，特别是根号下的式子g(x)要≥0，此时可能会产生无定义区间，比如“x≥2”</p><h3 id="12-证明f-x-在区间内可导"><a href="#12-证明f-x-在区间内可导" class="headerlink" title="12. 证明f(x)在区间内可导"></a>12. 证明f(x)在区间内可导</h3><p>$$<br>即证{f}’(x) &#x3D; \lim_{\bigtriangleup x \to 0}\frac{f(x+\bigtriangleup x)-f(x)}{\bigtriangleup x}&#x3D;存在<br>$$</p><h3 id="13-求f-x-的n阶-高阶-导数"><a href="#13-求f-x-的n阶-高阶-导数" class="headerlink" title="13. 求f(x)的n阶(高阶)导数"></a>13. 求f(x)的n阶(高阶)导数</h3><p>分解法（分解成下列5个简单函数的加减形式）（e^x、sinx、cosx、x^α、lnx，其中x表示“ax+b”）</p><h3 id="14-求f-x-的高阶导数"><a href="#14-求f-x-的高阶导数" class="headerlink" title="14. 求f(x)的高阶导数"></a>14. 求f(x)的高阶导数</h3><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-wei-fen-xue/yi-yuan-han-shu-wei-fen-xue/%E6%B1%82%E9%AB%98%E9%98%B6%E5%AF%BC%E6%95%B0.JPG" alt="求高阶导数"></p><h3 id="好题收集"><a href="#好题收集" class="headerlink" title="好题收集"></a>好题收集</h3><h4 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h4><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-wei-fen-xue/yi-yuan-han-shu-wei-fen-xue/%E5%AF%BC%E6%95%B0%E9%A2%98%E7%9B%AE.jpg" alt="导数题目"></p><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-wei-fen-xue/yi-yuan-han-shu-wei-fen-xue/%E5%AF%BC%E6%95%B0%E9%A2%98%E7%9B%AE%E7%AD%94%E6%A1%88.jpg" alt="导数题目答案"></p><h4 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h4><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-wei-fen-xue/yi-yuan-han-shu-wei-fen-xue/%E5%A5%BD%E9%A2%982.jpg" alt="好题2"></p><h2 id="中值定理证明题"><a href="#中值定理证明题" class="headerlink" title="中值定理证明题"></a>中值定理证明题</h2><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-wei-fen-xue/yi-yuan-han-shu-wei-fen-xue/%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E8%AF%81%E6%98%8E%E9%A2%981.JPG" alt="中值定理证明题1"></p><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-wei-fen-xue/yi-yuan-han-shu-wei-fen-xue/%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E9%A2%98%E7%9B%AE2.JPG" alt="中值定理题目2"></p><h3 id="11-a-b-ξ-f′-ξ-f-ξ-的混合项"><a href="#11-a-b-ξ-f′-ξ-f-ξ-的混合项" class="headerlink" title="11. a,b,ξ,f′(ξ),f(ξ)的混合项"></a>11. a,b,ξ,f′(ξ),f(ξ)的混合项</h3><p>（1） 分离”a、b”和”ξ”→分析“a、b项”→选择拉格朗日或者柯西中值</p><p>（2） 或者分离”a、b”和”ξ”→分析“ξ项”→还原（成还没有使用中值定理之前的样子）</p><p>注：哪一边复杂就分析哪一边，复杂说明包含的信息较多</p><h3 id="12-双（多）中值问题1"><a href="#12-双（多）中值问题1" class="headerlink" title="12. 双（多）中值问题1"></a>12. 双（多）中值问题1</h3><p>“抓主要矛盾，并分离出来”，只对主要矛盾分析→还原成使用中值定理之前的样子→变形，代入条件→看着结论来，再用一次中值定理</p><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-wei-fen-xue/yi-yuan-han-shu-wei-fen-xue/%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E8%AF%81%E6%98%8E%E9%A2%983.JPG" alt="中值定理证明题3"></p><h3 id="15-要证式子含有高阶导数、如f′′-ξ-、f′′′-ξ-、f-n-ξ-等"><a href="#15-要证式子含有高阶导数、如f′′-ξ-、f′′′-ξ-、f-n-ξ-等" class="headerlink" title="15. 要证式子含有高阶导数、如f′′(ξ)、f′′′(ξ)、f(n)(ξ)等"></a>15. 要证式子含有高阶导数、如<em>f</em>′′(<em>ξ</em>)、<em>f</em>′′′(<em>ξ</em>)、<em>f</em>(<em>n</em>)(<em>ξ</em>)等</h3><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-wei-fen-xue/yi-yuan-han-shu-wei-fen-xue/%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E9%A2%98%E7%9B%AE4.jpg" alt="中值定理题目4"></p><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-wei-fen-xue/yi-yuan-han-shu-wei-fen-xue/%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E9%A2%98%E7%9B%AE5.JPG" alt="中值定理题目5"></p>]]></content>
      
      
      <categories>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高等数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一元函数积分学</title>
      <link href="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-ji-fen-xue/yi-yuan-han-shu-ji-fen-xue/"/>
      <url>/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-ji-fen-xue/yi-yuan-han-shu-ji-fen-xue/</url>
      
        <content type="html"><![CDATA[<h1 id="一元函数积分学"><a href="#一元函数积分学" class="headerlink" title="一元函数积分学"></a>一元函数积分学</h1><h2 id="不定积分"><a href="#不定积分" class="headerlink" title="不定积分"></a>不定积分</h2><h3 id="1-求不定积分"><a href="#1-求不定积分" class="headerlink" title="1. 求不定积分"></a>1. 求不定积分</h3><h4 id="1-有理函数的不定积分"><a href="#1-有理函数的不定积分" class="headerlink" title="1. 有理函数的不定积分"></a>1. 有理函数的不定积分</h4><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-ji-fen-xue/yi-yuan-han-shu-ji-fen-xue/%E6%9C%89%E7%90%86%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86.JPG" alt="有理函数积分"></p><p>待定系数法的公式<br>$$<br>\frac{r(x)}{(x-A)^p(x^2+Mx+n)^q}&#x3D;\frac{a_1}{x-A}+\frac{a_2}{(x-A)^2}+\frac{a_3}{(x-A)^3}+\cdots + \\<br>\frac{a_p}{(x-A)^p}+\frac{b_1x+c_1}{x^2+Mx+N}+\frac{b_2x+c_2}{(x^2+Mx+N)^2}+\cdots + \frac{b_qx+c_q}<br>{(x^2+Mx+N)^q}<br>$$</p><h4 id="2-三角函数的不定积分"><a href="#2-三角函数的不定积分" class="headerlink" title="2. 三角函数的不定积分"></a>2. 三角函数的不定积分</h4><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-ji-fen-xue/yi-yuan-han-shu-ji-fen-xue/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%861.JPG" alt="三角函数的不定积分1"></p><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-ji-fen-xue/yi-yuan-han-shu-ji-fen-xue/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%862.JPG" alt="三角函数的不定积分2"></p><h4 id="3-不同类型函数的组合的不定积分"><a href="#3-不同类型函数的组合的不定积分" class="headerlink" title="3. 不同类型函数的组合的不定积分"></a>3. 不同类型函数的组合的不定积分</h4><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-ji-fen-xue/yi-yuan-han-shu-ji-fen-xue/%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E5%87%BD%E6%95%B0%E7%9A%84%E7%BB%84%E5%90%88%E7%9A%84%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86.JPG" alt="不同类型函数的组合的不定积分"></p><h4 id="4-补充（其他技巧以及知识积累）"><a href="#4-补充（其他技巧以及知识积累）" class="headerlink" title="4.补充（其他技巧以及知识积累）"></a>4.补充（其他技巧以及知识积累）</h4><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-ji-fen-xue/yi-yuan-han-shu-ji-fen-xue/%E5%85%B6%E4%BB%96%E6%8A%80%E5%B7%A7.JPG" alt="其他技巧"></p><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-ji-fen-xue/yi-yuan-han-shu-ji-fen-xue/%E5%85%B6%E4%BB%96%E6%8A%80%E5%B7%A72.JPG" alt="其他技巧2"></p><h4 id="5-常用公式"><a href="#5-常用公式" class="headerlink" title="5. 常用公式"></a>5. 常用公式</h4><p>$$<br>区间折叠公式：\int_{a}^{b}f(x)dx&#x3D;\int_{a}^{\frac{a+b}{2}}[f(x)+f(a+b-x)]dx\\<br>区间再现公式：设f(x)在[a,b]上连续，则\int_{a}^{b}f(x)dx&#x3D;\int_{a}^{b}f(a+b-x)dx\\<br>区间再现公式的拓展\int_{a}^{b}f(x)dx&#x3D;\frac{1}{2}\int_{a}^{b}f(a+b-x)dx\\<br>柯西施瓦兹不等式:设f(x)，g(x)在区间[a,b]上均连续，则(\int_{a}^{b}f(x)g(x)dx)^2\le \int_{a}^{b}f^2(x)dx\cdot \int_{a}^{b}g^2(x)dx\\<br>闵可夫斯基不等式:(\int_{a}^{b}[f(x)+g(x)]^2dx)^\frac{1}{2} \le (\int_{a}^{b}f^2(x)dx)^\frac{1}{2}+(\int_{a}^{b}g^2(x)dx)^\frac{1}{2}\\<br>欧拉积分:\tau(x) 函数\int_{0}^{+\infty}e^{-x}x^{s-1}dx、其中(s&gt;0)性质自己百度吧，Latex写着太麻烦了呜呜呜\\<br>\beta函数: \beta(p,q)&#x3D;\int_{0}^{1}x^{p-1} \cdot (1-x)^{q-1}dx&#x3D;\frac{\tau(p) \cdot \tau(q)}{\tau(p+q)}、性质自己百度\\<br>点火公式I_n&#x3D;\int_{0}^{\frac{\pi}{2}}sin^nxdx&#x3D;\int_{0}^{\frac{\pi}{2}}cos^nxdx,其中I_n&#x3D;\frac{n-1}{n}I_{n-2}(n\ge2)、I_0&#x3D;\frac{\pi}{2},I_1&#x3D;1\\<br>还有好多，不打了，遇到自己百度吧。<br>$$</p><h3 id="2-不定积分和原函数概念的问题"><a href="#2-不定积分和原函数概念的问题" class="headerlink" title="2. 不定积分和原函数概念的问题"></a>2. 不定积分和原函数概念的问题</h3><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-ji-fen-xue/yi-yuan-han-shu-ji-fen-xue/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E5%92%8C%E5%8E%9F%E5%87%BD%E6%95%B0%E6%A6%82%E5%BF%B5%E7%9A%84%E9%97%AE%E9%A2%98.JPG" alt="不定积分和原函数概念的问题"></p><h3 id="3-变限积分函数的相关总结"><a href="#3-变限积分函数的相关总结" class="headerlink" title="3. 变限积分函数的相关总结"></a>3. 变限积分函数的相关总结</h3><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-ji-fen-xue/yi-yuan-han-shu-ji-fen-xue/%E5%8F%98%E7%8E%B0%E7%A7%AF%E5%88%86%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93.jpg" alt="变现积分函数总结"></p><h3 id="4-求原函数"><a href="#4-求原函数" class="headerlink" title="4. 求原函数"></a>4. 求原函数</h3><p><strong>注意原函数一定是连续的</strong></p><h2 id="定积分"><a href="#定积分" class="headerlink" title="定积分"></a>定积分</h2><h3 id="1-定积分的计算"><a href="#1-定积分的计算" class="headerlink" title="1. 定积分的计算"></a>1. 定积分的计算</h3><p>基本公式：牛顿莱布尼兹公式带上下限</p><h4 id="1-6个计算技巧"><a href="#1-6个计算技巧" class="headerlink" title="1. 6个计算技巧"></a>1. 6个计算技巧</h4><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-ji-fen-xue/yi-yuan-han-shu-ji-fen-xue/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E7%9A%846%E4%B8%AA%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7.JPG" alt="不定积分的6个常用技巧"></p><h4 id="2-常见套路"><a href="#2-常见套路" class="headerlink" title="2. 常见套路"></a>2. 常见套路</h4><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-ji-fen-xue/yi-yuan-han-shu-ji-fen-xue/%E5%B8%B8%E8%A7%81%E5%A5%97%E8%B7%AF.JPG" alt="常见套路"></p><h3 id="2-概念题"><a href="#2-概念题" class="headerlink" title="2. 概念题"></a>2. 概念题</h3><p>（1）f(x)的奇偶性和F(x)的奇偶性的关系</p><p>（2）f(x)的周期和F(x)的周期的关系</p><h3 id="3-求原函数"><a href="#3-求原函数" class="headerlink" title="3. 求原函数"></a>3. 求原函数</h3><p>原函数一定是连续的，注意确定C的取值，这种题型一般是让求 分段函数的原函数</p><h3 id="4-考察变上限积分函数在某一点或在某一区间内的连续性，可导性"><a href="#4-考察变上限积分函数在某一点或在某一区间内的连续性，可导性" class="headerlink" title="4. 考察变上限积分函数在某一点或在某一区间内的连续性，可导性"></a>4. 考察变上限积分函数在某一点或在某一区间内的连续性，可导性</h3><p>（1）变上限积分函数F(x)天然连续，一定连续</p><p>（2）是否可导要看f(x)的连续性，若f(x)连续，则F(x)可导</p><h3 id="5-比较积分的大小"><a href="#5-比较积分的大小" class="headerlink" title="5. 比较积分的大小"></a>5. 比较积分的大小</h3><h4 id="（1）定积分比较大小"><a href="#（1）定积分比较大小" class="headerlink" title="（1）定积分比较大小"></a>（1）定积分比较大小</h4><ol><li>若积分区间相同→直接比较被积函数的大小</li><li>若积分区间不同→用换元等方法统一区间后，再比较被积函数的大小</li><li>有时直接比较两个积分大小比较困难，此时需要找一个新的积分进行过渡，利用不等号的传递性解题<ol><li>例如，当需要比较J、K、1之间的大小时，数字“1”就相当于这种“过渡积分”的作用（解题思想应是：这个1是怎么来的，以此找到正确的解法方向&#x2F;方法）</li></ol></li><li>用作图法（定性的、直观的）解题<ol><li>作图分析的两个极其关键因素：<br>①决定正负的“符号因子”是哪个函数？<br>②决定伸缩比例的“伸缩因子”是哪个函数？</li><li>该方法可以解决相当部分的积分比较大小题目（但不是所有），尤其是“判断积分正负号”的题目</li></ol></li></ol><h4 id="（2）定积分正负的判断"><a href="#（2）定积分正负的判断" class="headerlink" title="（2）定积分正负的判断"></a>（2）定积分正负的判断</h4><ol><li>法一：把积分区间从被积函数的正负分界点拆开，对负的那一段上的积分进行换元（区间再现也是换元），使得拆开后的两段积分区间相同，然后合并两个积分即可</li><li>法二：分部积分法。这种题型很常用的方法就是分部积分法，大多都能做出来。</li><li>法三（最快的方法）：作图法（非常适用于判断积分正负号的题目）<ol><li>作图分析的两个极其关键因素：<br>①决定正负的“符号因子”是哪个函数？<br>②决定伸缩比例的“伸缩因子”是哪个函数？</li><li>该方法可以解决相当部分的积分比较大小题目（但不是所有），尤其是“判断积分正负号”的题目</li></ol></li></ol><h4 id="（3）二重积分比大小"><a href="#（3）二重积分比大小" class="headerlink" title="（3）二重积分比大小"></a>（3）二重积分比大小</h4><ol><li><p>题型一：比较相同积分区域不同被积函数 的二重积分大小</p><p>直接比较被积函数的大小</p></li><li><p>题型二：比较不同积分区域相同被积函数 的二重积分大小</p><p>题目比较简单，方法比如有：<br>①先判断被积函数的正负、大于1还是小于1等<br>②再判断各个积分区域的大小</p></li></ol><p>[另] 构造函数法：F(x)&#x3D;f(x)-g(x)→用导数判断F(x)的符号即可</p><h3 id="6-判断定积分的符号"><a href="#6-判断定积分的符号" class="headerlink" title="6. 判断定积分的符号"></a>6. 判断定积分的符号</h3><p>（1）只需判断被积函数的正负 ——&gt; 若一个积分拆成了两个不同区间的积分→用换元法统一区间再继续符号分析</p><p>（2）若是选择题→用特殊值法最快<br>（这里的特殊值法不是说取具体的是，二是取一个特殊的、具体的函数作为被积函数）</p><h3 id="7-有关变-上-限积分函数的题"><a href="#7-有关变-上-限积分函数的题" class="headerlink" title="7. 有关变(上)限积分函数的题"></a>7. 有关变(上)限积分函数的题</h3><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-ji-fen-xue/yi-yuan-han-shu-ji-fen-xue/%E5%8F%98%E4%B8%8A%E7%A7%AF%E5%88%86%E9%99%90%E5%87%BD%E6%95%B0.JPG" alt="变上积分限函数"></p><h3 id="8-“离散和”与“连续和”的问题"><a href="#8-“离散和”与“连续和”的问题" class="headerlink" title="8. “离散和”与“连续和”的问题"></a>8. “离散和”与“连续和”的问题</h3><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-ji-fen-xue/yi-yuan-han-shu-ji-fen-xue/%E2%80%9C%E7%A6%BB%E6%95%A3%E5%92%8C%E2%80%9D%E4%B8%8E%E2%80%9C%E8%BF%9E%E7%BB%AD%E5%92%8C%E2%80%9D%E7%9A%84%E9%97%AE%E9%A2%98.JPG" alt="“离散和”与“连续和”的问题"></p><h3 id="9-积分不等式的证明题"><a href="#9-积分不等式的证明题" class="headerlink" title="9. 积分不等式的证明题"></a>9. 积分不等式的证明题</h3><p>最重要的方法是确定把哪一个字母当成变量，构造辅助函数→转化成证明微分不等式</p><p>辅助方法：积分中值定理、积分的奇偶性等</p><h2 id="反常积分"><a href="#反常积分" class="headerlink" title="反常积分"></a>反常积分</h2><p><img src="/2022/04/09/bi-ji/shu-xue/yi-yuan-han-shu-ji-fen-xue/yi-yuan-han-shu-ji-fen-xue/%E5%8F%8D%E5%B8%B8%E7%A7%AF%E5%88%86.jpg" alt="反常积分"></p>]]></content>
      
      
      <categories>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高等数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二重积分</title>
      <link href="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/"/>
      <url>/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/</url>
      
        <content type="html"><![CDATA[<h1 id="二重积分"><a href="#二重积分" class="headerlink" title="二重积分"></a>二重积分</h1><h2 id="题型一：利用二重积分定义计算极限"><a href="#题型一：利用二重积分定义计算极限" class="headerlink" title="题型一：利用二重积分定义计算极限"></a>题型一：利用二重积分定义计算极限</h2><p>二重积分的定义：<br><img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84%E5%AE%9A%E4%B9%89.JPG" alt="二重积分的定义"></p><p>$$<br>\iint\limits_{D}f(x,y)d\sigma &#x3D; \lim_{\lambda \to 0}\sum_{i&#x3D;1}^{n}f(\varepsilon_i,\eta_i )\triangle \sigma _i<br>$$</p><p>几何意义：<strong>积分域D为底，曲面 z&#x3D;f(x,y) 为曲顶的曲顶柱体的体积</strong></p><p><img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84%E8%BF%90%E7%AE%97%E6%80%A7%E8%B4%A8.jpg" alt="二重积分的运算性质"></p><p><img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84xy%E5%88%86%E7%A6%BB.jpg" alt="二重积分的xy分离"></p><p>注：</p><ol><li>此处积分区域必须为矩形（包括广义矩形），但不要求一定是正方形</li><li>在极坐标系中也有类似的结论，即“θ和r的取值范围都是在两个常数之间”且“关于θ的函数和关于r的函数可分离”时，二重积分可以写成两个定积分的乘积</li></ol><h2 id="题型二：利用对称性简化二重积分的计算"><a href="#题型二：利用对称性简化二重积分的计算" class="headerlink" title="题型二：利用对称性简化二重积分的计算"></a>题型二：利用对称性简化二重积分的计算</h2><p>当积分区域具有明显的对称性时，通常可以先利用对称性化简积分</p><p>二重积分的奇偶性公式用几何意义去理解着记，其实并没有什么用。但是做题快呀！</p><ol><li><p>奇偶对称性（D关于x、y轴对称）</p><p><img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/D%E5%85%B3%E4%BA%8Ex%E3%80%81y%E8%BD%B4%E5%AF%B9%E7%A7%B0.JPG" alt="D关于x、y轴对称"></p></li><li><p>奇偶对称性（D关于原点对称）</p><p><img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/D%E5%85%B3%E4%BA%8E%E5%8E%9F%E7%82%B9%E5%AF%B9%E7%A7%B0.jpg" alt="D关于原点对称"></p></li><li><p>轮换对称性（D关于y &#x3D; ± x 对称）</p><p>是指积分区域D关于y &#x3D; ± x 对称时，就满足轮换对称的公式能使用轮换对称性的，一般都会有奇效</p><p>![D关于y &#x3D; ± x 对称](D关于y &#x3D; ± x 对称.JPG)</p></li><li><p>出题时有两种“为难”方法</p><p><img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/%E4%B8%A4%E7%A7%8D%E2%80%9C%E4%B8%BA%E9%9A%BE%E2%80%9D%E6%96%B9%E6%B3%95.JPG" alt="两种“为难”方法"></p></li></ol><h2 id="题型三：利用“二重积分的结果是一个数字”"><a href="#题型三：利用“二重积分的结果是一个数字”" class="headerlink" title="题型三：利用“二重积分的结果是一个数字”"></a>题型三：利用“二重积分的结果是一个数字”</h2><p>原理是构造成方程，解方程</p><p><img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84%E7%BB%93%E6%9E%9C%E6%98%AF%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%97.jpg" alt="二重积分的结果是一个数字"></p><h2 id="题型四：二重积分的计算"><a href="#题型四：二重积分的计算" class="headerlink" title="题型四：二重积分的计算"></a>题型四：二重积分的计算</h2><h3 id="1-选择恰当的坐标系计算二重积分"><a href="#1-选择恰当的坐标系计算二重积分" class="headerlink" title="1. 选择恰当的坐标系计算二重积分"></a>1. 选择恰当的坐标系计算二重积分</h3><ol><li><p>直角坐标系和极坐标系的相互变换</p><ol><li><p>【注】转换方法</p><p><img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/%E6%9E%81%E5%9D%90%E6%A0%87%E4%B8%8E%E7%9B%B4%E8%A7%92%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2%E6%96%B9%E6%B3%95.jpg" alt="极坐标与直角坐标转换方法"></p></li></ol></li><li><p>适用于极坐标计算的积分汇总</p><ol><li>见下面第4.点</li></ol></li><li><p>广义极坐标（了解内容）</p><p><img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/%E5%B9%BF%E4%B9%89%E6%9E%81%E5%9D%90%E6%A0%87%E9%A2%98%E7%9B%AE.jpg" alt="广义极坐标题目"></p><p><img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/%E5%B9%BF%E4%B9%89%E6%9E%81%E5%9D%90%E6%A0%87%E7%AD%94%E6%A1%88.jpg" alt="广义极坐标答案"></p></li><li><p>细节</p><ol><li><p>极坐标基本都是先积r再积θ；但也有先积θ后积r的</p></li><li><p>dxdy&#x3D;rdrdθ</p><p>注：极坐标下交换积分次序可将视θ为x轴，r视为y轴，用直角坐标的方法处理（包括画图和确定积分限都是）</p></li></ol></li></ol><h3 id="2-选择（更改）恰当的积分次序"><a href="#2-选择（更改）恰当的积分次序" class="headerlink" title="2. 选择（更改）恰当的积分次序"></a>2. 选择（更改）恰当的积分次序</h3><ol><li>直角坐标交换积分次序<ol><li>内层积分很复杂不好积、或者积不出来的时候，就可以考虑交换积分次序</li><li>先对x积分还是先对y积分是有区别的，二者的计算量可能会相差非常大，所以要根据被积函数、和积分区域选择恰当的积分顺序</li><li>两个累次积分相加的题目（且两个积分的被积函数相同），大多都是出题人把一个本来很好算的二重积分，故意选择了一个错误的积分次序后，导致不得不分割积分区域，所以产生了两个积分之和。遇到这种题，我们先把两个累次积分对应的积分区域画出来，它们大概率可以拼在一起，然后再选择正确的积分次序即可.</li></ol></li><li>极坐标交换积分次序<ol><li>极坐标下交换积分次序可将视θ为x轴，r视为y轴，用直角坐标的方法处理（包括画图和确定积分限都是）</li></ol></li></ol><h3 id="3-需要平移极坐标系（直角坐标系）的二重积分"><a href="#3-需要平移极坐标系（直角坐标系）的二重积分" class="headerlink" title="3. 需要平移极坐标系（直角坐标系）的二重积分"></a>3. 需要平移极坐标系（直角坐标系）的二重积分</h3><ol><li><p>极坐标的平移</p><p><img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/%E6%9E%81%E5%9D%90%E6%A0%87%E7%9A%84%E5%B9%B3%E7%A7%BB.jpg" alt="极坐标的平移"></p></li><li><p>直角坐标的平移</p><p><img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/%E7%9B%B4%E8%A7%92%E5%9D%90%E6%A0%87%E7%9A%84%E5%B9%B3%E7%A7%BB.JPG" alt="直角坐标的平移"></p></li></ol><h3 id="4-适用于使用极坐标计算的积分汇总"><a href="#4-适用于使用极坐标计算的积分汇总" class="headerlink" title="4. 适用于使用极坐标计算的积分汇总"></a>4. 适用于使用极坐标计算的积分汇总</h3><p>要根据被积函数和积分区域综合分析选择恰当的坐标系</p><ol><li><p>被积函数或积分区域与圆的方程有关  适用极坐标的式子1.jpg</p></li><li><p>被积函数或积分区域出现<img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/%E9%80%82%E7%94%A8%E6%9E%81%E5%9D%90%E6%A0%87%E7%9A%84%E5%BC%8F%E5%AD%901.jpg" alt="适用极坐标的式子"></p></li><li><p>积分区域为“<strong>角型区域</strong>”或“<strong>角型区域的一部分</strong>”（因为这种区域很好确定角度）</p><p><img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/%E8%A7%92%E5%9E%8B%E5%8C%BA%E5%9F%9F.jpg" alt="角型区域"></p></li><li><p>题干所给的积分区域直接是由极坐标下的方程确定的，也可以采用极坐标系</p></li><li><p>有些图形的面积难以用常规方法解得，可尝试极坐标上的二重积分解题</p><ol><li>使用原理：当被积函数&#x3D;1，则二重积分的值就等于积分区域的面积</li><li>例：<img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E8%A7%A3%E5%9B%BE%E5%BD%A2%E9%9D%A2%E7%A7%AF.jpg" alt="二重积分解图形面积"></li></ol></li><li><p>注意：积分区域即使是由直线&#x2F;纯直线&#x2F;抛物线围成，极坐标也是可以用的，要综合“积分区域+被积函数”来选择恰当的坐标系</p></li></ol><h3 id="5-需要分割积分区域的题目"><a href="#5-需要分割积分区域的题目" class="headerlink" title="5. 需要分割积分区域的题目"></a>5. 需要分割积分区域的题目</h3><ol><li><p>哪些函数的积分一般需要分割区域</p><ol><li>分段函数</li><li>被积函数中有绝对值</li><li>max函数</li><li>min函数</li><li>取整函数[x]</li><li>一些使用了分割区域方法后，计算变得非常简单的函数（称为割补法）</li></ol><p>有些题目还会需要分情况讨论</p></li><li><p>些题目分割区域不是因为“不得不分割”，而是为了简化题目。例如</p><p><img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/%E7%AE%80%E5%8C%96%E9%A2%98%E7%9B%AE.JPG" alt="简化题目"></p></li></ol><h3 id="6-积分区域由参数方程确定的二重积分"><a href="#6-积分区域由参数方程确定的二重积分" class="headerlink" title="6.积分区域由参数方程确定的二重积分"></a>6.积分区域由参数方程确定的二重积分</h3><h3 id="7-反常二重积分的计算"><a href="#7-反常二重积分的计算" class="headerlink" title="7. 反常二重积分的计算"></a>7. 反常二重积分的计算</h3><p>通常指的是无界区域上的二重积分，且基本都与“概率积分”相关</p><p>概率积分：不仅要记住答案，还要记住证明过程：<br>$$<br>概率积分:\int_{0}^{+\infty}e^{-x^2}dx&#x3D;\frac{\sqrt{\pi}}{2}<br>$$</p><p>证明方法有多种，其中一种是“对原式平方再开方”，再利用“定积分的值与积分变量用什么字母无关”，以此可以构造出一个二重积分，求解二重积分即可</p><h3 id="8-利用二重积分计算定积分"><a href="#8-利用二重积分计算定积分" class="headerlink" title="8. 利用二重积分计算定积分"></a>8. 利用二重积分计算定积分</h3><p>适用题型：被积函数中含有“<strong>同名函数相减”的形式</strong></p><p>解题方法：把“同名函数相减的部分”还原成定积分的形式（即积分的逆向思维），再利用“定积分的值与积分变量用什么字母无关”，以此可以构造出一个二重积分，求解二重积分即可</p><h3 id="9-被积函数有绝对值-x2F-取整符号"><a href="#9-被积函数有绝对值-x2F-取整符号" class="headerlink" title="9. 被积函数有绝对值&#x2F;取整符号"></a>9. 被积函数有绝对值&#x2F;取整符号</h3><p>有绝对值→去绝对值</p><p>有取整符号→分段进行积分</p><h3 id="10-导论-x2F-补充（最后看）"><a href="#10-导论-x2F-补充（最后看）" class="headerlink" title="10. 导论&#x2F;补充（最后看）"></a>10. 导论&#x2F;补充（最后看）</h3><ol><li><p>总的说二重积分就只有三个考点：<img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/%E4%BA%8C%E9%87%8D%E7%A7%AF%E5%88%86%E7%9A%84%E4%B8%89%E4%B8%AA%E8%80%83%E7%82%B9.JPG" alt="二重积分的三个考点"></p></li><li><p>如何写二重积分：“后积先定限，限内画直线，先穿写下限，后穿写上限”</p><p>【注1】若是极坐标，第二步改为“极点画射线”</p><p>【注2】若是先积θ后积r的极坐标，则第二步为“画同心圆”</p></li><li><p>经验：计算二重积分，上来就要注意是否要换序和换坐标，因为考试中的二重积分，基本不可能让你直接算出答案</p></li><li><p>关于积分上下限“大小关系不对”的问题</p><ol><li>由二重积分转化为二次积分，积分下限一定是小于积分上限的</li><li>反过来，如果题目给的二次积分不满足“下限＜上限”，则需要自己颠倒上下限的位置（颠倒后要在最前面添一个负号），然后再进行后续操作</li></ol></li><li><p>确定y&#x3D;arcsin(sinx)&#x3D;？的方法</p><ol><li><p>法一：诱导公式法</p><p>y&#x3D;arcsinx的定义域是<img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/pi-2.jpg" alt="pi-2"></p></li><li><p>法二：图像变换法</p><ol><li>对称性</li><li>周期性</li></ol></li></ol></li><li><p>补充：求一个图形的面积的方法</p><ol><li><p>用定积分</p></li><li><p>用二重积分</p><p>当平面图形的面积难以用常规方法进行计算时，可尝试极坐标算面积（尤其是图像为“角形区域或角型区域的一部分”）</p></li></ol></li><li><p>sin(x+φ)中，φ只会平移sinx的图像，不会改变他的周期、对称性等性质，在计算含有sin(x+φ)的相关<br>积分时，要注意使用周期性和对称性，以此找到突破口和大大简化计算量</p></li></ol><h2 id="题型五：极限中含有变限二重积分函数"><a href="#题型五：极限中含有变限二重积分函数" class="headerlink" title="题型五：极限中含有变限二重积分函数"></a>题型五：极限中含有变限二重积分函数</h2><ol><li><p>目的：首先，我们的目的是去掉二重积分符号（不要因为路很长，而忘掉了目的是什么）</p><p>基本方法：使用洛必达两次，消去变限二重积分函数；用不了洛必达的时候，可考虑积分中值定理（因为积分中值定理也有消去积分符号的作用）</p><p>思想：往“积分限一个是变量 （或变量的函数），另一个是‘常数’，且被积函数中不含有‘求导变量’“的方向去思考</p></li><li><p>对二重积分的求导顺序：先外层，再内层</p><ol><li><p>注1：对外层求导的时候，内层积分可以看成是一个函数</p></li><li><p>注2：积分可以求导的形式是，积分限一个是变量 （或变量的函数），另一个是‘常数’，且被积函数中不含有‘求导变量’（如果有，则用换元法消除）“</p></li><li><p>注3：如果被积函数中含有“求导变量”，而且无法使用换元法消去（比如被积函数是二元抽象函数时，就无法使用换元法），这时无法对其求导（即无法使用洛必达），则可以考虑使用积分中值定理去掉积分符号（目的就是这个，不要忘了初心）</p><p>这说明，去掉积分符号的的方法除了求导，还有积分中值定理</p></li><li><p>注4：要认清每个字母，对于极限运算，和对于积分运算，究竟谁是变量，谁是常数</p></li></ol></li><li><p>有时不方便对二重积分求导，有如下操作</p><ol><li>交换积分次序</li><li>换元法</li><li>换坐标系（直角坐标与极坐标互换）</li><li>积分中值定理</li><li>有时要先对内层积分做恒等变形（简化内层积分有时可以直接算出得到一个“常数”，则原来的二重积分就变成了一元变限积分）</li></ol></li></ol><h2 id="题型六：求f-t-的表达式"><a href="#题型六：求f-t-的表达式" class="headerlink" title="题型六：求f(t)的表达式"></a>题型六：求f(t)的表达式</h2><p>基本都是与微分方程有关</p><h2 id="其他题型"><a href="#其他题型" class="headerlink" title="其他题型"></a>其他题型</h2><ol><li><p>坐标的线性变换题</p><p><img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/%E5%9D%90%E6%A0%87%E7%9A%84%E7%BA%BF%E6%80%A7%E5%8F%98%E6%8D%A2%E9%A2%98.jpg" alt="坐标的线性变换题"></p><p><img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/%E5%9D%90%E6%A0%87%E7%9A%84%E7%BA%BF%E6%80%A7%E5%8F%98%E6%8D%A2%E9%A2%98%E7%AD%94%E6%A1%881.jpg" alt="坐标的线性变换题答案1"></p><p><img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/%E5%9D%90%E6%A0%87%E7%9A%84%E7%BA%BF%E6%80%A7%E5%8F%98%E6%8D%A2%E9%A2%98%E7%AD%94%E6%A1%882.jpg" alt="坐标的线性变换题答案2"></p></li><li><p>证明不等式</p><ol><li><p>不等式中包含多个积分</p><ol><li>可考虑合并为二重积分（利用原理：定积分的值与积分变量的字母无关）</li></ol></li><li><p>不等号左右两边都是分式</p><ol><li><p>先整理不等式，去掉分母。例如</p><p><img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/%E8%AF%81%E6%98%8E%E4%B8%8D%E7%AD%89%E5%BC%8F%E9%A2%98%E7%9B%AE.jpg" alt="证明不等式题目"></p><p><img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/%E8%AF%81%E6%98%8E%E4%B8%8D%E7%AD%89%E5%BC%8F%E7%AD%94%E6%A1%88.jpg" alt="证明不等式答案"></p></li></ol></li></ol></li></ol><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ol><li>对于看着很复杂的积分，基本都是可以用积分的性质（对称性、奇偶性、区域分割等）化简掉的</li><li>一切的开方都要注意正负号的选取，特别是圆的方程，正负号分别代表不同的“上下半圆、左右半圆”</li><li>一切的反三角函数一定要注意定义域，特别是arcsinx、arcsin2x 等的定义域</li><li>sgn函数：取参数的符号。其取值只有三种，-1，+1，0；可能会作为分段函数来考察</li><li>二重积分里的“被积函数与积分区域取交集”的题目，其实就是概率论中求概率的题目</li><li>除了积分区域D关于x轴y轴对称，不要忘了D若关于y&#x3D;x、y&#x3D;-x对称时，还有轮换对称性</li><li>同一个函数定义f(x)，其自变量不同，表达式自然也会不同，同时，定义域也会不同，如f(x)、f(y)、f(x+y)，他们的表达式不同，定义域也不同</li><li>认清“自变量”，认清“常数”</li><li>感悟“去分母”思想（在各章节非常多的题型中都适用）</li></ol><h2 id="好题收集"><a href="#好题收集" class="headerlink" title="好题收集"></a>好题收集</h2><h6 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h6><p><img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/%E5%A5%BD%E9%A2%981%E9%A2%98%E7%9B%AE.jpg" alt="好题1题目"></p><p><img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/%E5%A5%BD%E9%A2%981%E7%AD%94%E6%A1%881.jpg" alt="好题1答案1"></p><p><img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/%E5%A5%BD%E9%A2%981%E7%AD%94%E6%A1%882.jpg" alt="好题1答案2"></p><h6 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h6><p><img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/%E9%A2%98%E7%9B%AE2.jpg" alt="题目2"></p><p><img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/%E9%A2%98%E7%9B%AE2%E7%AD%94%E6%A1%881.jpg" alt="题目2答案1"></p><p><img src="/2022/04/09/bi-ji/shu-xue/er-chong-ji-fen/er-chong-ji-fen/%E9%A2%98%E7%9B%AE2%E7%AD%94%E6%A1%882.jpg" alt="题目2答案2"></p>]]></content>
      
      
      <categories>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高等数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数极限与函数</title>
      <link href="/2022/04/09/bi-ji/shu-xue/han-shu-ji-xian-yu-han-shu/han-shu-ji-xian-yu-han-shu/"/>
      <url>/2022/04/09/bi-ji/shu-xue/han-shu-ji-xian-yu-han-shu/han-shu-ji-xian-yu-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章《函数极限与函数》"><a href="#第一章《函数极限与函数》" class="headerlink" title="第一章《函数极限与函数》"></a>第一章《函数极限与函数》</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="1-判断函数奇偶性、单调性"><a href="#1-判断函数奇偶性、单调性" class="headerlink" title="1. 判断函数奇偶性、单调性"></a>1. 判断函数奇偶性、单调性</h3><h3 id="2-求复合函数的表达式"><a href="#2-求复合函数的表达式" class="headerlink" title="2. 求复合函数的表达式"></a>2. 求复合函数的表达式</h3><h3 id="3-已知函数在某一点连续（极限值等于函数值），求待定参数"><a href="#3-已知函数在某一点连续（极限值等于函数值），求待定参数" class="headerlink" title="3. 已知函数在某一点连续（极限值等于函数值），求待定参数"></a>3. 已知函数在某一点连续（极限值等于函数值），求待定参数</h3><h3 id="4-求间断点的个数并判断类型："><a href="#4-求间断点的个数并判断类型：" class="headerlink" title="4.  求间断点的个数并判断类型："></a>4.  求间断点的个数并判断类型：</h3><h4 id="4-1-第一类间断点："><a href="#4-1-第一类间断点：" class="headerlink" title="4.1 第一类间断点："></a>4.1 第一类间断点：</h4><p>​    可去间断点（左右极限存在且相等），跳跃间断点（左右极限存在但是不相等）</p><h4 id="4-2-第二类间断点："><a href="#4-2-第二类间断点：" class="headerlink" title="4.2 第二类间断点："></a>4.2 第二类间断点：</h4><p><img src="/2022/04/09/bi-ji/shu-xue/han-shu-ji-xian-yu-han-shu/han-shu-ji-xian-yu-han-shu/1xandsin1x.JPG" alt="1xandsin1x"></p><p>以上4点，比较简单，多做题即可，略。</p><h3 id="5-求渐近线的个数，并求渐近线的方程"><a href="#5-求渐近线的个数，并求渐近线的方程" class="headerlink" title="5. 求渐近线的个数，并求渐近线的方程"></a>5. 求渐近线的个数，并求渐近线的方程</h3><p>要注意水平渐近线和斜渐近线均要计算+∞和-∞</p><p>[注意，水平渐近线和斜渐近线的两个方向都算出来，因为算出来可能为同一条渐近线方程]</p><p><img src="/2022/04/09/bi-ji/shu-xue/han-shu-ji-xian-yu-han-shu/han-shu-ji-xian-yu-han-shu/%E6%B8%90%E8%BF%91%E7%BA%BF.jpg" alt="渐近线"></p><h3 id="6-判断复合函数的奇偶性、单调性"><a href="#6-判断复合函数的奇偶性、单调性" class="headerlink" title="6. 判断复合函数的奇偶性、单调性"></a>6. 判断复合函数的奇偶性、单调性</h3><p><img src="/2022/04/09/bi-ji/shu-xue/han-shu-ji-xian-yu-han-shu/han-shu-ji-xian-yu-han-shu/%E7%AC%A6%E5%90%88%E5%87%BD%E6%95%B0.jpg" alt="符合函数"></p><p>即：</p><ol><li><p>复合函数的单调性：“同增异减”</p></li><li><p>复合函数的奇偶性：“只有复合的两个函数都是奇函数，复合函数才是奇函数，其余情况都是偶函数”</p></li></ol><h3 id="7-讨论下面这个函数的连续性、可导性、间断点类型等"><a href="#7-讨论下面这个函数的连续性、可导性、间断点类型等" class="headerlink" title="7. 讨论下面这个函数的连续性、可导性、间断点类型等"></a>7. 讨论下面这个函数的连续性、可导性、间断点类型等</h3><p><img src="/2022/04/09/bi-ji/shu-xue/han-shu-ji-xian-yu-han-shu/han-shu-ji-xian-yu-han-shu/%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0.jpg" alt="一个函数"></p><p>关键是注意运算顺序：**先对n求极限(此时把x看成是常数)**，求出f(x)的表达式→再根据f(x)的表达式研究函数的性质</p><h3 id="8-题干出现若干个函数值之和"><a href="#8-题干出现若干个函数值之和" class="headerlink" title="8. 题干出现若干个函数值之和"></a>8. 题干出现若干个函数值之和</h3><ol><li><p>一般用夹逼定理，将“若干个函数之和”合并为同一个点的函数值，这里要进行“放大缩小”的操作</p></li><li><p>也有可能是用定积分的定义（这个方法需要用到积分那一章的知识）</p></li></ol><h3 id="9-证明题"><a href="#9-证明题" class="headerlink" title="9. 证明题"></a>9. 证明题</h3><h4 id="1-证明一个函数连续"><a href="#1-证明一个函数连续" class="headerlink" title="1. 证明一个函数连续"></a>1. 证明一个函数连续</h4><p>​        （1）证函数在某一点处连续，<img src="/2022/04/09/bi-ji/shu-xue/han-shu-ji-xian-yu-han-shu/han-shu-ji-xian-yu-han-shu/%E6%9E%81%E9%99%90%E5%AE%9A%E4%B9%89.jpg" alt="极限定义"></p><p>​        （2） 证函数在某区间内连续</p><p><img src="/2022/04/09/bi-ji/shu-xue/han-shu-ji-xian-yu-han-shu/han-shu-ji-xian-yu-han-shu/%E8%AF%81%E6%98%8E%E8%BF%9E%E7%BB%AD.jpg" alt="证明连续"></p><h4 id="2-介值定理使用模板"><a href="#2-介值定理使用模板" class="headerlink" title="2. 介值定理使用模板"></a>2. 介值定理使用模板</h4><p>（介值定理的使用模板）例题，证明过程和结论都背下来</p><p><img src="/2022/04/09/bi-ji/shu-xue/han-shu-ji-xian-yu-han-shu/han-shu-ji-xian-yu-han-shu/%E7%95%8C%E5%80%BC%E5%AE%9A%E7%90%86%E8%AF%81%E6%98%8E.jpg" alt="界值定理证明"></p><p><img src="/2022/04/09/bi-ji/shu-xue/han-shu-ji-xian-yu-han-shu/han-shu-ji-xian-yu-han-shu/%E7%95%8C%E5%80%BC%E5%AE%9A%E7%90%86%E8%AF%81%E6%98%8E%E8%BF%87%E7%A8%8B.jpg" alt="界值定理证明过程"></p><h4 id="3-证明零点存在（或方程成立）"><a href="#3-证明零点存在（或方程成立）" class="headerlink" title="3. 证明零点存在（或方程成立）"></a>3. 证明零点存在（或方程成立）</h4><p>法一：区间端点异号 f(a)f(b)&lt;0 且 f(x) 连续，则 f(x)&#x3D;0 一定有解（即存在零点）</p><p>法二：<img src="/2022/04/09/bi-ji/shu-xue/han-shu-ji-xian-yu-han-shu/han-shu-ji-xian-yu-han-shu/%E5%87%BD%E6%95%B0%E7%9A%84%E7%B4%AF%E8%AE%A1%E5%92%8C%E4%BD%BF%E7%94%A8%E9%9B%B6%E7%82%B9%E5%AE%9A%E7%90%86.jpg" alt="函数的累计和使用零点定理"><br><img src="/2022/04/09/bi-ji/shu-xue/han-shu-ji-xian-yu-han-shu/han-shu-ji-xian-yu-han-shu/f(xi).JPG" alt="f(xi)"></p><ol><li><p>要么<img src="/2022/04/09/bi-ji/shu-xue/han-shu-ji-xian-yu-han-shu/han-shu-ji-xian-yu-han-shu/f(xi).JPG" alt="f(xi)">全为0</p></li><li><p>要么<img src="/2022/04/09/bi-ji/shu-xue/han-shu-ji-xian-yu-han-shu/han-shu-ji-xian-yu-han-shu/f(xi).JPG" alt="f(xi)">中至少有一个正有一个负</p><p>2.1 再由“零点定理+函数的连续性”得存在零点</p></li></ol><h2 id="函数极限"><a href="#函数极限" class="headerlink" title="函数极限"></a>函数极限</h2><h3 id="1-函数极限的计算"><a href="#1-函数极限的计算" class="headerlink" title="1. 函数极限的计算"></a>1. 函数极限的计算</h3><h4 id="1-1-7种基本的不定式"><a href="#1-1-7种基本的不定式" class="headerlink" title="1.1 7种基本的不定式"></a>1.1 7种基本的不定式</h4><p><img src="/2022/04/09/bi-ji/shu-xue/han-shu-ji-xian-yu-han-shu/han-shu-ji-xian-yu-han-shu/7%E7%A7%8D%E4%B8%8D%E5%AE%9A%E5%BC%8F.JPG" alt="7种不定式"></p><h4 id="1-2-其他形式的函数极限计算"><a href="#1-2-其他形式的函数极限计算" class="headerlink" title="1.2 其他形式的函数极限计算"></a>1.2 其他形式的函数极限计算</h4><p><img src="/2022/04/09/bi-ji/shu-xue/han-shu-ji-xian-yu-han-shu/han-shu-ji-xian-yu-han-shu/%E5%87%BD%E6%95%B0%E6%9E%81%E9%99%90%E7%9A%84%E5%85%B6%E4%BB%96%E5%BD%A2%E5%BC%8F.JPG" alt="函数极限的其他形式"></p><p><img src="/2022/04/09/bi-ji/shu-xue/han-shu-ji-xian-yu-han-shu/han-shu-ji-xian-yu-han-shu/%E5%87%BD%E6%95%B0%E6%9E%81%E9%99%90%E7%9A%84%E8%AE%A1%E7%AE%9712-13.JPG" alt="函数极限的计算12-13"></p><p><img src="/2022/04/09/bi-ji/shu-xue/han-shu-ji-xian-yu-han-shu/han-shu-ji-xian-yu-han-shu/%E5%87%BD%E6%95%B0%E6%9E%81%E9%99%90%E8%AE%A1%E7%AE%9714.JPG" alt="函数极限计算14"></p><p><img src="/2022/04/09/bi-ji/shu-xue/han-shu-ji-xian-yu-han-shu/han-shu-ji-xian-yu-han-shu/%E5%87%BD%E6%95%B0%E6%9E%81%E9%99%90%E8%AE%A1%E7%AE%9715-16.JPG" alt="函数极限计算15-16"></p><h3 id="2-求无穷小量的阶"><a href="#2-求无穷小量的阶" class="headerlink" title="2. 求无穷小量的阶"></a>2. 求无穷小量的阶</h3><p><img src="/2022/04/09/bi-ji/shu-xue/han-shu-ji-xian-yu-han-shu/han-shu-ji-xian-yu-han-shu/%E6%97%A0%E7%A9%B7%E5%B0%8F%E9%87%8F%E7%9A%84%E4%BB%8B.JPG" alt="无穷小量的介"></p><h3 id="3-考擦极限不存在的类别"><a href="#3-考擦极限不存在的类别" class="headerlink" title="3. 考擦极限不存在的类别"></a>3. 考擦极限不存在的类别</h3><p><img src="/2022/04/09/bi-ji/shu-xue/han-shu-ji-xian-yu-han-shu/han-shu-ji-xian-yu-han-shu/%E6%9E%81%E9%99%90%E4%B8%8D%E5%AD%98%E5%9C%A8.JPG" alt="极限不存在"></p><h3 id="4-求待定系数"><a href="#4-求待定系数" class="headerlink" title="4. 求待定系数"></a>4. 求待定系数</h3><p>（1） 在极限存在的前提下，和正常求极限去算就行</p><p>（2）选择题可以使用代入法</p><p>（3）可能需要对参数进行讨论</p><p><img src="/2022/04/09/bi-ji/shu-xue/han-shu-ji-xian-yu-han-shu/han-shu-ji-xian-yu-han-shu/%E5%8F%82%E6%95%B0%E8%AE%A8%E8%AE%BA%E6%B1%82%E5%BE%85%E5%AE%9A%E7%B3%BB%E6%95%B0.jpg" alt="参数讨论求待定系数"></p><h3 id="5-计算含参变量的极限"><a href="#5-计算含参变量的极限" class="headerlink" title="5. 计算含参变量的极限"></a>5. 计算含参变量的极限</h3><p>（1）认清谁是参数，谁是变量</p><p>（2）有时要对参数进行讨论（有“含参变量”的题，基本都要讨论）</p><h3 id="6-求数列的n项和的极限-lim-n个数之和"><a href="#6-求数列的n项和的极限-lim-n个数之和" class="headerlink" title="6. 求数列的n项和的极限 lim(n个数之和)"></a>6. 求数列的n项和的极限 lim(n个数之和)</h3><p>（1） 裂项相消</p><p>（2） 夹逼定理</p><p>（3） 无穷级数求和的方法</p><p>（4） 定积分的定义</p><p>（5） 先用（放大缩小的）夹逼定理之后，再用定积分定义</p><h3 id="7-已知一个极限求另一个极限"><a href="#7-已知一个极限求另一个极限" class="headerlink" title="7. 已知一个极限求另一个极限"></a>7. 已知一个极限求另一个极限</h3><p>（1）特例法（或叫特殊值法），适合选择题</p><p>（2）联系“已知”求“未知”：凑！把未知的式子凑成已知的式子</p><h3 id="8-无穷小量比阶或求阶数-的题型"><a href="#8-无穷小量比阶或求阶数-的题型" class="headerlink" title="8. 无穷小量比阶或求阶数 的题型"></a>8. 无穷小量比阶或求阶数 的题型</h3><p>（1）已知A是B的高（低）阶无穷小，求其中的待定系数或阶数</p><p>（2）三个无穷小量比阶：对无穷小量进行恒等变形→直至能够看出&#x2F;分析出他们是x的几阶无穷小</p><p>（3）比较无穷大量的大小</p>]]></content>
      
      
      <categories>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高等数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多元函数微分学</title>
      <link href="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/"/>
      <url>/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/</url>
      
        <content type="html"><![CDATA[<h1 id="多元函数微分学"><a href="#多元函数微分学" class="headerlink" title="多元函数微分学"></a>多元函数微分学</h1><h2 id="二元函数的极限运算与连续性"><a href="#二元函数的极限运算与连续性" class="headerlink" title="二元函数的极限运算与连续性"></a>二元函数的极限运算与连续性</h2><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E4%BA%8C%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89.jpg" alt="二元函数的定义"></p><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E6%9E%81%E9%99%90%E5%AE%9A%E4%B9%891.jpg" alt="多元函数的极限定义1"></p><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E6%9E%81%E9%99%90%E5%AE%9A%E4%B9%892.jpg" alt="多元函数的极限定义2"></p><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%80%A7.jpg" alt="多元函数的连续性"></p><ol><li><p>法一：使用一元函数的计算方法计算极限</p><ol><li><p>一元函数中使用的等价无穷小，泰勒展开对于二元函数求极限仍然是行之有效的，也常常可以通过变量替换将二元函数极限化为一元函数极限来处理</p><p>注1：等价的东西不能等于0，偶尔等于也不行</p><p>注2：恒为零的东西也是不能等价的</p><p>有时很有可能要分情况讨论</p></li></ol></li><li><p>法二：利用放缩极限（常用）</p><p>记住3组不等式<br>$$<br>\frac{x^2}{x^2+y^2} \le 1、\frac{y^2}{x^2+y^2} \le 1\<br>\frac{\left | x \right | }{\left | x \right | + \left | y \right |} \le 1、\frac{\left | y \right | }{\left | x \right | + \left | y \right |} \le 1\<br>\frac{\left | x \right |}{\sqrt{x^2+y^2}} \le 1、 \frac{\left | y \right |}{\sqrt{x^2+y^2}} \le 1<br>$$<br>其他更多的不等式就要靠自己积累</p><p>另：（利用上面的不等式）放缩思想在处理多元函数可微性时有很大的作用</p></li><li><p>分子分母都是无穷小</p><ol><li>法三：（且使用等价后）分母的最低次数高于分子的最低次数则极限必定不存在</li><li>法四：（且使用等价后）分子分母最低次数相同，则可设y&#x3D;k(x-x0)+y0 去判别，<strong>一般情况下</strong>，y&#x3D;kx，或者y&#x3D;-kx就可以了。<ol><li>其实这种情况下极限一般都是不存在的</li><li>若算出极限结果与k无关，则只能说明这个方法失效，要另寻他法</li><li>算出极限结果与k有关，则极限不存在</li></ol></li><li>法五：（且使用等价后）分子的最低次数高于分母的最低次数，极限可能存在也可能不存在，若极限存在，则极限必定为0</li></ol></li></ol><h2 id="二元函数偏导数"><a href="#二元函数偏导数" class="headerlink" title="二元函数偏导数"></a>二元函数偏导数</h2><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E5%81%8F%E5%AF%BC%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%891.JPG" alt="偏导数的定义1"></p><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E5%81%8F%E5%AF%BC%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%892.jpg" alt="偏导数的定义2"></p><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E5%8F%AF%E5%BE%AE%E4%B8%8E%E5%85%A8%E5%BE%AE%E5%88%861.jpg" alt="可微与全微分1"></p><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E5%85%B3%E7%B3%BB.jpg" alt="关系"></p><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E6%AC%A1%E5%BA%8F%E6%97%A0%E5%85%B3.jpg" alt="次序无关"></p><h3 id="题型一：要求计算某一点处的偏导数"><a href="#题型一：要求计算某一点处的偏导数" class="headerlink" title="题型一：要求计算某一点处的偏导数"></a>题型一：要求计算某一点处的偏导数</h3><p><strong>法一：使用定义法，一般来说都更加方便！定义真的很好用</strong></p><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E5%81%8F%E5%AF%BC%E6%95%B0%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9.jpg" alt="偏导数的知识点"></p><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E5%81%8F%E5%AF%BC%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89.JPG" alt="偏导数的定义"></p><p>法二：<img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E5%81%8F%E5%AF%BC%E6%95%B0%E7%9A%84%E6%B1%82%E6%B3%95.JPG" alt="偏导数的求法"></p><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E9%AB%98%E9%98%B6%E5%81%8F%E5%AF%BC%E6%95%B0.JPG" alt="高阶偏导数"></p><p>【注1】二元函数的“连续性”和“偏导性（可导性）”是独立的，且f关于x是否可偏导与f关于y是否可偏导也是独立的</p><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E8%BF%9E%E7%BB%AD%EF%BC%8C%E5%8F%AF%E5%81%8F%E5%AF%BC%EF%BC%8C%E5%8F%AF%E5%BE%AE%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.JPG" alt="多元函数连续，可偏导，可微之间的关系"></p><p>【注2】<img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E6%B7%B7%E5%90%88%E5%81%8F%E5%AF%BC%E6%95%B0%E7%9B%B8%E7%AD%89%E6%9D%A1%E4%BB%B6.JPG" alt="混合偏导数相等条件"></p><h3 id="题型二：利用偏导数的条件求原函数表达式"><a href="#题型二：利用偏导数的条件求原函数表达式" class="headerlink" title="题型二：利用偏导数的条件求原函数表达式"></a>题型二：利用偏导数的条件求原函数表达式</h3><p>看作一元函数的不定积分（固定套路）（要注意“常数项C”应是g(x)或φ(y)），凑微分，或者柯西黎曼条件，拼微分。</p><h3 id="题型三：复合型的多元函数求偏导"><a href="#题型三：复合型的多元函数求偏导" class="headerlink" title="题型三：复合型的多元函数求偏导"></a>题型三：复合型的多元函数求偏导</h3><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E5%A4%8D%E5%90%88%E5%9E%8B%E7%9A%84%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E6%B1%82%E5%81%8F%E5%AF%BC.JPG" alt="复合型的多元函数求偏导"></p><ol start="6"><li><p><strong>使用微分形式的不变性。</strong>这个方法十分简单，但是有些题目不能用。</p><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E5%BE%AE%E5%88%86%E6%B3%95.jpg" alt="微分法"></p></li></ol><h3 id="题型四：变量替换之后的偏导数计算"><a href="#题型四：变量替换之后的偏导数计算" class="headerlink" title="题型四：变量替换之后的偏导数计算"></a>题型四：变量替换之后的偏导数计算</h3><ol><li>变换方程是核心→决定我们选取的中间量（中间变量有时可以反解出来（不是每道题都能反解的，并不推荐））</li><li>题目原本给出的方程→等式条件</li><li>方程需要什么偏导数就去求什么偏导数</li></ol><h3 id="题型五：隐函数求导与求偏导"><a href="#题型五：隐函数求导与求偏导" class="headerlink" title="题型五：隐函数求导与求偏导"></a>题型五：隐函数求导与求偏导</h3><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E9%9A%90%E5%87%BD%E6%95%B0%E6%B1%82%E5%AF%BC.jpg" alt="隐函数求导"></p><ol><li><p>法一：左右两边直接求偏导</p></li><li><p>法二：用求导公式（虽不推荐该方法，但有时该方法计算量与法一相比较小）</p><ol><li>【注意】求导公式中的x、y、z 是同等地位的自变量（不能把z 看成是x、y 的函数）</li></ol></li></ol><h3 id="题型六：对于方程组的形式求偏导数"><a href="#题型六：对于方程组的形式求偏导数" class="headerlink" title="题型六：对于方程组的形式求偏导数"></a>题型六：对于方程组的形式求偏导数</h3><p>最重要的是使用克莱姆法则。使用行列式进行计算，不要使用公式，要抛弃雅可比行列式的计算方法。</p><h2 id="二元函数可微性与全微分"><a href="#二元函数可微性与全微分" class="headerlink" title="二元函数可微性与全微分"></a>二元函数可微性与全微分</h2><h3 id="概念定理"><a href="#概念定理" class="headerlink" title="概念定理"></a>概念定理</h3><h4 id="二元函数的连续性"><a href="#二元函数的连续性" class="headerlink" title="二元函数的连续性"></a>二元函数的连续性</h4><ol><li>和一元函数一样的，极限值等于函数值</li><li>只要是二元初等函数，在其定义域内，都是连续的。</li></ol><h4 id="偏导数的定义"><a href="#偏导数的定义" class="headerlink" title="偏导数的定义"></a>偏导数的定义</h4><p>$$<br>对x的偏导数:f_x(x_0,y_0) &#x3D; \lim_{\bigtriangleup x \to 0} \frac{f(x_0+\bigtriangleup x,y_0)-f(x_0,y_0)}{\bigtriangleup x}\\<br>对y的偏导数:f_y(x_0,y_0) &#x3D; \lim_{\bigtriangleup y \to 0} \frac{f(x_0,y_0+\bigtriangleup y)-f(x_0,y_0)}{\bigtriangleup y}\<br>$$</p><h4 id="偏导数的计算"><a href="#偏导数的计算" class="headerlink" title="偏导数的计算"></a>偏导数的计算</h4><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E5%81%8F%E5%AF%BC%E6%95%B0%E7%9A%84%E8%AE%A1%E7%AE%97.jpg" alt="偏导数的计算"></p><h4 id="可微的概念"><a href="#可微的概念" class="headerlink" title="可微的概念"></a>可微的概念</h4><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E5%8F%AF%E5%BE%AE%E7%9A%84%E6%A6%82%E5%BF%B5.JPG" alt="可微的概念"></p><h4 id="全微分的概念"><a href="#全微分的概念" class="headerlink" title="全微分的概念"></a>全微分的概念</h4><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E5%85%A8%E5%BE%AE%E5%88%86%E7%9A%84%E5%AE%9A%E4%B9%89.JPG" alt="全微分的定义"></p><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E5%85%A8%E5%BE%AE%E5%88%86%E7%9A%84%E5%BF%85%E8%A6%81%E6%9D%A1%E4%BB%B6.JPG" alt="全微分的必要条件"></p><h4 id="【重要】偏导数连续、函数可微、函数可偏导、函数连续之间的关系"><a href="#【重要】偏导数连续、函数可微、函数可偏导、函数连续之间的关系" class="headerlink" title="【重要】偏导数连续、函数可微、函数可偏导、函数连续之间的关系"></a>【重要】偏导数连续、函数可微、函数可偏导、函数连续之间的关系</h4><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E5%85%B3%E7%B3%BB.jpg" alt="关系"></p><h4 id="混合偏导"><a href="#混合偏导" class="headerlink" title="混合偏导"></a>混合偏导</h4><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E6%B7%B7%E5%90%88%E5%81%8F%E5%AF%BC.jpg" alt="混合偏导"></p><h3 id="题型一：函数可微性的判别"><a href="#题型一：函数可微性的判别" class="headerlink" title="题型一：函数可微性的判别"></a>题型一：函数可微性的判别</h3><ol><li><p>若题目的条件就是一个极限式子（最常用）</p><ol><li><p>凑定义式判断</p><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E5%87%BD%E6%95%B0%E5%8F%AF%E5%BE%AE%E6%80%A7%E5%88%A4%E6%96%AD1.jpg" alt="函数可微性判断1"></p><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E5%87%BD%E6%95%B0%E5%8F%AF%E5%BE%AE%E6%80%A7%E5%88%A4%E6%96%AD2.jpg" alt="函数可微性判断2"></p></li><li><p>若题目的条件是具体函数</p><p>2.1 先查看函数的连续性与可偏导性，如果不连续或者不可偏导则不可微（必要条件）</p><p>2.2 如果连续且可偏导就先求这个点的偏导数，如果偏导数连续则一定可微（充分条件）</p><p>2.3 如果偏导数不明确是不是连续，就去构造可微定义式，然后判断定义式是否极限为 0，若为 0 则可微（充要条件）</p><p>总结：先看函数连续性、可偏导性→再看该点的偏导数→最后再构造微分定义式，看是否等于0</p><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/1.JPG" alt="1"></p><p>【注】函数连续、函数可偏导，是函数可微的必要条件</p></li></ol></li></ol><h3 id="题型二：全微分方程"><a href="#题型二：全微分方程" class="headerlink" title="题型二：全微分方程"></a>题型二：全微分方程</h3><p>“先积分再求导”</p><h2 id="多元函数的极值与最值问题"><a href="#多元函数的极值与最值问题" class="headerlink" title="多元函数的极值与最值问题"></a>多元函数的极值与最值问题</h2><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E6%9E%81%E5%80%BC1.jpg" alt="多元函数极值1"></p><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E6%9E%81%E5%80%BC2.jpg" alt="多元函数极值2"></p><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E6%9C%80%E5%80%BC1.jpg" alt="多元函数最值1"></p><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E6%9C%80%E5%80%BC2.jpg" alt="多元函数最值2"></p><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E6%9C%80%E5%80%BC3.jpg" alt="多元函数最值3"></p><h3 id="无条件极值"><a href="#无条件极值" class="headerlink" title="无条件极值"></a>无条件极值</h3><h4 id="题型一：可求一阶、二阶偏导的函数"><a href="#题型一：可求一阶、二阶偏导的函数" class="headerlink" title="题型一：可求一阶、二阶偏导的函数"></a>题型一：可求一阶、二阶偏导的函数</h4><ol><li><p>黑塞矩阵极值判别法（即偏导数极值判别法）</p></li><li><p>对于有界闭区间（开区间），要注意最值是在区域内取得还是在边界取得</p></li><li><p>问f(x) 在某一点是否取的极值</p><ol><li><p>法一：黑塞矩阵极值判别法（通用）</p><p>【注】若判别法失效（即AC-B^2&#x3D;0），则转而考察该点附近区域的黑塞矩阵的值ACB^2，只要在该点去心邻域内有小于0的点存在，则该点一定不是极值</p></li><li><p>法二：构造特定的路径判别不取得极值（如何去构造这个路径，要看所给的具体的函数的特点）（一定技巧性）</p></li></ol></li><li><p>补充<br>$$<br>点(x_0,y_0)到直线Ax+By+C&#x3D;0的距离为d&#x3D;\frac{\left| Ax_0+by_0+C \right|}{\sqrt{A^2+B^2}}\\<br>(a+b+c)^2&#x3D;a^2+b^2+c^2+2ab+2bc+2ac<br>$$</p></li></ol><h4 id="题型二：可转化为一元函数的极值问题"><a href="#题型二：可转化为一元函数的极值问题" class="headerlink" title="题型二：可转化为一元函数的极值问题"></a>题型二：可转化为一元函数的极值问题</h4><p>（1） 替换法（太简单了）</p><p>（2） 放缩法</p><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E6%94%BE%E7%BC%A9%E6%B3%95.JPG" alt="放缩法"></p><h4 id="题型三：抽象函数的极值判别法"><a href="#题型三：抽象函数的极值判别法" class="headerlink" title="题型三：抽象函数的极值判别法"></a>题型三：抽象函数的极值判别法</h4><p>（1） 保号性</p><p>（2） 脱帽法 ——&gt;就是“脱掉”极限符号“lim”</p><p>（3） 只要能求一阶、二阶偏导，就可以用判别法，即使是抽象函数也一样</p><h3 id="有条件极值"><a href="#有条件极值" class="headerlink" title="有条件极值"></a>有条件极值</h3><ol><li><p>基本方法：拉格朗日乘数法（该方法关键在于目标函数和限制条件的确定）[是边界上的问题，不是域的问题]</p><ol><li><p>确定目标函数和限制条件</p><p>【注】限制条件一般不能轻易改变，但目标函数的构造以简单为原则</p></li><li><p>构造拉格朗日乘子</p></li><li><p>求偏导构造方程组</p></li><li><p>解方程组，得到多个“可疑”驻点</p></li><li><p>比较这些驻点的大小得到最值</p></li></ol></li><li><p>解方程组的3个方法</p><p><img src="/2022/04/09/bi-ji/shu-xue/duo-yuan-wei-fen-xue/duo-yuan-han-shu-wei-fen-xue/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%95%B0%E4%B9%98%E6%B3%95%E8%A7%A3%E6%96%B9%E7%A8%8B%E7%BB%84%E7%9A%84%E4%B8%89%E4%B8%AA%E6%96%B9%E6%B3%95.JPG" alt="拉格朗日数乘法解方程组的三个方法"></p></li><li><p>利用基本不等式直接解多元函数极值问题</p><ol><li>选取哪一个不等式，取决于目标函数和限制条件的具体形式<br>$$<br>均值不等式:设x_1,x_2,\cdots,x_n均非负，那么\frac{x_1+x_2+x_3+\cdots+x_n}{n}\ge\sqrt[n]{x_1\cdot x_2\cdot x_3\cdots x_n}\\<br>柯西施瓦兹不等式:\\设x_1,x_2,\cdots,x_n和y_1,y_2,\cdots,y_n均非负,那么\\(x_1+x_2+\cdots+x_n)\cdot(y_1+y_2+\cdots+y_n)\ge(\sqrt{x_1y_1}+\sqrt{x_2y_2}+\cdots+\sqrt{x_ny_n})^2\\其中等号在x_1,x_2,x_3,\cdots,x_n和y_1,y_2,y_3,\cdots,y_n对应成比例时取得<br>$$</li></ol></li><li><p>利用约束条件化多元函数为一元函数</p><ol><li>简单，略</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高等数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微分方程</title>
      <link href="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/"/>
      <url>/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="微分方程"><a href="#微分方程" class="headerlink" title="微分方程"></a>微分方程</h1><h2 id="一、标准题型"><a href="#一、标准题型" class="headerlink" title="一、标准题型"></a>一、标准题型</h2><h3 id="1-一阶微分方程"><a href="#1-一阶微分方程" class="headerlink" title="1.一阶微分方程"></a>1.一阶微分方程</h3><h4 id="1-可分离变量的微分方程"><a href="#1-可分离变量的微分方程" class="headerlink" title="1.可分离变量的微分方程"></a>1.可分离变量的微分方程</h4><p>形式：形如<br>$$<br>y’&#x3D;f(x,y)或者写成P(x,y)dx+Q(x,y)dy&#x3D;0<br>$$<br>解法：两边同时求不定积分（只需要在一边加上任意常数C）</p><h4 id="2-齐次微分方程"><a href="#2-齐次微分方程" class="headerlink" title="2.齐次微分方程"></a>2.齐次微分方程</h4><p>形式：形如<br>$$<br>\frac{dy}{dx} &#x3D; f(\frac{y}{x})<br>$$<br>寓意为x与y的“幂次”相同</p><p>解法：</p><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E5%85%B6%E6%AC%A1%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B.jpg" alt="其次微分方程"></p><h4 id="3-一阶线性齐次微分方程"><a href="#3-一阶线性齐次微分方程" class="headerlink" title="3.一阶线性齐次微分方程"></a>3.一阶线性齐次微分方程</h4><p>形式：<br>$$<br>y’+P(x)y&#x3D;0的微分方程<br>$$<br>注1：此处的“线性”，指的是待求函数y(x)及其导数的幂次均为 1</p><p>注2：此处的“齐次”，指的是等号右边的自由项为 0</p><p>解法：通解为<br>$$<br>y&#x3D;Ce^{-\int P(x)dx}<br>$$<br>注1：<img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E4%B8%80%E9%98%B6%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%B3%A81.jpg" alt="一阶线性微分方程注1"></p><p>注2：通解≠全部解，有的通解经常会漏掉某些个别解，但这并不妨碍通解的正确性，因为他满足通解的定义</p><p>注3：通解的定义核心：&lt;—&gt;独立任意常数的个数等于微分方程的阶数</p><h4 id="4-一阶线性非齐次微分方程"><a href="#4-一阶线性非齐次微分方程" class="headerlink" title="4.一阶线性非齐次微分方程"></a>4.一阶线性非齐次微分方程</h4><p>形式：<br>$$<br>形如y’+p(x)y&#x3D;Q(x)<br>$$<br>解法：<br>$$<br>通解为y&#x3D;e^{-P(x)dx}\left[ \int Q(x)e^{\int P(x)dx}dx+C \right ]<br>$$<br>注1：<img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E4%B8%80%E9%98%B6%E7%BA%BF%E6%80%A7%E9%9D%9E%E9%BD%90%E6%AC%A1%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E6%B3%A81.jpg" alt="一阶线性非齐次微分方程注1"></p><p>注2：解微分方程的题目中，只有一个地方是可以直接把绝对值去掉的，就是<code>注1</code>那个地方</p><p>注3：<img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E4%B8%80%E9%98%B6%E9%9D%9E%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E7%9A%84%E5%85%B6%E4%BB%96%E5%BD%A2%E5%BC%8F.jpg" alt="一阶非齐次线性微分方程的其他形式"></p><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E4%B8%80%E9%98%B6%E9%9D%9E%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E7%9A%84%E5%85%B6%E4%BB%96%E5%BD%A2%E5%BC%8F%E9%A2%98%E7%9B%AE.jpg" alt="一阶非齐次线性微分方程的其他形式题目"></p><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E4%B8%80%E9%98%B6%E9%9D%9E%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E7%9A%84%E5%85%B6%E4%BB%96%E5%BD%A2%E5%BC%8F%E7%AD%94%E6%A1%88.jpg" alt="一阶非齐次线性微分方程的其他形式答案"></p><h4 id="5-伯努利方程"><a href="#5-伯努利方程" class="headerlink" title="5.伯努利方程"></a>5.伯努利方程</h4><p>形式：<br>$$<br>形如:y’+P(x)y&#x3D;Q(x)y^n,注n\neq0,1<br>$$<br>解法：<img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E4%BC%AF%E5%8A%AA%E5%88%A9%E6%96%B9%E7%A8%8B.JPG" alt="伯努利方程"></p><h3 id="2-可降阶的高阶微分方程"><a href="#2-可降阶的高阶微分方程" class="headerlink" title="2.可降阶的高阶微分方程"></a>2.可降阶的高阶微分方程</h3><p>整体的思想</p><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E5%8F%AF%E9%99%8D%E9%98%B6%E7%9A%84%E9%AB%98%E9%98%B6%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B.jpg" alt="可降阶的高阶微分方程"></p><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E5%8F%AF%E9%99%8D%E9%98%B6%E7%9A%84%E9%AB%98%E9%98%B6%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E7%B1%BB%E5%9E%8B.jpg" alt="可降阶的高阶微分方程类型"></p><h3 id="3-二阶常系数齐次线性微分方程"><a href="#3-二阶常系数齐次线性微分方程" class="headerlink" title="3.二阶常系数齐次线性微分方程"></a>3.二阶常系数齐次线性微分方程</h3><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E4%BA%8C%E9%98%B6%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B.JPG" alt="二阶常系数齐次线性微分方程"></p><h3 id="4-二阶常系数非齐次线性微分方程"><a href="#4-二阶常系数非齐次线性微分方程" class="headerlink" title="4.二阶常系数非齐次线性微分方程"></a>4.二阶常系数非齐次线性微分方程</h3><h3 id="5-n阶常系数齐次线性微分方程"><a href="#5-n阶常系数齐次线性微分方程" class="headerlink" title="5.n阶常系数齐次线性微分方程"></a>5.n阶常系数齐次线性微分方程</h3><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/n%E9%98%B6%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B.JPG" alt="n阶常系数齐次线性微分方程"></p><h3 id="6-线性微分方程解的结构与性质"><a href="#6-线性微分方程解的结构与性质" class="headerlink" title="6.线性微分方程解的结构与性质"></a>6.线性微分方程解的结构与性质</h3><ol><li><p>齐的解的线性组合，仍是齐的解</p></li><li><p>齐的解+非齐的解&#x3D;非齐的解</p></li><li><p>非齐的解-非齐的解&#x3D;齐的解</p></li><li><p>非齐的解的线性组合，组合系数之和&#x3D;1，则为非齐的解</p></li><li><p>非齐的解的线性组合，组合系数之和&#x3D;0，则为齐的解</p></li><li><p>n阶齐次 的n个线性无关的解，则</p></li><li><p>非齐通＝齐通+非齐特</p></li><li><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E5%8F%A0%E5%8A%A0%E5%8E%9F%E7%90%86.jpg" alt="叠加原理"></p><p>（其实线性代数的方程组也有叠加原理）</p></li></ol><h2 id="二、灵活题型"><a href="#二、灵活题型" class="headerlink" title="二、灵活题型"></a>二、灵活题型</h2><h3 id="题型（一）非特定类型的微分方程求解"><a href="#题型（一）非特定类型的微分方程求解" class="headerlink" title="题型（一）非特定类型的微分方程求解"></a>题型（一）非特定类型的微分方程求解</h3><p>其实就是对所给的方程进行变形，把他化为我们熟悉的方程</p><h4 id="利用换元法"><a href="#利用换元法" class="headerlink" title="利用换元法"></a>利用换元法</h4><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E5%88%A9%E7%94%A8%E6%8D%A2%E5%85%83%E6%B3%951.jpg" alt="利用换元法1"></p><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E6%95%B4%E4%BD%93%E6%8D%A2%E5%85%83%E6%B3%95.JPG" alt="整体换元法"></p><h4 id="颠倒自变量与因变量的关系"><a href="#颠倒自变量与因变量的关系" class="headerlink" title="颠倒自变量与因变量的关系"></a>颠倒自变量与因变量的关系</h4><p>“头轻脚重”的函数，非常适合取倒数</p><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E5%A4%B4%E8%BD%BB%E8%84%9A%E9%87%8D%E9%A2%98%E7%9B%AE.jpg" alt="头轻脚重题目"></p><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E5%A4%B4%E8%BD%BB%E8%84%9A%E9%87%8D%E7%AD%94%E6%A1%88.jpg" alt="头轻脚重答案"></p><p>含有出题思路的一道题：<img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E9%A2%A0%E5%80%92%E8%87%AA%E5%8F%98%E9%87%8F%E4%B8%8E%E5%9B%A0%E5%8F%98%E9%87%8F%E7%9A%84%E5%85%B3%E7%B3%BB%E9%A2%98%E7%9B%AE.jpg" alt="颠倒自变量与因变量的关系题目"></p><p>原理：</p><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E9%A2%A0%E5%80%92%E8%87%AA%E5%8F%98%E9%87%8F%E4%B8%8E%E5%9B%A0%E5%8F%98%E9%87%8F%E7%9A%84%E5%85%B3%E7%B3%BB%E5%8E%9F%E7%90%86.jpg" alt="颠倒自变量与因变量的关系原理"></p><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E4%BE%8B%E9%A2%981.jpg" alt="例题1"></p><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E8%A7%A31.jpg" alt="解1"></p><h4 id="利用消元法"><a href="#利用消元法" class="headerlink" title="利用消元法"></a>利用消元法</h4><p>适用题型：只要f()和f’()括号内的自变量不一致，且他们的差异是一个常数（和或差 是一个常数），就可以用消元法</p><p>注：这种题目都会有一些隐含条件，令x等于一些特殊值，如x&#x3D;0等，就可以解出C1、C2</p><p>步骤：求导→替换→抵消，消去括号内自变量异常的f()，只留f(x)，得到一个正常的微分方程</p><h4 id="合理分配，实现降阶"><a href="#合理分配，实现降阶" class="headerlink" title="合理分配，实现降阶"></a>合理分配，实现降阶</h4><p>对于二阶常系数非齐次线性微分方程而言，若自由项f(x)并非上面的两种特定类型，可以巧妙的利用“合理分配”的思想，将微分方程进行降阶，转化为一个新的“一阶线性非齐次微分方程”进行求解.</p><p>正确合理分配的万能方法：<img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E4%B8%87%E8%83%BD%E6%96%B9%E6%B3%95.jpg" alt="万能方法"></p><p>若二阶常系数非齐次线性微分方程的自由项是三角函数的平方——&gt;对自由项用三角函数的降幂公式即可</p><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E4%BE%8B%E9%A2%982.JPG" alt="例题2"></p><h3 id="题型（二）自由项为分段函数的微分方程"><a href="#题型（二）自由项为分段函数的微分方程" class="headerlink" title="题型（二）自由项为分段函数的微分方程"></a>题型（二）自由项为分段函数的微分方程</h3><p>分两步</p><ol><li>先分段，分别计算出不同区间上的原函数&#x2F;微分方程的解</li><li>利用①连续性和②可导性，求出不同任意常数之间的约束关系</li></ol><p>例题：<img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E8%87%AA%E7%94%B1%E9%A1%B9%E4%B8%BA%E5%88%86%E6%AE%B5%E5%87%BD%E6%95%B0%E7%9A%84%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E4%BE%8B%E9%A2%98.jpg" alt="自由项为分段函数的微分方程例题"></p><h3 id="题型（三）由参数方程给出的微分方程组"><a href="#题型（三）由参数方程给出的微分方程组" class="headerlink" title="题型（三）由参数方程给出的微分方程组"></a>题型（三）由参数方程给出的微分方程组</h3><p>使用克莱姆法则加微分算子。求解</p><h3 id="题型（四）线性微分方程的解的结构（选择题重要考点）"><a href="#题型（四）线性微分方程的解的结构（选择题重要考点）" class="headerlink" title="题型（四）线性微分方程的解的结构（选择题重要考点）"></a>题型（四）线性微分方程的解的结构（选择题重要考点）</h3><p>按照标准型方程的公式来就行</p><h3 id="题型（五）已知通解反求微分方程（选填题经常考）"><a href="#题型（五）已知通解反求微分方程（选填题经常考）" class="headerlink" title="题型（五）已知通解反求微分方程（选填题经常考）"></a>题型（五）已知通解反求微分方程（选填题经常考）</h3><ol><li><p>非标准型方程</p><ol><li><p>思路：去掉方程中的任意常数C</p></li><li><p>方法：将通解化为C&#x3D;g(x,y)的形式，两边求导以去掉任意常数C，即可</p><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E9%9D%9E%E6%A0%87%E5%87%86%E5%9E%8B%E6%96%B9%E7%A8%8B.JPG" alt="非标准型方程"></p></li></ol></li><li><p>标准型方程</p><p>略</p></li></ol><h3 id="题型（六）研究抽象微分方程的解的性质（周期性、有界性等）"><a href="#题型（六）研究抽象微分方程的解的性质（周期性、有界性等）" class="headerlink" title="题型（六）研究抽象微分方程的解的性质（周期性、有界性等）"></a>题型（六）研究抽象微分方程的解的性质（周期性、有界性等）</h3><h3 id="题型（七）二阶变系数线性微分方程的求解"><a href="#题型（七）二阶变系数线性微分方程的求解" class="headerlink" title="题型（七）二阶变系数线性微分方程的求解"></a>题型（七）二阶变系数线性微分方程的求解</h3><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E4%BA%8C%E9%98%B6%E5%8F%98%E7%B3%BB%E6%95%B0%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%E7%9A%84%E6%B1%82%E8%A7%A3.JPG" alt="二阶变系数线性微分方程的求解"></p><h3 id="题型（八）对x取定值，转而研究常数a的题"><a href="#题型（八）对x取定值，转而研究常数a的题" class="headerlink" title="题型（八）对x取定值，转而研究常数a的题"></a>题型（八）对x取定值，转而研究常数a的题</h3><p>题目特点：<img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E5%AF%B9x%E5%8F%96%E5%AE%9A%E5%80%BC%EF%BC%8C%E8%BD%AC%E8%80%8C%E7%A0%94%E7%A9%B6%E5%B8%B8%E6%95%B0a%E7%9A%84%E9%A2%98%E7%89%B9%E7%82%B9.jpg" alt="对x取定值，转而研究常数a的题特点"></p><p>解题方法：如果研究x时解题困难，可以考虑对x取一个定值（如x&#x3D;0），转而研究常数a。因为题目说了“对于任意的常数a，该式子均成立”，故a可以看做是一个变量来研究</p><p>例题：<img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E5%AF%B9x%E5%8F%96%E5%AE%9A%E5%80%BC%EF%BC%8C%E8%BD%AC%E8%80%8C%E7%A0%94%E7%A9%B6%E5%B8%B8%E6%95%B0a%E7%9A%84%E9%A2%98%E9%A2%98%E7%9B%AE.jpg" alt="对x取定值，转而研究常数a的题题目"></p><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E5%AF%B9x%E5%8F%96%E5%AE%9A%E5%80%BC%EF%BC%8C%E8%BD%AC%E8%80%8C%E7%A0%94%E7%A9%B6%E5%B8%B8%E6%95%B0a%E7%9A%84%E9%A2%98%E7%AD%94%E6%A1%88.jpg" alt="对x取定值，转而研究常数a的题答案"></p><h3 id="题型（九）微分方程的跨章节综合题"><a href="#题型（九）微分方程的跨章节综合题" class="headerlink" title="题型（九）微分方程的跨章节综合题"></a>题型（九）微分方程的跨章节综合题</h3><h4 id="与极限相结合"><a href="#与极限相结合" class="headerlink" title="与极限相结合"></a>与极限相结合</h4><p>题目特点：<img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E4%B8%8E%E6%9E%81%E9%99%90%E7%9B%B8%E7%BB%93%E5%90%88%E9%A2%98%E7%9B%AE%E7%89%B9%E7%82%B9.jpg" alt="与极限相结合题目特点"></p><p>解题方法：</p><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E4%B8%8E%E6%9E%81%E9%99%90%E7%9B%B8%E7%BB%93%E5%90%88%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.jpg" alt="与极限相结合解决方法"></p><p>例题：</p><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E4%B8%8E%E6%9E%81%E9%99%90%E7%9B%B8%E7%BB%93%E5%90%88%E4%BE%8B%E9%A2%98.jpg" alt="与极限相结合例题"></p><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E4%B8%8E%E6%9E%81%E9%99%90%E7%9B%B8%E7%BB%93%E5%90%88%E4%BE%8B%E9%A2%98%E7%AD%94%E6%A1%88.jpg" alt="与极限相结合例题答案"></p><h4 id="与变限积分相结合"><a href="#与变限积分相结合" class="headerlink" title="与变限积分相结合"></a>与变限积分相结合</h4><p>思路就是：求导，得到关系等式，根据关系等式解题</p><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E4%B8%8E%E5%8F%98%E9%99%90%E7%A7%AF%E5%88%86%E7%9B%B8%E7%BB%93%E5%90%88%E9%A2%98%E7%9B%AE.JPG" alt="与变限积分相结合题目"></p><p>注：这种题都会含有隐藏的初始条件（而且通常都是会有两个或两个以上的隐藏初始条件）</p><h4 id="与导数-x2F-积分的几何应用结合"><a href="#与导数-x2F-积分的几何应用结合" class="headerlink" title="与导数&#x2F;积分的几何应用结合"></a>与导数&#x2F;积分的几何应用结合</h4><p>就是根据题目把微分方程构造出来，求微分方程就可以了</p><h4 id="与导数定义结合"><a href="#与导数定义结合" class="headerlink" title="与导数定义结合"></a>与导数定义结合</h4><p>题目特点：给了一个关于f(x)的等式，又给了某一点的导数值，要求f(x)的表达式</p><p>例题<img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E4%B8%8E%E5%AF%BC%E6%95%B0%E5%AE%9A%E4%B9%89%E7%BB%93%E5%90%88%E9%A2%98%E7%9B%AE.JPG" alt="与导数定义结合题目"></p><p>方法：直接写导数的定义式就能求出</p><p>注：有些题也可以先变形、代换之后，再用导数定义（当然，不代换直接写导数定义一样能做出来）</p><h3 id="一些补充"><a href="#一些补充" class="headerlink" title="一些补充"></a>一些补充</h3><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E4%B8%80%E4%BA%9B%E8%A1%A5%E5%85%851.JPG" alt="一些补充1"></p><p>（8）注意，“任意常数C”，有时也会有限制</p><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E4%B8%80%E4%BA%9B%E8%A1%A5%E5%85%85C%E7%9A%84%E9%99%90%E5%88%B6%E6%A0%87%E5%87%86.jpg" alt="一些补充C的限制标准"></p><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E4%B8%80%E4%BA%9B%E8%A1%A5%E5%85%85C%E7%9A%84%E9%99%90%E5%88%B6%E4%BE%8B%E9%A2%98.jpg" alt="一些补充C的限制例题"></p><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E4%B8%80%E4%BA%9B%E8%A1%A5%E5%85%85C%E7%9A%84%E9%99%90%E5%88%B6%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%B3%95.jpg" alt="一些补充C的限制题目解法"></p><p>（9）对于微分方程</p><ol><li>不同的初始条件对应不同的特解；</li><li>反过来，不同的特解不能同时满足同一个（组）初始条件.</li></ol><p>（10）加强记忆：</p><p><img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E5%8A%A0%E5%BC%BA%E8%AE%B0%E5%BF%86.jpg" alt="加强记忆"></p><p>（11）即使题目给的通解中出现C1,C2,C3，也不一定表示这是三个独立的任意常数。因为，如果题目还附加了约束条件，则这三个数只能代表是2个甚至1个任意常数</p><p>（12）解微分方程时，对”C”的计算不要去省略，该怎么算怎么算，等到明显看得出结果时，再对C的式子简化。如果粗略的直接省去计算C，容易出错</p><p>（13）解微分方程自由项的方法是：将特解代入到原方程即可</p><p>（14）积累：<img src="/2022/04/09/bi-ji/shu-xue/wei-fen-fang-cheng/wei-fen-fang-cheng/%E4%B8%80%E4%BA%9B%E8%A1%A5%E5%85%85---%E7%A7%AF%E7%B4%AF.jpg" alt="一些补充---积累"></p>]]></content>
      
      
      <categories>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高等数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>别</title>
      <link href="/2022/04/09/bi-ji/shi-ge/jun-xun/jun-xun/"/>
      <url>/2022/04/09/bi-ji/shi-ge/jun-xun/jun-xun/</url>
      
        <content type="html"><![CDATA[<h1 id="别"><a href="#别" class="headerlink" title="别"></a>别</h1><p>清晨草叶上的露珠，不胜冷风的颤动</p><p>凄凉滑落，每一次颤动，道一声珍重</p><p>每一次颤动里带着无限的哀愁</p><p>那一声珍重里有着满心的祝福</p><p>每一次颤动里带着依依不舍的离愁</p><p>那一声珍重里有着甜蜜的期盼</p><hr><p>我们相遇在校园的操场小站</p><p>踩着军训跑道</p><p>在军训的日子留下一串奋斗的足迹</p><p>如今站在跑道的岔口，挥手道别</p><p>把多少离别的不舍，化作甜蜜的微笑</p><p>把多少真诚的祝福，埋藏在心灵深处</p><p>不再留恋军训的温馨，不再挽留远走的脚步</p><p>不再重演昨天的故事，不再捡拾往昔的笑语</p><p>把关心默默放在心里，把关注常常装进眼底</p><hr><p>橡胶跑道，不会再有调皮的嬉闹</p><p>匆匆离别，不会再有熟悉的背影</p><p>心的田野，长满葱茏的想念</p><p>再见，何日在相见</p><p><em><em>2019年09月</em></em></p>]]></content>
      
      
      <categories>
          
          <category> 诗歌 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗歌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>看雪</title>
      <link href="/2022/04/09/bi-ji/shi-ge/xue/xue/"/>
      <url>/2022/04/09/bi-ji/shi-ge/xue/xue/</url>
      
        <content type="html"><![CDATA[<h1 id="看雪"><a href="#看雪" class="headerlink" title="看雪"></a>看雪</h1><p>我知道，这场不期而遇的浪漫</p><p>在某个睡眼惺忪的清晨翩然而至，飘洒至今</p><p>为故乡悄悄涂抹上雪的旖旎</p><p>在万籁俱静中，我看到</p><p>它们义无反顾的奔赴人间</p><p>自己却产生了深入骨髓的印记</p><p>也许多年以后</p><p>我还会想起这个疏冷的傍晚</p><p>我亲眼目睹了来自故乡的消息</p><p>目睹了一片雪的寒冷</p><p>也目睹了它在最后的时刻，战栗不已</p><p><em><em>Me 2022年01月27日</em></em></p>]]></content>
      
      
      <categories>
          
          <category> 诗歌 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗歌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java日期类的学习</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/date-ri-qi-lei/date-ri-qi-lei/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/date-ri-qi-lei/date-ri-qi-lei/</url>
      
        <content type="html"><![CDATA[<h3 id="Date日期类"><a href="#Date日期类" class="headerlink" title="Date日期类"></a>Date日期类</h3><p>获取系统当前时间</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Date</span> nowTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>日期格式化：</p><p>Date –&gt; String</p><p>将日期Date转换为自己想要的字符串格式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss SSS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> nowTimeStr <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>String –&gt; Date</p><p>将字符串日期格式转换为Date格式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> date <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2008-08-08 08:08:08"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>获取毫秒数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> begin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取自1970年1月1日 00:00:00 000到当前系统时间的总毫秒数。</span><span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>begin <span class="token operator">-</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="SimpleDateFormat类的注意事项"><a href="#SimpleDateFormat类的注意事项" class="headerlink" title="SimpleDateFormat类的注意事项"></a>SimpleDateFormat类的注意事项</h4><p>SimpleDateFormat构造方法传的字符串中，应使用一下的字符串。</p><pre class="line-numbers language-none"><code class="language-none">yyyy 年(年是4位)MM 月（月是2位）dd 日HH 时mm 分ss 秒SSS 毫秒（毫秒3位，最高999。1000毫秒代表1秒）注意：在日期格式中，除了y M d H m s S这些字符不能随便写之外，剩下的符号格式自己随意组织。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取系统当前时间（精确到毫秒的系统当前时间）</span>        <span class="token comment">// 直接调用无参数构造方法就行。</span>        <span class="token class-name">Date</span> nowTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nowTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// java.util.Date类的toString()方法已经被重写了。</span>        <span class="token comment">// 输出的应该不是一个对象的内存地址，应该是一个日期字符串。</span>        <span class="token comment">// 将日期类型Date,按照指定的格式进行转换:Date --转换成具有一定格式的日期字符串-->String</span>        <span class="token comment">// SimpleDateFormat是java.text包下的。专门负责日期格式化的。</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss SSS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> nowTimeStr <span class="token operator">=</span> simpleDateFormat1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>nowTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nowTimeStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> time <span class="token operator">=</span> <span class="token string">"2008-08-08 08:08:08 888"</span><span class="token punctuation">;</span>        <span class="token comment">//SimpleDateFormat sdf2 = new SimpleDateFormat("格式不能随便写，要和日期字符串格式相同");</span>        <span class="token comment">// 注意：字符串的日期格式和SimpleDateFormat对象指定的日期格式要一致。不然会出现异常：java.text.ParseException</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss SSS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> simpleDateFormat2<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Fri Aug 08 08:08:08 CST 2008</span>        <span class="token comment">// 获取自1970年1月1日 00:00:00 000到当前系统时间的总毫秒数。1秒 = 1000毫秒</span>        <span class="token keyword">long</span> nowTimeMillis <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nowTimeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这个时间是什么时间？</span>        <span class="token comment">// 1970-01-01 00:00:00 001</span>        <span class="token class-name">Date</span> date3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注意：参数是一个毫秒</span>        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss SSS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> strTime <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 北京是东8区。差8个小时。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strTime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1970-01-01 08:00:00 001</span>        <span class="token comment">// 获取昨天的此时的时间。</span>        <span class="token class-name">Date</span> time2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> strTime2 <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>time2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strTime2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="System类的相关属性和方法"><a href="#System类的相关属性和方法" class="headerlink" title="System类的相关属性和方法"></a>System类的相关属性和方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out <span class="token comment">// out是System类的静态变量。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// println()方法不是System类的，是PrintStream类的方法。</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 建议启动垃圾回收器</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取自1970年1月1日到系统当前时间的总毫秒数。</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 退出JVM。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的Integer包装类</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/integer-bao-zhuang-lei/integer-bao-zhuang-lei/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/integer-bao-zhuang-lei/integer-bao-zhuang-lei/</url>
      
        <content type="html"><![CDATA[<h3 id="Integer包装类"><a href="#Integer包装类" class="headerlink" title="Integer包装类"></a>Integer包装类</h3><p>java中为8种基本数据类型又对应准备了8种包装类型。8种包装类属于引用数据类型，父类是Object。</p><p>为什么要再提供8种包装类呢？因为8种基本数据类型不够用。</p><h5 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 调用doSome()方法的时候需要传一个数字进去。</span>        <span class="token comment">// 但是数字属于基本数据类型，而doSome()方法参数的类型是Object。</span>        <span class="token comment">// 可见doSome()方法无法接收基本数据类型的数字。那怎么办呢?可以传一个数字对应的包装类进去。</span>        <span class="token comment">// 把100这个数字经过构造方法包装成对象。</span>        <span class="token class-name">MyInt</span> myInt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// doSome()方法虽然不能直接传100，但是可以传一个100对应的包装类型。</span>        <span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token function">doSome</span><span class="token punctuation">(</span>myInt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 自己写的包装类</span><span class="token keyword">class</span> <span class="token class-name">MyInt</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8种基本数据类型对应的包装类型名是什么？</p><table><thead><tr><th align="center">基本数据类型</th><th align="center">包装类型</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">java.lang.Byte（父类Number）</td></tr><tr><td align="center">short</td><td align="center">java.lang.Short（父类Number）</td></tr><tr><td align="center">int</td><td align="center">java.lang.Integer（父类Number）</td></tr><tr><td align="center">long</td><td align="center">java.lang.Long（父类Number）</td></tr><tr><td align="center">float</td><td align="center">java.lang.Float（父类Number）</td></tr><tr><td align="center">double</td><td align="center">java.lang.Double（父类Number）</td></tr><tr><td align="center">boolean</td><td align="center">java.lang.Boolean（父类Object）</td></tr><tr><td align="center">char</td><td align="center">java.lang.Character（父类Object）</td></tr></tbody></table><p>八种包装类中其中6个都是数字对应的包装类，他们的父类都是Number。</p><ol><li><p>Number是一个抽象类，无法实例化对象。</p></li><li><p>Number类中有这样的方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> <span class="token function">byteValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 以 byte 形式返回指定的数值。</span><span class="token keyword">abstract</span>  <span class="token keyword">double</span> <span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 以 double 形式返回指定的数值。</span><span class="token keyword">abstract</span>  <span class="token keyword">float</span> <span class="token function">floatValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 以 float 形式返回指定的数值。</span><span class="token keyword">abstract</span>  <span class="token keyword">int</span> <span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 以 int 形式返回指定的数值。</span><span class="token keyword">abstract</span>  <span class="token keyword">long</span> <span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 以 long 形式返回指定的数值。</span><span class="token keyword">short</span> <span class="token function">shortValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 以 short 形式返回指定的数值。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这些方法其实所有的数字包装类的子类都有，这些方法是负责拆箱的。</p></li></ol><h5 id="装箱与拆箱"><a href="#装箱与拆箱" class="headerlink" title="装箱与拆箱"></a>装箱与拆箱</h5><p>基本数据类型 -(转换为)-&gt;引用数据类型（装箱）</p><p>将引用数据类型–(转换为)-&gt; 基本数据类型（拆箱）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 100这个基本数据类型，进行构造方法的包装达到了：基本数据类型向引用数据类型的转换。</span>        <span class="token comment">// 基本数据类型 -(转换为)->引用数据类型（装箱）</span>        <span class="token class-name">Integer</span> integer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将引用数据类型--(转换为)-> 基本数据类型（拆箱）</span>        <span class="token keyword">float</span> floatNum <span class="token operator">=</span> integer<span class="token punctuation">.</span><span class="token function">floatValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>floatNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 100.0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="关于Integer类的构造方法"><a href="#关于Integer类的构造方法" class="headerlink" title="关于Integer类的构造方法"></a>关于Integer类的构造方法</h5><p>有两个：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 将数字100转换成Integer包装类型（int --> Integer）</span>        <span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将String类型的数字，转换成Integer包装类型。（String --> Integer）</span>        <span class="token class-name">Integer</span> y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="自动装箱和自动拆箱"><a href="#自动装箱和自动拆箱" class="headerlink" title="自动装箱和自动拆箱"></a>自动装箱和自动拆箱</h5><p>自动装箱：基本数据类型自动转换成包装类。</p><p>自动拆箱：包装类自动转换成基本数据类型。</p><p>有了自动拆箱之后，Number类中的方法就用不着了！</p><p>自动装箱和自动拆箱的好处？方便编程。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 999是基本数据类型</span>        <span class="token comment">// x是包装类型</span>        <span class="token comment">// 基本数据类型 --(自动转换)--> 包装类型：自动装箱</span>        <span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token number">999</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 999</span>        <span class="token comment">// x是包装类型</span>        <span class="token comment">// y是基本数据类型</span>        <span class="token comment">// 包装类型 --(自动转换)--> 基本数据类型：自动拆箱</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 999</span>        <span class="token comment">// z是一个引用，z是一个变量，z还是保存了一个对象的内存地址。</span>        <span class="token class-name">Integer</span> z <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">// 等同于：Integer z = new Integer(1000);</span>        <span class="token comment">// 分析为什么这个没有报错呢？</span>        <span class="token comment">// +两边要求是基本数据类型的数字，z是包装类，不属于基本数据类型，这里会进行自动拆箱。将z转换成基本数据类型</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>z <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1001</span>        <span class="token class-name">Integer</span> d <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>z <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>        <span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">// Integer a = new Integer(1000); a是个引用，保存内存地址指向对象。</span>        <span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> <span class="token comment">// Integer b = new Integer(1000); b是个引用，保存内存地址指向对象。</span>        <span class="token comment">// == 比较的是对象的内存地址，a和b两个引用中保存的对象内存地址不同。</span>        <span class="token comment">// == 这个运算符不会触发自动拆箱机制。（只有+ - * /等运算的时候才会。）</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="通过访问包装类的常量，来获取最大值和最小值"><a href="#通过访问包装类的常量，来获取最大值和最小值" class="headerlink" title="通过访问包装类的常量，来获取最大值和最小值"></a>通过访问包装类的常量，来获取最大值和最小值</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int的最大值："</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// int的最大值：2147483647</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int的最小值："</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// int的最小值：-2147483648</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"byte的最大值："</span> <span class="token operator">+</span> <span class="token class-name">Byte</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// byte的最大值：127</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"byte的最小值："</span> <span class="token operator">+</span> <span class="token class-name">Byte</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// byte的最小值：-128</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="整数型常量池"><a href="#整数型常量池" class="headerlink" title="整数型常量池"></a>整数型常量池</h5><p>java中为了提高程序的执行效率，将[-128到127]之间所有的包装对象提前创建好，放到了一个方法区的“整数型常量池”当中了，目的是只要用这个区间的数据不需要再new了，直接从整数型常量池当中取出来。</p><p>整数型常量池：就是缓存机制。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>        <span class="token comment">// 原理：x变量中保存的对象的内存地址和y变量中保存的对象的内存地址是一样的。</span>        <span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> y <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>        <span class="token comment">// == 永远判断的都是两个对象的内存地址是否相同。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/integer-bao-zhuang-lei/integer-bao-zhuang-lei/Integer%E7%9A%84%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84.png" alt="Integer的内存结构"></p><h5 id="Integer类当中有哪些常用的方法"><a href="#Integer类当中有哪些常用的方法" class="headerlink" title="Integer类当中有哪些常用的方法"></a>Integer类当中有哪些常用的方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// static int parseInt(String s)</span>        <span class="token comment">// 静态方法，传参String，返回int</span>        <span class="token keyword">int</span> retValue <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// String -转换-> int</span>        <span class="token comment">//int retValue = Integer.parseInt("中文"); // NumberFormatException</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>retValue <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 223</span>        <span class="token comment">// static String toBinaryString(int i)</span>        <span class="token comment">// 静态的：将十进制转换成二进制字符串。</span>        <span class="token class-name">String</span> binaryString <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>binaryString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"11" 二进制字符串</span>        <span class="token comment">// static String toHexString(int i)</span>        <span class="token comment">// 静态的：将十进制转换成十六进制字符串。</span>        <span class="token class-name">String</span> hexString <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hexString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "10"</span>        <span class="token comment">// static String toOctalString(int i)</span>        <span class="token comment">// 静态的：将十进制转换成八进制字符串。</span>        <span class="token class-name">String</span> octalString <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toOctalString</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>octalString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "10"</span>        <span class="token comment">//static Integer valueOf(int i)</span>        <span class="token comment">// 静态的：int-->Integer</span>        <span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// static Integer valueOf(String s)</span>        <span class="token comment">// 静态的：String-->Integer</span>        <span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Integer类的异常"><a href="#Integer类的异常" class="headerlink" title="Integer类的异常"></a>Integer类的异常</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">空指针异常：<span class="token class-name">NullPointerException</span>类型转换异常：<span class="token class-name">ClassCastException</span>数组下标越界异常：<span class="token class-name">ArrayIndexOutOfBoundsException</span>数字格式化异常：<span class="token class-name">NumberFormatException</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 手动装箱</span>        <span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 手动拆箱。</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 不是一个“数字”可以包装成Integer吗？不能。运行时出现异常。</span>        <span class="token comment">// 编译的时候没问题，一切符合java语法，运行时会不会出问题呢？</span>        <span class="token comment">// java.lang.NumberFormatException异常</span>        <span class="token comment">// Integer a = new Integer("中文");</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="String-int-Integer之间互相转换"><a href="#String-int-Integer之间互相转换" class="headerlink" title="String int Integer之间互相转换"></a>String int Integer之间互相转换</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// String --> int</span>        <span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// i1是100数字</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 101</span>        <span class="token comment">// int --> String</span>        <span class="token class-name">String</span> s2 <span class="token operator">=</span> i1 <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">// "100"字符串</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "1001"</span>        <span class="token comment">// int --> Integer</span>        <span class="token comment">// 自动装箱</span>        <span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token comment">// Integer --> int</span>        <span class="token comment">// 自动拆箱</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token comment">// String --> Integer</span>        <span class="token class-name">Integer</span> k <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Integer --> String</span>        <span class="token class-name">String</span> e <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![String Integer int三种类型的互相转换](.&#x2F;String Integer int三种类型的互相转换.png)</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的抽象类</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-chou-xiang-lei/java-chou-xiang-lei/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-chou-xiang-lei/java-chou-xiang-lei/</url>
      
        <content type="html"><![CDATA[<h3 id="Java抽象类"><a href="#Java抽象类" class="headerlink" title="Java抽象类"></a>Java抽象类</h3><p>类到对象是实例化。对象到类是抽象。</p><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-chou-xiang-lei/java-chou-xiang-lei/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E7%90%86%E8%A7%A3.png" alt="抽象类的理解"></p><h4 id="抽象类："><a href="#抽象类：" class="headerlink" title="抽象类："></a>抽象类：</h4><ol><li><p>什么是抽象类？<br>类和类之间具有共同特征，将这些共同特征提取出来，形成的就是抽象类。<br>类本身是不存在的，所以抽象类无法创建对象《无法实例化》。</p></li><li><p>抽象类属于什么类型？<br>抽象类也属于引用数据类型。</p></li><li><p>抽象类怎么定义？<br>语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符列表<span class="token punctuation">]</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> 类名<span class="token punctuation">&#123;</span>类体<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>抽象类是无法实例化的，无法创建对象的，所以抽象类是用来被子类继承的。</p></li><li><p>final和abstract不能联合使用，这两个关键字是对立的。</p></li><li><p>抽象类的子类可以是抽象类。也可以是非抽象类。</p></li><li><p>抽象类虽然无法实例化，但是抽象类有构造方法，这个构造方法是供子类使用的。</p></li><li><p>抽象类关联到一个概念：抽象方法。什么是抽象方法呢？<br>​    抽象方法表示没有实现的方法，没有方法体的方法。例如：    </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    抽象方法特点是：<br>​        特点1：没有方法体，以分号结尾。<br>​        特点2：前面修饰符列表中有abstract关键字。<br>​        <strong>抽象类中不一定有抽象方法，抽象方法必须出现在抽象类中。</strong></p></li><li><p><strong>一个非抽象的类，继承抽象类，必须将抽象类中的抽象方法进行覆盖&#x2F;重写&#x2F;实现。</strong>这是java语法上强行规定的，必须的，不然编译器就报错了。这里的覆盖或者说重写，也可以叫做实现。（对抽象的实现。）</p></li><li><p>面试题（判断题）：java语言中凡是没有方法体的方法都是抽象方法。<br>   不对，错误的。<br>   Object类中就有很多方法都没有方法体，都是以“;”结尾的，但他们都不是抽象方法，例如：</p></li></ol>   <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   ​    这个方法底层调用了C++写的动态链接库程序。前面修饰符列表中没有：abstract。有一个native。表示调用JVM本地程序。</p><h5 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperStudy</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 错误: Account是抽象的; 无法实例化</span>        <span class="token comment">// Account act = new Account();</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 银行账户类</span><span class="token comment">// 错误: 非法的修饰符组合: abstract和final</span><span class="token comment">/*final abstract class Account&#123;&#125;*/</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 非抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doOther</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 子类继承抽象类，子类可以实例化对象</span><span class="token keyword">class</span> <span class="token class-name">CreditAccount</span> <span class="token keyword">extends</span> <span class="token class-name">Account</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">CreditAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 子类继承抽象类,必须实现其抽象方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 抽象类的子类可以是抽象类吗？可以</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">TestAccount</span> <span class="token keyword">extends</span> <span class="token class-name">Account</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="面向抽象编程"><a href="#面向抽象编程" class="headerlink" title="面向抽象编程"></a>面向抽象编程</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AbstractTest02</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 能不能使用多态?</span><span class="token comment">// 父类型引用指向子类型对象。</span><span class="token class-name">Animal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 向上转型。（自动类型转换）</span><span class="token comment">// 这就是面向抽象编程。</span><span class="token comment">// 以后你都是调用的a.XXXX</span><span class="token comment">// a的类型是Animal，Animal是抽象的</span><span class="token comment">// 面向抽象编程，不要面向具体编程，降低程序的耦合度，提高程序的扩展力。</span><span class="token comment">/*分析以下：编译的时候这个move()方法是谁的？是父类Animal的运行的时候这个move()方法又是谁的？是子类的*/</span>a<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 动物类（抽象类）</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token comment">// 抽象方法</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 子类（非抽象的）</span><span class="token comment">// 错误: Bird不是抽象的, 并且未覆盖Animal中的抽象方法move()</span><span class="token comment">/*class Bird extends Animal&#123;&#125;*/</span><span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token comment">// 需要将从父类中继承过来的抽象方法进行覆盖/重写，或者也可以叫做“实现”。</span><span class="token comment">// 把抽象的方法实现了。</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸟儿在飞翔！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 如果Bird是抽象类的话，那么这个Animal中继承过来的抽象方法也可以不去重写/覆盖/实现。</span><span class="token comment">/*abstract class Bird extends Animal&#123;&#125;*/</span><span class="token comment">/*分析：Animal是父类，并且是 抽象的。Animal这个抽象类中有一个抽象方法move。Bird是子类，并且是 非抽象的。Bird继承Animal之后，会将抽象方法继承过来。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的接口</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-jie-kou/java-jie-kou/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-jie-kou/java-jie-kou/</url>
      
        <content type="html"><![CDATA[<h3 id="Java接口"><a href="#Java接口" class="headerlink" title="Java接口"></a>Java接口</h3><h4 id="接口的基础语法"><a href="#接口的基础语法" class="headerlink" title="接口的基础语法"></a>接口的基础语法</h4><ol><li><p>接口也是一种“引用数据类型”。编译之后也是一个class字节码文件。</p></li><li><p>接口是完全抽象的。（抽象类是半抽象。）或者也可以说接口是特殊的抽象类。</p></li><li><p>接口怎么定义，语法是什么？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符列表<span class="token punctuation">]</span> <span class="token keyword">interface</span> 接口名<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接口支持多继承，一个接口可以继承多个接口。</p></li><li><p>接口中只包含两部分内容，一部分是：常量。一部分是：抽象方法。接口中没有其它内容了。只有以上两部分。<strong>接口中只有常量+抽象方法。</strong></p></li><li><p>接口中所有的元素都是public修饰的。（都是公开的。）</p></li><li><p>接口中的抽象方法定义时：public abstract修饰符可以省略。</p></li><li><p>接口中的方法都是抽象方法，所以接口中的方法不能有方法体。</p></li><li><p>接口中的常量的public static final可以省略。</p></li><li><p>接口中方法不能有方法体。</p></li><li><p>一个非抽象的类，实现接口的时候，必须将接口中所有方法加以实现。</p></li><li><p>一个类可以实现多个接口。</p></li><li><p>extends和implements可以共存，extends在前，implements在后。</p></li><li><p>使用接口，写代码的时候，可以使用多态（父类型引用指向子类型对象）。</p></li></ol><h5 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperStudy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 访问接口的常量。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">MyMath</span><span class="token punctuation">.</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3.1415926</span>        <span class="token comment">// 常量能重新赋值吗?</span>        <span class="token comment">//错误: 无法为最终变量PI分配值</span>        <span class="token comment">//MyMath.PI = 3.1415928;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义接口</span><span class="token keyword">interface</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 接口支持继承</span><span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 一个接口可以继承多个接口（支持多继承）</span><span class="token keyword">interface</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">,</span><span class="token class-name">B</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 我的数学接口</span><span class="token keyword">interface</span> <span class="token class-name">MyMath</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 常量</span>    <span class="token comment">// public static final double PI = 3.1415926;</span>    <span class="token comment">// 接口中随便写一个变量就是常量。</span>    <span class="token comment">// 常量：值不能发生改变的变量。</span>    <span class="token comment">// public static final可以省略吗？</span>    <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span>    <span class="token comment">// 抽象方法</span>    <span class="token comment">// public abstract int sum(int a, int b);</span>    <span class="token comment">// 接口当中既然都是抽象方法，那么在编写代码的时候，public abstract可以省略吗？</span>    <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 接口中的方法可以有方法体吗？</span>    <span class="token comment">// 错误: 接口抽象方法不能带有主体</span><span class="token comment">/*void doSome()&#123;&#125;*/</span>    <span class="token comment">// 相减的抽象方法</span>    <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="接口与类-面向接口编程"><a href="#接口与类-面向接口编程" class="headerlink" title="接口与类(面向接口编程)"></a>接口与类(面向接口编程)</h4><ol><li>接口的基础语法：<br>类和类之间叫做继承，类和接口之间叫做实现。<br>别多想：你仍然可以将”实现”看做“继承”。<br>继承使用extends关键字完成。<br>实现使用implements关键字完成。</li><li><strong>当一个非抽象的类实现接口的话，必须将接口中所有的抽象方法全部实现（覆盖、重写）。</strong></li></ol><h5 id="代码实例-1"><a href="#代码实例-1" class="headerlink" title="代码实例"></a>代码实例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperStudy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//错误: MyMath是抽象的; 无法实例化</span>        <span class="token comment">//new MyMath();</span>                <span class="token comment">// 能使用多态吗?可以。</span>        <span class="token comment">// 父类型的引用指向子类型的对象</span>        <span class="token class-name">MyMath</span> mm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyMathImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用接口里面的方法（面向接口编程。）</span>        <span class="token keyword">int</span> result1 <span class="token operator">=</span> mm<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result2 <span class="token operator">=</span> mm<span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 特殊的抽象类，完全抽象的，叫做接口。</span><span class="token keyword">interface</span> <span class="token class-name">MyMath</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 这样没问题</span><span class="token comment">/*abstract class MyMathImpl implements MyMath &#123;&#125;*/</span><span class="token comment">// 编写一个类（这个类是一个“非抽象”的类）</span><span class="token comment">// 这个类的名字是随意的。</span><span class="token comment">//错误: MyMathImpl不是抽象的, 并且未覆盖MyMath中的抽象方法sub(int,int)</span><span class="token comment">/*class MyMathImpl implements MyMath &#123;&#125;*/</span><span class="token comment">//修正</span><span class="token keyword">class</span> <span class="token class-name">MyMathImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MyMath</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//错误：正在尝试分配更低的访问权限; 以前为public</span><span class="token comment">/*int sum(int a, int b)&#123;return a + b;&#125;*/</span>    <span class="token comment">// 重写/覆盖/实现 接口中的方法（通常叫做实现。）</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类实现多个接口"><a href="#类实现多个接口" class="headerlink" title="类实现多个接口"></a>类实现多个接口</h4><ol><li>接口和接口之间支持多继承，那么一个类可以同时实现多个接口吗？<br>一个类可以同时实现多个接口。<br>这种机制弥补了java中的哪个缺陷？<br>    java中类和类只支持单继承。实际上单继承是为了简单而出现的，现实世界中存在多继承，java中的接口弥补了单继承带来的缺陷。接口A和接口B虽然没有继承关系，但是写代码的时候，可以互转。编译器没意见。但是运行时可能出现：ClassCastException</li><li>之前有一个结论：<br>无论向上转型还是向下转型，两种类型之间必须要有继承关系，没有继承关系编译器会报错。（这句话不适用在接口方面。）最终实际上和之前还是一样，需要加：instanceof运算符进行判断。向下转型养成好习惯。转型之前先if+instanceof进行判断。</li></ol><h5 id="代码实例-2"><a href="#代码实例-2" class="headerlink" title="代码实例"></a>代码实例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperStudy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 多态该怎么用呢？</span>        <span class="token comment">// 都是父类型引用指向子类型对象</span>        <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//a.m2(); // 编译报错。A接口中没有m2()方法。</span>        <span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这个编译没问题，运行也没问题。</span>        <span class="token comment">// 调用其他接口中的方法，你需要转型（接口转型。）</span>        <span class="token class-name">B</span> b2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">B</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span>        b2<span class="token punctuation">.</span><span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// m2 ...</span>        <span class="token comment">// 直接向下转型为D可以吗？可以</span>        <span class="token class-name">D</span> d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">D</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span>        d<span class="token punctuation">.</span><span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// m2 ...</span>        <span class="token class-name">M</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">E</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 经过测试：接口和接口之间在进行强制类型转换的时候，没有继承关系，也可以强转。</span>        <span class="token comment">// 但是一定要注意，运行时可能会出现ClassCastException异常。</span>        <span class="token comment">// 编译没问题，运行有问题。</span>        <span class="token comment">// K k = (K)m;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token keyword">instanceof</span> <span class="token class-name">K</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">K</span> k <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">K</span><span class="token punctuation">)</span>m<span class="token punctuation">;</span><span class="token comment">// 这个不会运行</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">K</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">M</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">E</span> <span class="token keyword">implements</span> <span class="token class-name">M</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">X</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Y</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Z</span> <span class="token keyword">extends</span> <span class="token class-name">X</span><span class="token punctuation">,</span><span class="token class-name">Y</span><span class="token punctuation">&#123;</span> <span class="token comment">//接口和接口支持多继承。</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 实现多个接口，其实就类似于多继承。</span><span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">,</span><span class="token class-name">B</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment">// 实现A接口的m1()</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m1 ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment">// 实现B接口中的m2()</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m2 ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="extends和implements同时出现"><a href="#extends和implements同时出现" class="headerlink" title="extends和implements同时出现"></a>extends和implements同时出现</h4><ol><li>继承和实现都存在的话，代码应该怎么写？<br>extends 关键字在前。implements 关键字在后。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperStudy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建对象（表面看Animal类没起作用！）</span>        <span class="token class-name">Flyable</span> flyableCat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//多态。</span>        flyableCat<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 动物类：父类</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 接口通常提取的是行为动作。</span><span class="token keyword">interface</span> <span class="token class-name">Flyable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token keyword">implements</span> <span class="token class-name">Flyable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"飞猫起飞，翱翔太空的一只猫，很神奇，我想做一只猫！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 猪（默认实际上是存在继承的，默认继承Object。）</span><span class="token comment">/*class Pig extends Object implements Flyable&#123;&#125;*/</span><span class="token keyword">class</span> <span class="token class-name">Pig</span> <span class="token keyword">implements</span> <span class="token class-name">Flyable</span><span class="token punctuation">&#123;</span> <span class="token comment">//没写extends，也是有的，默认继承Object。</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一只会飞的猪！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="接口在开发中的作用"><a href="#接口在开发中的作用" class="headerlink" title="接口在开发中的作用"></a>接口在开发中的作用</h4><ol><li><p>注意：接口在开发中的作用，类似于多态在开发中的作用。</p></li><li><p>多态：面向抽象编程，不要面向具体编程。降低程序的耦合度。提高程序的扩展力。</p></li><li><p>面向抽象编程这句话以后可以修改为：面向接口编程。</p></li><li><p>面向接口编程，可以降低程序的耦合度，提高程序的扩展力。符合OCP开发原则。</p></li><li><p>接口的使用离不开多态机制。（接口+多态才可以达到降低耦合度。）</p></li><li><p>接口可以解耦合，解开的是谁和谁的耦合！！！<br>任何一个接口都有调用者和实现者。<br>接口可以将调用者和实现者解耦合。<br>调用者面向接口调用。<br>实现者面向接口编写实现。</p></li></ol><h5 id="代码实例-3"><a href="#代码实例-3" class="headerlink" title="代码实例"></a>代码实例</h5><p>FoodMenu</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*接口：菜单，抽象的*/</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FoodMenu</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 西红柿炒蛋</span>    <span class="token keyword">void</span> <span class="token function">shiZiChaoJiDan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 鱼香肉丝</span>    <span class="token keyword">void</span> <span class="token function">yuXiangRouSi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Customer</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 顾客</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 顾客手里有一个菜单</span>    <span class="token comment">// 记住：以后凡是能够使用 has a 来描述的，统一以属性的方式存在。</span>    <span class="token comment">// 实例变量，属性</span>    <span class="token comment">// 面向抽象编程，面向接口编程。降低程序的耦合度，提高程序的扩展力。</span>    <span class="token keyword">private</span> <span class="token class-name">FoodMenu</span> foodMenu<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFoodMenu</span><span class="token punctuation">(</span><span class="token class-name">FoodMenu</span> foodMenu<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>foodMenu <span class="token operator">=</span> foodMenu<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">FoodMenu</span> <span class="token function">getFoodMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>foodMenu<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token class-name">FoodMenu</span> foodMenu<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>foodMenu <span class="token operator">=</span> foodMenu<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 提供一个点菜的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 先拿到菜单才能点菜</span>        foodMenu<span class="token punctuation">.</span><span class="token function">shiZiChaoJiDan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        foodMenu<span class="token punctuation">.</span><span class="token function">yuXiangRouSi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AmericCooker</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 西餐厨师</span><span class="token comment">// 实现菜单上的菜</span><span class="token comment">// 厨师是接口的实现者。</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AmericCooker</span> <span class="token keyword">implements</span> <span class="token class-name">FoodMenu</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shiZiChaoJiDan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"西餐师傅做的西红柿炒鸡蛋！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">yuXiangRouSi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"西餐师傅做的鱼香肉丝！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ChinaCooker</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 中餐厨师</span><span class="token comment">// 实现菜单上的菜</span><span class="token comment">// 厨师是接口的实现者。</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChinaCooker</span> <span class="token keyword">implements</span> <span class="token class-name">FoodMenu</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shiZiChaoJiDan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中餐师傅做的西红柿炒鸡蛋，东北口味！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">yuXiangRouSi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中餐师傅做的鱼香肉丝，东北口味！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>TestStudy</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStudy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FoodMenu</span> foodMenu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AmericCooker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FoodMenu</span> foodMenu2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChinaCooker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Customer</span> customer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>foodMenu1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Customer</span> customer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>foodMenu2<span class="token punctuation">)</span><span class="token punctuation">;</span>        customer1<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        customer2<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*西餐师傅做的西红柿炒鸡蛋！西餐师傅做的鱼香肉丝！中餐师傅做的西红柿炒鸡蛋，东北口味！中餐师傅做的鱼香肉丝，东北口味！*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="抽象类和接口有什么区别？"><a href="#抽象类和接口有什么区别？" class="headerlink" title="抽象类和接口有什么区别？"></a>抽象类和接口有什么区别？</h3><p>在这里我们只说一下抽象类和接口在语法上的区别。</p><ol><li><p>抽象类是半抽象的。</p></li><li><p>接口是完全抽象的。</p></li><li><p>抽象类中有构造方法。</p></li><li><p>接口中没有构造方法。</p></li><li><p>接口和接口之间支持多继承。</p></li><li><p>类和类之间只能单继承。</p></li><li><p>一个类可以同时实现多个接口。</p></li><li><p>一个抽象类只能继承一个类（单继承）。</p></li><li><p>接口中只允许出现常量和抽象方法。</p></li><li><p>注意：<br>以后接口使用的比抽象类多。一般抽象类使用的还是少。<br>接口一般都是对“行为”的抽象。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的泛型</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-fan-xing/java-fan-xing/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-fan-xing/java-fan-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="Java泛型"><a href="#Java泛型" class="headerlink" title="Java泛型"></a>Java泛型</h3><ol><li><p>泛型这种语法机制，只在程序编译阶段起作用，只是给编译器参考的。（运行阶段泛型没用！）</p></li><li><p>使用了泛型好处是什么？</p><ol><li>第一：集合中存储的元素类型统一了。</li><li>第二：从集合中取出的元素类型是泛型指定的类型，不需要进行大量的“向下转型”！</li></ol></li><li><p>泛型的缺点是什么？</p><ol><li>导致集合中存储的元素缺乏多样性！</li></ol></li></ol><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*        // 不使用泛型机制，分析程序存在缺点        List myList = new ArrayList();        // 准备对象        Cat cat = new Cat();        Bird bird = new Bird();        // 将对象添加到集合当中        myList.add(cat);        myList.add(bird);        // 遍历集合，取出每个Animal，让它move        Iterator iterator = myList.iterator();        while(iterator.hasNext()) &#123;            Object obj = iterator.next();            // obj中没有move方法，无法调用，需要向下转型！            if(obj instanceof Animal)&#123;                Animal animal = (Animal)obj;                animal.move();            &#125;        &#125;*/</span>        <span class="token comment">// 使用泛型List&lt;Animal>之后，表示List集合中只允许存储Animal类型的数据。</span>        <span class="token comment">// 用泛型来指定集合中存储的数据类型。</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Animal</span><span class="token punctuation">></span></span> myList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Animal</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 指定List集合中只能存储Animal，那么存储String就编译报错了。</span>        <span class="token comment">// 这样用了泛型之后，集合中元素的数据类型更加统一了。</span>        <span class="token comment">// myList.add("abc");</span>        <span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Bird</span> bird <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span>        myList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bird<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取迭代器</span>        <span class="token comment">// 这个表示迭代器迭代的是Animal类型。</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Animal</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> myList<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 使用泛型之后，每一次迭代返回的数据都是Animal类型。</span>            <span class="token class-name">Animal</span> animal <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 这里不需要进行强制类型转换了。直接调用。</span>            animal<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 调用子类型特有的方法还是需要向下转换的！</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>animal <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">Cat</span> itCat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span> animal<span class="token punctuation">;</span>                itCat<span class="token punctuation">.</span><span class="token function">catchMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>animal <span class="token keyword">instanceof</span> <span class="token class-name">Bird</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">Bird</span> itBird <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Bird</span><span class="token punctuation">)</span>animal<span class="token punctuation">;</span>                itBird<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 父类自带方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物在移动！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 特有方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">catchMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫抓老鼠！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 特有方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸟儿在飞翔！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自动类型推断机制"><a href="#自动类型推断机制" class="headerlink" title="自动类型推断机制"></a>自动类型推断机制</h4><p>自动类型推断机制。（又称为钻石表达式）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>这里的类型会自动推断<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ArrayList&lt;这里的类型会自动推断>()</span>        <span class="token comment">// 自动类型推断，钻石表达式！</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stringList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 类型不匹配。</span>        <span class="token comment">// stringList.add(123);</span>        stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Word!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> stringList<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 如果没有使用泛型</span>            <span class="token comment">/*Object obj = iterator.next();            if(obj instanceof String)&#123;                String str = (String)obj;                System.out.println(str.substring(2));            &#125;*/</span>            <span class="token comment">// 直接通过迭代器获取了String类型的数据</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 直接调用String类的substring方法截取字符串。</span>            <span class="token class-name">String</span> newString <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自定义泛型"><a href="#自定义泛型" class="headerlink" title="自定义泛型"></a>自定义泛型</h4><p>自定义泛型<br>自定义泛型的时候，&lt;&gt; 尖括号中的是一个标识符，随便写。java源代码中经常出现的是：<E>和<T>E是Element单词首字母。T是Type单词首字母。</T></E></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token operator">&lt;</span>标识符随便写<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// new对象的时候指定了泛型是：String类型</span>        <span class="token class-name">Test</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stringTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 类型不匹配</span>        <span class="token comment">// stringTest.doSome(100);</span>        stringTest<span class="token punctuation">.</span><span class="token function">doSome</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Test</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integerTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        integerTest<span class="token punctuation">.</span><span class="token function">doSome</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 类型不匹配</span>        <span class="token comment">// integerTest.doSome("abc");</span>        <span class="token class-name">MyIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stringMyIterator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> stringMyIterator<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 不用泛型就是Object类型。</span>        <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">doSome</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span>标识符随便写 t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的注解</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-zhu-jie/java-zhu-jie/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-zhu-jie/java-zhu-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><ol><li><p>注解，或者叫做注释类型，英文单词是：Annotation</p></li><li><p>注解的本质就是一个Annotation接口</p></li><li><p>注解中其实是可以有属性和方法，但是接口中的属性都是static final的，对于注解来说没什么意义，而我们定义接口的方法就相当于注解的属性，为什么注解只有属性成员变量，其实他就是接口的方法，这就是为什么成员变量会有括号。</p></li><li><p>注解Annotation是一种引用数据类型。编译之后也是生成xxx.class文件。</p></li><li><p>怎么自定义注解呢？语法格式？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符列表<span class="token punctuation">]</span> <span class="token annotation punctuation">@interface</span> 注解类型名<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>注解怎么使用，用在什么地方？</p><ol><li>默认情况下，注解可以出现在任意位置。</li><li>第一：注解使用时的语法格式是：@注解类型名</li><li>第二：注解可以出现在类上、属性上、方法上、变量上等….</li><li>注解还可以出现在注解类型上。</li></ol></li><li><p>JDK内置了哪些注解呢？</p><ol><li>java.lang包下的注释类型：<ol><li><p>Deprecated用@Deprecated注释的程序元素，不鼓励程序员使用这样的元素，通常是因为它很危险或存在更好的选择。已过时。在IDEA中会出现横线。 有更好的解决方案存在。</p></li><li><p>Override表示一个方法声明打算重写超类中的另一个方法声明。 @Override这个注解只能注解方法。@Override这个注解是给编译器参考的，和运行阶段没有关系。</p><p>凡是java中的方法带有这个注解的，编译器都会进行编译检查，如果这个方法不是重写父类的方法，编译器报错。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>SOURCE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Override</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>标识性注解，给编译器做参考的。</p><p>编译器看到方法上有这个注解的时候，编译器会自动检查该方法是否重写了父类的方法。</p><p>如果没有重写，报错。</p><p>这个注解只是在编译阶段起作用，和运行期无关！</p></li><li><p>SuppressWarnings指示应该在注释元素（以及包含在该注释元素中的所有程序元素）中取消显示指定的编译器警告。</p></li></ol></li></ol></li><li><p>元注解</p><ol><li>什么是元注解？用来标注“注解类型”的“注解”，称为元注解。</li></ol></li><li><p>如果一个注解当中有属性，那么必须给属性赋值。（除非该属性使用default指定了默认值。）</p></li><li><p>给注解赋值的语法：</p></li></ol>   <pre class="line-numbers language-java" data-language="java"><code class="language-java">@注解的名字<span class="token punctuation">(</span>属性名<span class="token operator">=</span>属性值<span class="token punctuation">,</span>属性名<span class="token operator">=</span>属性值<span class="token punctuation">,</span>属性名<span class="token operator">=</span>属性值<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6>   <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"王五"</span><span class="token punctuation">,</span>addr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"上海,北极"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 如果一个注解当中有属性，那么必须给属性赋值。（除非该属性使用default指定了默认值。）</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果一个注解的属性的名字是value，并且只有一个属性的话，在使用的时候，该属性名可以省略。如果不是value的话不可以省略。</span>    <span class="token comment">// @OtherAnnotation("")或者@OtherAnnotation(value = "")</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 自定义注解：MyAnnotation * 在注解当中可以定义属性，以下这个是MyAnnotation的name属性。 * 看着像1个方法，但实际上我们称之为属性name。 */</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"张三"</span><span class="token punctuation">;</span> <span class="token comment">// 属性指定默认值</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 如果一个注解当中有属性，那么必须给属性赋值。（除非该属性使用default指定了默认值。）</span><span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">,</span>addr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"上海,北极"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// 注解修饰注解。给注解赋值。</span><span class="token comment">// 数组是大括号,如果数组中只有1个元素：大括号可以省略。</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">OtherAnnotation</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="11"><li><p>如果一个注解的属性的名字是value，并且只有一个属性的话，在使用的时候，该属性名可以省略。</p></li><li><p>常见的元注解有哪些？</p></li><li><p>Target</p></li><li><p>Retention</p></li><li><p>关于Target注解：</p><p>这是一个元注解，用来标注“注解类型”的“注解”，这个Target注解用来标注“被标注的注解”可以出现在哪些位置上。</p><p>@Target(ElementType.METHOD)：表示“被标注的注解”只能出现在方法上。</p><p>@Target(value&#x3D;{CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, MODULE, PARAMETER, TYPE})</p><p>表示该注解可以出现在：构造方法上，字段上，局部变量上，方法上，….，类上…</p><p>@Target({ElementType.TYPE, ElementType.METHOD})：只允许该注解可以标注类、方法</p></li><li><p>关于Retention注解：</p><p>这是一个元注解，用来标注“注解类型”的“注解”，这个Retention注解用来标注“被标注的注解”最终保存在哪里。</p><p>@Retention(RetentionPolicy.SOURCE)：表示该注解只被保留在java源文件中。</p><p>@Retention(RetentionPolicy.CLASS)：表示该注解被保存在class文件中。</p><p>@Retention(RetentionPolicy.RUNTIME)：表示该注解被保存在class文件中，并且可以被反射机制所读取。</p></li><li><p>Retention的源代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Documented</span> <span class="token comment">// 元注解</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span> <span class="token comment">// 元注解</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token punctuation">)</span> <span class="token comment">// 元注解</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Retention</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 属性</span>    <span class="token class-name">RetentionPolicy</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>RetentionPolicy的源代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">RetentionPolicy</span> <span class="token punctuation">&#123;</span>    SOURCE<span class="token punctuation">,</span>    CLASS<span class="token punctuation">,</span>    RUNTIME<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Target的源代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>ANNOTATION_TYPE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Target</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ElementType</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注解当中的属性可以是哪一种类型？</p><p>属性的类型可以是：byte short int long float double boolean char String Class 枚举类型，以及以上每一种的数组形式。</p></li></ol><h3 id="反射机制使用注解"><a href="#反射机制使用注解" class="headerlink" title="反射机制使用注解"></a>反射机制使用注解</h3><p>常用方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">></span></span> annotationClass<span class="token punctuation">)</span> <span class="token comment">// 判断类上面是否有某个类型的注解。</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">></span></span> <span class="token class-name">A</span> <span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">></span></span> annotationClass<span class="token punctuation">)</span> <span class="token comment">// 如果存在该元素的指定类型的注释，则返回这些注释，否则返回 null。 </span><span class="token class-name">Method</span> <span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span> <span class="token comment">// 返回一个 Method 对象，该对象反映此 Class 对象所表示的类或接口的指定已声明方法。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 获取这个类</span>        <span class="token class-name">Class</span> myClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"MyAnn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 判断类上面是否有@MyAnnotation</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myClass<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">MyAnnotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>        <span class="token comment">// 获取doSome()方法</span>        <span class="token class-name">Method</span> doSomeMethod <span class="token operator">=</span> myClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"doSome"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>myClass<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">MyAnnotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 获取该注解对象</span>            <span class="token class-name">MyAnnotation</span> myAnnotation <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MyAnnotation</span><span class="token punctuation">)</span> myClass<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">MyAnnotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"类上面的注解对象:"</span> <span class="token operator">+</span> myAnnotation<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 类上面的注解对象:@MyAnnotation("\u5357\u6781")</span>            <span class="token comment">// 获取注解对象的属性怎么办？和调接口没区别。</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> myAnnotation<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 南极</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 判断该方法上是否存在这个注解</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>doSomeMethod<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">MyAnnotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">MyAnnotation</span> doMyAnn <span class="token operator">=</span> doSomeMethod<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">MyAnnotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>doMyAnn<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 北极</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 只允许该注解可以标注类、方法</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 希望这个注解可以被反射</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span><span class="token punctuation">&#123;</span>    <span class="token comment">// value属性。</span>    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"北极"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"南极"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyAnn</span><span class="token punctuation">&#123;</span>    <span class="token comment">// @MyAnnotation</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token comment">// @MyAnnotation</span>    <span class="token keyword">public</span> <span class="token class-name">MyAnn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@MyAnnotation</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// @MyAnnotation</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注解在开发中有什么用呢？"><a href="#注解在开发中有什么用呢？" class="headerlink" title="注解在开发中有什么用呢？"></a>注解在开发中有什么用呢？</h4><p>需求：</p><p>假设有这样一个注解，叫做：@Id，这个注解只能出现在类上面，当这个类上有这个注解的时候，要求这个类中必须有一个int类型的id属性。如果没有这个属性就报异常。如果有这个属性则正常执行！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 获取类</span>        <span class="token class-name">Class</span> userClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 判断类上是否存在Id注解</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>userClass<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">MustHasIdPropertyAnnotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 当一个类上面有@MustHasIdPropertyAnnotation注解的时候，要求类中必须存在int类型的id属性</span>            <span class="token comment">// 如果没有int类型的id属性则报异常。</span>            <span class="token comment">// 获取类的属性</span>            <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> userClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> isOk <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 给一个默认的标记</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"int"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">// 表示这个类是合法的类。有@Id注解，则这个类中必须有int类型的id</span>                    isOk <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 表示合法</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 判断是否合法</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isOk<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HasNotIdPropertyException</span><span class="token punctuation">(</span><span class="token string">"被@MustHasIdPropertyAnnotation注解标注的类中必须要有一个int类型的id属性！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@MustHasIdPropertyAnnotation</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token class-name">String</span> password<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 表示这个注解只能出现在类上面</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token comment">// 该注解可以被反射机制读取到</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">MustHasIdPropertyAnnotation</span><span class="token punctuation">&#123;</span><span class="token comment">// 这个注解@MustHasIdPropertyAnnotation用来标注类，被标注的类中必须有一个int类型的id属性，没有就报异常。</span><span class="token punctuation">&#125;</span><span class="token comment">// 自定义异常</span><span class="token keyword">class</span> <span class="token class-name">HasNotIdPropertyException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">HasNotIdPropertyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">HasNotIdPropertyException</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的枚举类型</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-mei-ju-lei-xing/java-de-mei-ju-lei-xing/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-mei-ju-lei-xing/java-de-mei-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="Java的枚举类型"><a href="#Java的枚举类型" class="headerlink" title="Java的枚举类型"></a>Java的枚举类型</h3><ol><li><p>使用enum作为关键字。</p></li><li><p>枚举类型的常用在一个函数多个不同的返回状态，如果是两个返回状态可以使用boolean类型，但是如果是多个返回类型状态(情况)时需要使用枚举类型。</p></li><li><p>尽量不要使用int类型作为返回值，因为这样可以随时修改返回值的值，程序也不会报错。</p></li><li><p>boolean类型也是特殊的枚举类型。</p></li><li><p>枚举是一种引用数据类型</p></li><li><p>枚举类型怎么定义，语法是？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> 枚举类型名<span class="token punctuation">&#123;</span>枚举值<span class="token number">1</span><span class="token punctuation">,</span>枚举值<span class="token number">2</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>结果只有两种情况的，建议使用布尔类型。结果超过两种并且还是可以一枚一枚列举出来的，建议使用枚举类型。例如：颜色、四季、星期等都可以使用枚举类型。</p></li><li><p>枚举中的每一个值，可以看做是“常量”</p></li><li><p>枚举编译之后也是生成class文件。</p></li></ol><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Result</span> r <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token class-name">Result</span><span class="token punctuation">.</span>SUCCESS <span class="token operator">?</span> <span class="token string">"计算成功"</span> <span class="token operator">:</span> <span class="token string">"计算失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 计算两个int类型数据的商。     * @param a a int数据     * @param b b int数据     * @return Result.SUCCESS表示成功，Result.FAIL表示失败！     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Result</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span>SUCCESS<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span>FAIL<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 枚举：一枚一枚可以列举出来的，才建议使用枚举类型。</span><span class="token comment">// 枚举编译之后也是生成class文件。</span><span class="token comment">// 枚举也是一种引用数据类型。</span><span class="token comment">// 枚举中的每一个值可以看做是常量。</span><span class="token keyword">enum</span> <span class="token class-name">Result</span><span class="token punctuation">&#123;</span>    <span class="token comment">// SUCCESS 是枚举Result类型中的一个值</span>    <span class="token comment">// FAIL 是枚举Result类型中的一个值</span>    <span class="token comment">// 枚举中的每一个值，可以看做是“常量”</span>    SUCCESS<span class="token punctuation">,</span> FAIL<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的类加载器</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-lei-jia-zai-qi/lei-jia-zai-qi/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-lei-jia-zai-qi/lei-jia-zai-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><ol><li><p>什么是类加载器？</p><p>专门负责加载类的命令&#x2F;工具。ClassLoader</p></li><li><p>JDK中自带了3个类加载器</p><ol><li>启动类加载器:rt.jar</li><li>扩展类加载器:ext&#x2F;*.jar</li><li>应用类加载器：classpath</li></ol></li><li><p>假设有这样一段代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码在开始执行之前，会将所需要类全部加载到JVM当中。通过类加载器加载，看到以上代码类加载器会找String.class文件，找到就加载，那么是怎么进行加载的呢？</p><ol><li><p>首先通过“启动类加载器”加载。</p><p>注意：启动类加载器专门加载：C:\Program Files\Java\jdk1.8.0_101\jre\lib\rt.jar</p><p>rt.jar中都是JDK最核心的类库。</p></li><li><p>如果通过“启动类加载器”加载不到的时候，会通过”扩展类加载器”加载。</p><p>注意：扩展类加载器专门加载：C:\Program Files\Java\jdk1.8.0_101\jre\lib\ext*.jar</p></li><li><p>如果“扩展类加载器”没有加载到，那么会通过“应用类加载器”加载。</p><p>注意：应用类加载器专门加载：classpath中的类。</p></li></ol></li><li><p>java中为了保证类加载的安全，使用了双亲委派机制。</p><p>优先从启动类加载器中加载，这个称为“父”，“父”无法加载到，再从扩展类加载器中加载，这个称为“母”。</p><p>双亲委派。如果都加载不到，才会考虑从应用类加载器中加载。直到加载到为止。</p><p>这样做的目的也是为了保证安全，假设你编写了一个String类，这个类中有恶意代码，如果没有双亲委派机制的话，没有加载JDK自带的String类，而是使用你编写的String类，这样会造成安全问题。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java实现经典算法</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-jing-dian-suan-fa/java-jing-dian-suan-fa/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-jing-dian-suan-fa/java-jing-dian-suan-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="Java经典算法"><a href="#Java经典算法" class="headerlink" title="Java经典算法"></a>Java经典算法</h3><h4 id="冒泡排序算法"><a href="#冒泡排序算法" class="headerlink" title="冒泡排序算法"></a>冒泡排序算法</h4><ol><li>每一次循环结束之后，都要找出最大的数据，放到参与比较的这堆数据的最右边。（冒出最大的那个气泡。）</li><li>核心：<br>拿着左边的数字和右边的数字比对，当左边 &gt; 右边的时候，交换位置。<br>一共进行了array.length-1次循环，在第一次循环中比较array.length-1次。在第二次循环中比第一次循环少比较一次。</li><li>缺点：<br> 在不需要交换的时候也进行了比较。</li></ol><h5 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1314</span><span class="token punctuation">,</span><span class="token number">521</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">666</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> swopCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    swopCount<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"比较次数:"</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"交换的次数:"</span><span class="token operator">+</span>swopCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>选择排序比冒泡排序的效率高。<br>    高在交换位置的次数上。<br>    选择排序的交换位置是有意义的。</p><p>循环一次，然后找出参加比较的这堆数据中最小的，拿着这个最小的值和最前面的数据“交换位置”。</p><p>n条数据循环n-1次。（外层循环n-1次。）</p><h5 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1314</span><span class="token punctuation">,</span><span class="token number">521</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">666</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> swopConut <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 4条数据循环3次。（外层循环3次。）</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// i的值是0 1 2</span>            <span class="token comment">// i正好是“参加比较的这堆数据中”最左边那个元素的下标。</span>            <span class="token comment">// i是一个参与比较的这堆数据中的起点下标。</span>            <span class="token comment">// 假设起点i下标位置上的元素是最小的。</span>            <span class="token keyword">int</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    min <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token comment">//最小值的元素下标是j</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 当i和min相等时，表示最初猜测是对的。</span>            <span class="token comment">// 当i和min不相等时，表示最初猜测是错的，有比这个元素更小的元素，</span>            <span class="token comment">// 需要拿着这个更小的元素和最左边的元素交换位置。</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>min <span class="token operator">!=</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 表示存在更小的数据</span>                <span class="token comment">// arr[min] 最小的数据</span>                <span class="token comment">// arr[i] 最前面的数据</span>                swopConut<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 冒泡排序和选择排序实际上比较的次数没变。</span>        <span class="token comment">// 交换位置的次数减少了。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"比较的次数:"</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"交换的次数:"</span><span class="token operator">+</span>swopConut<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组的元素查找"><a href="#数组的元素查找" class="headerlink" title="数组的元素查找"></a>数组的元素查找</h4><p>判断数组中是否有某个元素可以使用二分法查找的方法。</p><p>数组元素查找有两种方式：</p><ol><li>第一种方式：一个一个挨着找，直到找到为止。</li><li>第二种方式：二分法查找（算法），这个效率较高。</li></ol><h5 id="普通"><a href="#普通" class="headerlink" title="普通"></a>普通</h5><p>使用循环遍历的方式一个接一个的查找。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">999</span><span class="token punctuation">,</span><span class="token number">1314</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">1314</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token string">"该元素不存在！"</span> <span class="token operator">:</span> <span class="token string">"该元素下标"</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 使用循环遍历从数组中查找目标元素的下标。     * @param array 被查找的数组（这个必须是已经排序的。）     * @param dest 目标元素     * @return -1表示该元素不存在，其它表示返回该元素的下标。     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> dest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dest <span class="token operator">==</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h5><ol><li><p>二分法查找建立在排序的基础之上。</p></li><li><p>二分法查找效率要高于“一个挨着一个”的这种查找方式。</p></li><li><p>二分法的查找原理：</p><ol><li>将一个数组按中间位置分为两份，然后再分别对每一份进行二分查找。</li></ol></li><li><p>二分法查找的终止条件：一直折半，直到中间的那个元素恰好是被查找的元素。</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">999</span><span class="token punctuation">,</span><span class="token number">1314</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token string">"该元素不存在！"</span> <span class="token operator">:</span> <span class="token string">"该元素下标"</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 使用二分法从数组中查找目标元素的下标。     * @param array 被查找的数组（这个必须是已经排序的。）     * @param dest 目标元素     * @return -1表示该元素不存在，其它表示返回该元素的下标。     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> dest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 开始下标</span>        <span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 结束下标</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 开始元素的下标只要在结束元素下标的左边，就有机会继续循环。</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>begin <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 中间元素下标</span>            <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>begin <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">==</span> dest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> middle<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&lt;</span> dest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 目标在“中间”的右边</span>                <span class="token comment">// 开始元素下标需要发生变化（开始元素的下标需要重新赋值）</span>                begin <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 一直增</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">></span> dest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// arr[mid] > dest</span>                <span class="token comment">// 目标在“中间”的左边</span>                <span class="token comment">// 修改结束元素的下标</span>                end <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 一直减</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="使用Java自带的Arrays类"><a href="#使用Java自带的Arrays类" class="headerlink" title="使用Java自带的Arrays类"></a>使用Java自带的Arrays类</h5><p>其中sort()是排序的方法，binarySearch()是二分法查找的算法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">999</span><span class="token punctuation">,</span><span class="token number">1314</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">arrayPrint</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token string">"该元素不存在！"</span> <span class="token operator">:</span> <span class="token string">"该元素下标"</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">arrayPrint</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java路径相关问题</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-lu-jing-de-xue-xi/java-lu-jing-de-xue-xi/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-lu-jing-de-xue-xi/java-lu-jing-de-xue-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="Java路径的学习"><a href="#Java路径的学习" class="headerlink" title="Java路径的学习"></a>Java路径的学习</h3><ol><li><p>由于以前用的获取文件路径的方式移植性差，在IDEA中默认的当前路径是Project的根。假设这个代码假设离开了IDEA，换到了其它位置，可能当前路径就不是Project的根了，这时这个路径就无效了。</p><p>以前获取路径的方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"classinfo.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>怎么获取一个文件的绝对路径。以下这种方式是通用的。但前提是：文件需要在类路径下。才能用这种方式。</p></li><li><p>什么类路径下？</p><p>方式在src下的都是类路径下。src是类的根路径。</p></li><li><p>获取路径的方法的解析：</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">Thread</span> <span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 当前线程对象</span><span class="token class-name">ClassLoader</span> <span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 是线程对象的方法，可以获取到当前线程的类加载器对象。</span><span class="token class-name">URL</span> <span class="token function">getResource</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token comment">// 查找具有给定名称的资源。【获取资源】这是类加载器对象的方法，当前线程的类加载器默认从类的根路径下加载资源。</span><span class="token class-name">String</span> <span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 返回此 URI 的已解码的路径组成部分。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li><p>代码演示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"写相对路径，但是这个相对路径从src出发开始找"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 必须保证src下有abc文件。</span><span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"var/db"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 必须保证src下有var目录，var目录下有db文件。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这种方式是为了获取一个文件的绝对路径。（通用方式，不会受到环境移植的影响。）但是该文件要求放在类路径下，换句话说：也就是放到src下面。src下是类的根路径。</p><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> strPath <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"userinfo.properties"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这种方式获取文件绝对路径是通用的。</span>        <span class="token comment">// src是根路径</span>        <span class="token comment">// 采用以上的代码可以拿到一个文件的绝对路径。（从类的根路径下作为起点开始）</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>直接以流的形式返回：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"test.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 获取一个文件的绝对路径了！！！！！</span>        <span class="token comment">/*String path = Thread.currentThread().getContextClassLoader().getResource("userinfo.properties").getPath();        FileReader fr = new FileReader(path);*/</span>        <span class="token comment">// 直接以流的形式返回。</span>        <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"userinfo.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 通过key获取value</span>        <span class="token class-name">String</span> className <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"classname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>IO + Properties，怎么快速绑定属性资源文件？</p><p>java.util包下提供了一个资源绑定器，便于获取属性配置文件中的内容。使用以下这种方式的时候，属性配置文件xxx.properties必须放到类路径下。</p><ol><li>要求：第一这个文件必须在类路径下</li><li>第二这个文件必须是以.properties结尾。</li></ol><p>资源绑定器，只能绑定xxx.properties文件。并且这个文件必须在类路径下。文件扩展名也必须是properties，并且在写路径的时候，路径后面的扩展名不能写。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ResourceBundle</span> bundle <span class="token operator">=</span> <span class="token class-name">ResourceBundle</span><span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// test.properties不写properties</span><span class="token class-name">String</span> value <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ResourceBundle</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 资源绑定器，只能绑定xxx.properties文件。并且这个文件必须在类路径下。文件扩展名也必须是properties</span>        <span class="token comment">// 并且在写路径的时候，路径后面的扩展名不能写。</span>        <span class="token class-name">ResourceBundle</span> resourceBundle <span class="token operator">=</span> <span class="token class-name">ResourceBundle</span><span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token string">"userinfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> className <span class="token operator">=</span> resourceBundle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"classname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的随机数</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-sui-ji-shu/java-sui-ji-shu/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-sui-ji-shu/java-sui-ji-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="Java随机数"><a href="#Java随机数" class="headerlink" title="Java随机数"></a>Java随机数</h3><p>Java中的随机数使用Random来生成。</p><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建随机数对象</span>        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 随机产生一个int类型取值范围内的数字。</span>        <span class="token keyword">int</span> num1 <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 产生[0~100]之间的随机数。不能产生101。</span>        <span class="token comment">// nextInt翻译为：下一个int类型的数据是101，表示只能取到100.</span>        <span class="token keyword">int</span> num2 <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//不包括101</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="生成5个不重复的随机数-0-100-。"><a href="#生成5个不重复的随机数-0-100-。" class="headerlink" title="生成5个不重复的随机数[0-100]。"></a>生成5个不重复的随机数[0-100]。</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 准备一个长度为5的一维数组。</span>        <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 默认值都是0</span>        <span class="token comment">// 创建Random对象</span>        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 修改每一位的默认值为-1,这样不会与生成的0混淆。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 循环，生成随机数</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 生成随机数</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生成的随机数是:"</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 判断arr数组中有没有这个num</span>            <span class="token comment">// 如果没有这个num，就放进去。</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">contains</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                arr<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 遍历以上的数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 单独编写一个方法，这个方法专门用来判断数组中是否包含某个元素     * @param array arr 数组     * @param key key 元素     * @return true表示包含，false表示不包含。     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 对数组进行升序,这个方案bug。（排序出问题了。）</span>        <span class="token comment">// Arrays.sort(arr);</span>        <span class="token comment">// 进行二分法查找</span>        <span class="token comment">// 二分法查找的结果 >= 0说明，这个元素找到了，找到了表示存在！</span>        <span class="token comment">// return Arrays.binarySearch(arr, key) >= 0;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 条件成立了表示包含，返回true</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 这个就表示不包含！</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的Object类</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/object-lei-de-xue-xi/object-lei-de-xue-xi/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/object-lei-de-xue-xi/object-lei-de-xue-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="Object类的学习"><a href="#Object类的学习" class="headerlink" title="Object类的学习"></a>Object类的学习</h3><p>只需要知道这几个方法即可：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 负责对象克隆的。</span><span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 获取对象哈希值的一个方法。</span><span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span>  <span class="token comment">// 判断两个对象是否相等</span><span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 将对象转换成字符串形式</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 垃圾回收器负责调用的方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString()方法"></a>toString()方法</h4><ol><li><p>以后所有类的toString()方法是需要重写的。</p></li><li><p>重写规则，越简单越明了就好。</p></li><li><p>System.out.println(引用); 这里会自动调用“引用”的toString()方法。</p></li><li><p>源代码长什么样？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"@"</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>toString()方法的作用是什么？<br>toString()方法的设计目的是：通过调用这个方法可以将一个“java对象”转换成“字符串表示形式”</p></li><li><p>String类是SUN写的，在String类中toString方法已经重写了。</p></li></ol><h4 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals()方法"></a>equals()方法</h4><ol><li><p>以后所有类的equals方法也需要重写，因为Object中的equals方法比较的是两个对象的内存地址，我们应该比较内容，所以需要重写。</p></li><li><p>重写规则：自己定，主要看是什么和什么相等时表示<strong>两个对象相等</strong>。</p></li><li><p>基本数据类型比较使用：&#x3D;&#x3D;</p></li><li><p>对象和对象比较：调用equals方法（引用数据类型之间的比较）</p></li><li><p>String类是SUN编写的，所以String类的equals方法重写了。</p></li><li><p>以后判断两个字符串是否相等，不能使用&#x3D;&#x3D;，要调用字符串对象的equals方法。因为字符串是一个对象。</p></li><li><p>equals方法是判断两个对象是否相等的。<br>判断两个java对象是否相等，不能使用“&#x3D;&#x3D;”，因为“&#x3D;&#x3D;”比较的是两个对象的内存地址。</p></li><li><p>注意：<strong>重写equals方法的时候要彻底。</strong></p></li><li><p>equals方法的源代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在Object类中的equals方法当中，默认采用的是“&#x3D;&#x3D;”判断两个java对象是否相等。而“&#x3D;&#x3D;”判断的是两个java对象的内存地址，我们应该判断两个java对象的内容是否相等。所以老祖宗的equals方法不够用，需要子类重写equals。</p></li><li><p>java中基本数据类型比较是否相等，使用&#x3D;&#x3D;</p></li><li><p>java中所有的引用数据类型统一使用equals方法来判断是否相等。</p></li></ol><h5 id="代码实例1"><a href="#代码实例1" class="headerlink" title="代码实例1"></a>代码实例1</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperStudy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1 <span class="token operator">==</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>        <span class="token class-name">Mytime</span> mytime1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mytime</span><span class="token punctuation">(</span><span class="token number">2008</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mytime1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2008年8月8日</span>        <span class="token class-name">Mytime</span> mytime2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mytime</span><span class="token punctuation">(</span><span class="token number">2008</span> <span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mytime1 <span class="token operator">==</span> mytime2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>        <span class="token comment">// true(重写equals方法之后,如果不重写equals方法则比较的是对象之间的内存地址,则与上面的结果相同)</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mytime1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mytime2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Mytime</span> mytime3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mytime</span><span class="token punctuation">(</span><span class="token number">2008</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mytime1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mytime3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>        <span class="token class-name">Mytime</span> mytime4 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mytime1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mytime4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Mytime</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> year<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> month<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> day<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setYear</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>day <span class="token operator">=</span> day<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMonth</span><span class="token punctuation">(</span><span class="token keyword">int</span> month<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>month <span class="token operator">=</span> month<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDay</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>day <span class="token operator">=</span> day<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>year<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>month<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>day<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Mytime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Mytime</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span><span class="token keyword">int</span> month<span class="token punctuation">,</span><span class="token keyword">int</span> day<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>month <span class="token operator">=</span> month<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>day <span class="token operator">=</span> day<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Mytime</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Mytime</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Mytime</span> mytime <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Mytime</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> mytime<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> mytime<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> mytime<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>year<span class="token operator">+</span><span class="token string">"年"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>month<span class="token operator">+</span><span class="token string">"月"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>day<span class="token operator">+</span><span class="token string">"日"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="代码实例1-1"><a href="#代码实例1-1" class="headerlink" title="代码实例1"></a>代码实例1</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperStudy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"北京"</span><span class="token punctuation">,</span><span class="token string">"大兴区"</span><span class="token punctuation">,</span><span class="token string">"11111"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token string">"北京"</span><span class="token punctuation">,</span><span class="token string">"大兴区"</span><span class="token punctuation">,</span><span class="token string">"11111"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Address</span> addr<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Address</span> address<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>addr <span class="token operator">=</span> address<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddr</span><span class="token punctuation">(</span><span class="token class-name">Address</span> address<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>addr <span class="token operator">=</span> address<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Address</span> <span class="token function">getAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>addr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">User</span> user <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"姓名:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n地址=\t"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Address</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> street<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> zipcode<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token class-name">String</span> city<span class="token punctuation">,</span><span class="token class-name">String</span> street<span class="token punctuation">,</span> <span class="token class-name">String</span> zipcode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>city <span class="token operator">=</span> city<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>street <span class="token operator">=</span> street<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>zipcode <span class="token operator">=</span> zipcode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCity</span><span class="token punctuation">(</span><span class="token class-name">String</span> city<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>city <span class="token operator">=</span> city<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStreet</span><span class="token punctuation">(</span><span class="token class-name">String</span> street<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>street <span class="token operator">=</span> street<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setZipcode</span><span class="token punctuation">(</span><span class="token class-name">String</span> zipcode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>zipcode <span class="token operator">=</span> zipcode<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>city<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStreet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>street<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getZipcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>zipcode<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"城市:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t街道:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStreet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t门牌号:"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getZipcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Address</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Address</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Address</span> address <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Address</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>address<span class="token punctuation">.</span><span class="token function">getCity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStreet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>address<span class="token punctuation">.</span><span class="token function">getStreet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getZipcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>address<span class="token punctuation">.</span><span class="token function">getZipcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="finalize-方法。"><a href="#finalize-方法。" class="headerlink" title="finalize()方法。"></a>finalize()方法。</h4><ol><li><p>这个方法是protected修饰的，在Object类中这个方法的源代码是？    </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>finalize()方法只有一个方法体，里面没有代码。</p></li><li><p>GC：负责调用finalize()方法。</p></li><li><p>这个方法不需要程序员手动调用，JVM的垃圾回收器负责调用这个方法。不像equals toString，equals和toString()方法是需要你写代码调用的。finalize()只需要重写，重写完将来自动会有程序来调用。</p></li><li><p>调用finalize()方法被成为一个时机，这个时机是垃圾回收时机。</p></li><li><p>finalize()方法的执行时机：<br>当一个java对象即将被垃圾回收器回收的时候，垃圾回收器负责调用finalize()方法。</p></li></ol><h5 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperStudy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            person <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// 将person对象变成垃圾</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 建议启动垃圾回收器。（只是建议，可能不启动，也可能启动。启动的概率高了一些。）</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token comment">// Person类型的对象被垃圾回收器回收的时候，垃圾回收器负责调用：person.finalize();</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">+</span><span class="token string">"即将被销毁!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="hashCode-方法"><a href="#hashCode-方法" class="headerlink" title="hashCode()方法"></a>hashCode()方法</h4><ol><li><p>在Object中的hashCode方法是怎样的？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    这个方法不是抽象方法，带有native关键字，底层调用C++程序。</p></li><li><p>hashCode()方法返回的是哈希码：<br>实际上就是一个java对象的内存地址，经过哈希算法，得出的一个值。<br>所以hashCode()方法的执行结果可以等同看做一个java对象的内存地址。</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperStudy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyClass</span> myClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myClass<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2003749087</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperStudy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建数学对象</span>        <span class="token class-name">Mymath</span> mymath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mymath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ComputerImp</span> computerImp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComputerImp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mymath<span class="token punctuation">.</span><span class="token function">mysum</span><span class="token punctuation">(</span>computerImp<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建一个无名的对象区调用这个类实现的sum方法</span>        mymath<span class="token punctuation">.</span><span class="token function">mysum</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ComputerImp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 去new接口在其后面加上&#123;&#125;在&#123;&#125;中写接口抽象方法的实现，这就是匿名内部类.</span>        mymath<span class="token punctuation">.</span><span class="token function">mysum</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 负责计算的接口</span><span class="token keyword">interface</span> <span class="token class-name">Computer</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 抽象的方法</span>    <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1 <span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 写一个类实现其接口</span><span class="token keyword">class</span> <span class="token class-name">ComputerImp</span> <span class="token keyword">implements</span> <span class="token class-name">Computer</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 对抽象方法的实现</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Mymath</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 数学的求和方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mysum</span><span class="token punctuation">(</span><span class="token class-name">Computer</span> computer <span class="token punctuation">,</span><span class="token keyword">int</span> num1 <span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> retValue <span class="token operator">=</span> computer<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token operator">+</span><span class="token string">"+"</span><span class="token operator">+</span>num2<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>retValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String类的学习</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/string-lei-de-xue-xi/string-lei-de-xue-xi/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/string-lei-de-xue-xi/string-lei-de-xue-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="String类的学习"><a href="#String类的学习" class="headerlink" title="String类的学习"></a>String类的学习</h3><ol><li><p>String表示字符串类型，属于引用数据类型，不属于基本数据类型。</p></li><li><p>在java中随便使用双引号括起来的都是String对象。例如：”abc”，”def”，”hello world!”，这是3个String对象。</p></li><li><p>java中规定，双引号括起来的字符串，是不可变的，也就是说”abc”自出生到最终死亡，不可变，不能变成”abcd”，也不能变成”ab”</p></li><li><p>在Java当中双引号括起来的字符串，例如：”abc” “def”都是直接存储在“方法区”的“字符串常量池”当中的。</p></li><li><p>使用new的方式创建的字符串对象：凡是双引号括起来的都在字符串常量池中有一份。new对象的时候一定在堆内存当中开辟空间。堆中保存着字符串常量池中的内存地址。</p></li><li><p>String类型的数据保存的是常量池中的内存地址。不是值，因为String类型是引用数据类型。</p><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 这两行代码表示底层创建了3个字符串对象，都在字符串常量池当中。</span>        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"abcdef"</span> <span class="token operator">+</span> <span class="token string">"xy"</span><span class="token punctuation">;</span>        <span class="token comment">// 分析：这是使用new的方式创建的字符串对象。这个代码中的"xy"是从哪里来的？</span>        <span class="token comment">// 凡是双引号括起来的都在字符串常量池中有一份。</span>        <span class="token comment">// new对象的时候一定在堆内存当中开辟空间。</span>        <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"xy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// i变量中保存的是100这个值。</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token comment">// s变量中保存的是字符串对象的内存地址。</span>        <span class="token comment">// s引用中保存的不是"abc"，是0x1111</span>        <span class="token comment">// 而0x1111是"abc"字符串对象在“字符串常量池”当中的内存地址。</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/string-lei-de-xue-xi/string-lei-de-xue-xi/String%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="String的内存图"></p><ol><li><p>如果字符串常量池中有一个hello字符串，又创建了一个新的hello，则这个hello对象不会被创建，而是使用之前的创建的hello。因为这个hello对象已经存在了！</p><h6 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        <span class="token comment">// "hello"是存储在方法区的字符串常量池当中</span>        <span class="token comment">// 所以这个"hello"不会新建。（因为这个对象已经存在了！）</span>        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        <span class="token comment">// 分析结果是true还是false?</span>        <span class="token comment">// == 双等号比较的是不是变量中保存的内存地址?是的。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>        <span class="token class-name">String</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"xyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"xyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 分析结果是true还是false?</span>        <span class="token comment">// == 双等号比较的是不是变量中保存的内存地址?是的。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>        <span class="token comment">// 通过这个案例的学习，我们知道了，字符串对象之间的比较不能使用“==”</span>        <span class="token comment">// "=="不保险。应该调用String类的equals方法。</span>        <span class="token comment">// String类已经重写了equals方法，以下的equals方法调用的是String重写之后的equals方法。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>        <span class="token class-name">String</span> k <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"testString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// String k = null;</span>        <span class="token comment">// "testString"这个字符串可以后面加"."呢?</span>        <span class="token comment">// 因为"testString"是一个String字符串对象。只要是对象都能调用方法。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testString"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 建议使用这种方式，因为这个可以避免空指针异常。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"testString"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存在空指针异常的风险。不建议这样写。</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/string-lei-de-xue-xi/string-lei-de-xue-xi/String%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98.png" alt="String相关面试题"></p></li></ol></li></ol><h4 id="类构造方法中的String"><a href="#类构造方法中的String" class="headerlink" title="类构造方法中的String"></a>类构造方法中的String</h4><h5 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/string-lei-de-xue-xi/string-lei-de-xue-xi/String%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%BC%95%E7%94%A8%E4%B8%AD%E5%90%8C%E6%A0%B7%E4%B9%9F%E6%98%AF%E4%BF%9D%E5%AD%98%E4%BA%86%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80.png" alt="String类型的引用中同样也是保存了对象的内存地址"></p><h4 id="String创建对象的问题"><a href="#String创建对象的问题" class="headerlink" title="String创建对象的问题"></a>String创建对象的问题</h4><h5 id="代码示例-3"><a href="#代码示例-3" class="headerlink" title="代码示例"></a>代码示例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 分析以下程序，一共创建了几个对象?</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*一共3个对象：            方法区字符串常量池中有1个,            "hello"堆内存当中有两个String对象。            一共3个。        */</span>        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="关于String类中的构造方法。"><a href="#关于String类中的构造方法。" class="headerlink" title="关于String类中的构造方法。"></a>关于String类中的构造方法。</h4><p>关于String类中的构造方法。</p><ul><li>第一个：String s &#x3D; new String(“”);</li><li>第二个：String s &#x3D; “”; 最常用</li><li>第三个：String s &#x3D; new String(char数组);</li><li>第四个：String s &#x3D; new String(char数组,起始下标,长度);</li><li>第五个：String s &#x3D; new String(byte数组);</li><li>第六个：String s &#x3D; new String(byte数组,起始下标,长度)</li></ul><h5 id="代码示例-4"><a href="#代码示例-4" class="headerlink" title="代码示例"></a>代码示例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建字符串对象最常用的一种方式</span>        <span class="token class-name">String</span> s1 <span class="token operator">=</span>  <span class="token string">"hello world!"</span><span class="token punctuation">;</span>        <span class="token comment">// s1这个变量中保存的是一个内存地址。</span>        <span class="token comment">// 按说以下应该输出一个地址。</span>        <span class="token comment">// 但是输出一个字符串，说明String类已经重写了toString()方法。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// hello world!</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//hello world!</span>        <span class="token comment">// 这里只掌握常用的构造方法。</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 97是a，98是b，99是c</span>        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 前面说过：输出一个引用的时候，会自动调用toString()方法，默认Object的话，会自动输出对象的内存地址。</span>        <span class="token comment">// 通过输出结果我们得出一个结论：String类已经重写了toString()方法。</span>        <span class="token comment">// 输出字符串对象的话，输出的不是对象的内存地址，而是字符串本身。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//abc</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//abc</span>        <span class="token comment">// String(字节数组,数组元素下标的起始位置,长度)</span>        <span class="token comment">// 将byte数组中的一部分转换成字符串。</span>        <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// bc</span>        <span class="token comment">// 将char数组全部转换成字符串</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'我'</span><span class="token punctuation">,</span><span class="token char">'是'</span><span class="token punctuation">,</span><span class="token char">'中'</span><span class="token punctuation">,</span><span class="token char">'国'</span><span class="token punctuation">,</span><span class="token char">'人'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 我是中国人</span>        <span class="token comment">// 将char数组的一部分转换成字符串</span>        <span class="token class-name">String</span> s5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 中国人</span>        <span class="token class-name">String</span> s6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"helloworld!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// helloworld!</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="String类当中常用方法。"><a href="#String类当中常用方法。" class="headerlink" title="String类当中常用方法。"></a>String类当中常用方法。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// char charAt(int index)</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">"中国人"</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "中国人"是一个字符串String对象。只要是对象就能“点.”</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 国</span>        <span class="token comment">// int compareTo(String anotherString)</span>        <span class="token comment">// 字符串之间比较大小不能直接使用 > &lt; ，需要使用compareTo方法。</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0（等于0） 前后一致</span>        <span class="token keyword">int</span> result2 <span class="token operator">=</span> <span class="token string">"abcd"</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">"abce"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1（小于0） 前小后大</span>        <span class="token keyword">int</span> result3 <span class="token operator">=</span> <span class="token string">"abce"</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1（大于0） 前大后小</span>        <span class="token comment">// 拿着字符串第一个字母和后面字符串的第一个字母比较。能分胜负就不再比较了。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"xyz"</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">"yxz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span>        <span class="token comment">// boolean contains(CharSequence s)</span>        <span class="token comment">// 判断前面的字符串中是否包含后面的子字符串。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HelloWorld.java"</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">".java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"https://"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>        <span class="token comment">// boolean endsWith(String suffix)</span>        <span class="token comment">// 判断当前字符串是否以某个子字符串结尾。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>        <span class="token comment">// boolean equals(Object anObject)</span>        <span class="token comment">// 比较两个字符串必须使用equals方法，不能使用“==”</span>        <span class="token comment">// equals只能看出相等不相等。</span>        <span class="token comment">// compareTo方法可以看出是否相等，并且同时还可以看出谁大谁小。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>        <span class="token comment">// boolean equalsIgnoreCase(String anotherString)</span>        <span class="token comment">// 判断两个字符串是否相等，并且同时忽略大小写。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ABc"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"abC"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>        <span class="token comment">// byte[] getBytes()</span>        <span class="token comment">// 将字符串对象转换成字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 97,98,99,100,101,102,</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// int indexOf(String str)</span>        <span class="token comment">// 判断某个子字符串在当前字符串中第一次出现处的索引（下标）。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"oraclejavac++.netc#phppythonjavaoraclec++"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>        <span class="token comment">// boolean isEmpty()</span>        <span class="token comment">// 判断某个字符串是否为“空字符串”。底层源代码调用的应该是字符串的length()方法。</span>        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>        <span class="token comment">// int length()</span>        <span class="token comment">// 判断数组长度和判断字符串长度不一样</span>        <span class="token comment">// 判断数组长度是length属性，判断字符串长度是length()方法。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>        <span class="token comment">// int lastIndexOf(String str)</span>        <span class="token comment">// 判断某个子字符串在当前字符串中最后一次出现的索引（下标）</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"oraclejavac++javac#phpjavapython"</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//22</span>        <span class="token comment">// String replace(CharSequence target, CharSequence replacement)替换。</span>        <span class="token comment">// String的父接口就是：CharSequence</span>        <span class="token class-name">String</span> newString <span class="token operator">=</span> <span class="token string">"http://www.baidu.com"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"http://"</span><span class="token punctuation">,</span> <span class="token string">"https://"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//https://www.baidu.com</span>        <span class="token comment">// String[] split(String regex)拆分字符串</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ymd <span class="token operator">=</span> <span class="token string">"1980-10-11"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//"1980-10-11"以"-"分隔符进行拆分。</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ymd<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>ymd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1980,10,11,</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// boolean startsWith(String prefix)</span>        <span class="token comment">// 判断某个字符串是否以某个子字符串开始。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"https"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>        <span class="token comment">// String substring(int beginIndex) 参数是起始下标。</span>        <span class="token comment">// 截取字符串</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//www.baidu.com</span>        <span class="token comment">// String substring(int beginIndex, int endIndex)</span>        <span class="token comment">// beginIndex起始位置（包括）</span>        <span class="token comment">// endIndex结束位置（不包括）左闭右开</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//www</span>        <span class="token comment">// char[] toCharArray()</span>        <span class="token comment">// 将字符串转换成char数组</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token string">"我是中国人"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 我,是,中,国,人,</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// String toLowerCase()</span>        <span class="token comment">// 转换为小写。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ABCDefKXyz"</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// abcdefkxyz</span>        <span class="token comment">// String toUpperCase();</span>        <span class="token comment">// 转换为大写。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ABCDefKXyz"</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ABCDEFKXYZ</span>        <span class="token comment">// String trim();</span>        <span class="token comment">// 去除字符串前后空白</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"      hello  world      "</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// hello  world</span>        <span class="token comment">// String中只有一个方法是静态的,不需要new对象</span>        <span class="token comment">// 这个方法叫做valueOf</span>        <span class="token comment">// 作用：将“非字符串”转换成“字符串”</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这个静态的valueOf()方法，参数是一个对象的时候，会自动调用该对象的toString()方法吗？</span>        <span class="token comment">// System.out.println(String.valueOf(new Customer()));// Customer@568db2f2,// 没有重写toString()方法之前是对象内存地址</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这是重新写的toString()方法</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 通过源代码可以看出：为什么输出一个引用的时候，会调用toString()方法!!!!</span>        <span class="token comment">// 本质上System.out.println()这个方法在输出任何数据的时候都是先转换成字符串，再输出。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// java.lang.Object@568db2f2</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"这是重新写的toString()方法"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的final关键字</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/final-guan-jian-zi/final-guan-jian-zi/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/final-guan-jian-zi/final-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><ol><li><p>final表示：最终的，不可变的。</p></li><li><p>final修饰的类无法继承。</p></li><li><p>final修饰的方法无法覆盖。</p></li><li><p>final修饰的变量只能赋一次值。</p></li><li><p>final修饰的引用一旦指向某个对象，则不能再重新指向其它对象，但该引用指向的对象内部的数据是可以修改的。</p></li><li><p>final修饰的实例变量必须手动初始化，不能采用系统默认值。</p></li><li><p>final修饰的实例变量一般和static联合使用，称为常量。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="final修饰的引用"><a href="#final修饰的引用" class="headerlink" title="final修饰的引用"></a>final修饰的引用</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*final修饰的变量，如果这个变量是一个“引用”会怎样？？？？《重点》final修饰的变量只能付一次值(万变不离其宗)“引用”也是一个变量final修饰的作用：该引用只能指向一个对象，并且它只能永远指向该对象，无法在指向其他对象。并且在该方法执行过程中，该引用指向该对象之后，该对象不会被垃圾回收器回收。直到当前方法结束，才会释放空间。、虽然final的引用指向对象A后，不能在重新指向对象B。但是对象A内部的数据可以被修改。*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> finalTest<span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Person</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20</span><span class="token comment">// 代码不管怎么变化，person2也是一个变量，（不过这里它有一个特殊的名字：引用）</span><span class="token keyword">final</span> <span class="token class-name">Person</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">521</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//person2 = new Person(520); 错误: 无法为最终变量person2分配值</span><span class="token comment">//可以给person2一个null吗？？？</span><span class="token comment">//person2 = null; 错误: 无法为最终变量person2分配值</span>person2<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//30</span><span class="token comment">/*final int i = 10;// 不允许的i = 20;*/</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/final-guan-jian-zi/final-guan-jian-zi/final%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%BC%95%E7%94%A8.png" alt="final修饰的引用"></p><h4 id="final修饰的实例变量"><a href="#final修饰的实例变量" class="headerlink" title="final修饰的实例变量"></a>final修饰的实例变量</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*final修饰的实例变量？《重点：万变不离其宗》：final修饰的变量只能赋值一次。（这句话是真理）实例变量如果没有手动赋值的话，系统会赋一个默认值。实例变量在什么时候赋值（初始化）？构造方法执行的过程中赋值(new的时候赋值)终极结论：final修饰的实例变量，系统不负责赋默认值，要求程序员必须手动赋值。这个手动赋值，在变量后面赋值也可以，在构造方法中赋值也可以。*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> finalTest<span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span><span class="token comment">// 实例变量</span><span class="token comment">// 编译器报错</span><span class="token comment">// final int age;</span><span class="token comment">// 实例变量</span><span class="token comment">// 可以，因为我们手动赋值了</span><span class="token keyword">final</span> <span class="token keyword">double</span> height <span class="token operator">=</span> <span class="token number">1.8</span><span class="token punctuation">;</span><span class="token comment">// 实例变量</span><span class="token keyword">final</span> <span class="token keyword">double</span> weight<span class="token punctuation">;</span><span class="token comment">// 构造方法</span><span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span><span class="token comment">// 只要我赶在系统赋默认值之前赋值就行</span><span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> <span class="token number">8.0</span><span class="token punctuation">;</span><span class="token comment">// 这个不可以，因为已经赋值了</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token keyword">double</span> weight<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 这个也赋值了，没有采用系统默认值。</span><span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*final修饰的实例变量一般添加static修饰终极结论：static final联合修饰的变量称为"常量"常量名全部大写，每个单词之间采用下划线衔接常量：实际上常量和静态变量一样，区别在于：常量的值不能变。常量和静态变量，都是储存在方法区，并且都是在类加载时初始化。*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> finalTest<span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Chinese</span><span class="token punctuation">&#123;</span><span class="token comment">//实例变量在堆中，一个对象一份，100个对象100份</span><span class="token class-name">String</span> idCard<span class="token punctuation">;</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">//实例变量既然是用final修饰了，说明该实例变量值不会随着对象的变化而变化。</span><span class="token comment">//该实例变量前面应该添加：static关键字，变为静态的，存储在方法区。这样节省内存。</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> COUNTRY <span class="token operator">=</span> <span class="token string">"中国"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的foreach写法</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/foreach-de-xue-xi/foreach-de-xue-xi/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/foreach-de-xue-xi/foreach-de-xue-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="foreach的学习"><a href="#foreach的学习" class="headerlink" title="foreach的学习"></a>foreach的学习</h3><p>增强for（foreach）</p><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>元素类型 变量名 <span class="token operator">:</span> 数组或集合<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>变量名<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// int类型数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1314</span><span class="token punctuation">,</span><span class="token number">521</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 遍历数组（普通for循环）</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// foreach有一个缺点：没有下标。在需要使用下标的循环中，不建议使用foreach循环。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> data <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// data就是数组中的元素（数组中的每一个元素。）</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stringList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span> stringList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的可变参数</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/ke-bian-chang-du-can-shu/ke-bian-chang-du-can-shu/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/ke-bian-chang-du-can-shu/ke-bian-chang-du-can-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="可变长度参数"><a href="#可变长度参数" class="headerlink" title="可变长度参数"></a>可变长度参数</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// int... args 这就是可变长度参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语法是：类型…  （注意：一定是3个点。）</p><p>注意：</p><ol><li>可变长度参数要求的参数个数是：0~N个。</li><li>可变长度参数在参数列表中必须在最后一个位置上，而且可变长度参数只能有1个。</li><li>可变长度参数可以当做一个数组来看待</li></ol><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">m1</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">m2</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">521</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">m3</span><span class="token punctuation">(</span>intArr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token operator">:</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m1(int... args)方法执行了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// args有length属性，说明args是一个数组！</span>        <span class="token comment">// 可以将可变长度参数当做一个数组来看。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m2(String... args)方法执行了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token operator">:</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m3s(int[] args)方法执行了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java字符串的拼接</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/zi-fu-chuan-de-pin-jie/zi-fu-chuan-de-pin-jie/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/zi-fu-chuan-de-pin-jie/zi-fu-chuan-de-pin-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a>字符串的拼接</h3><h3 id="StringBuffer-x2F-StringBuilder"><a href="#StringBuffer-x2F-StringBuilder" class="headerlink" title="StringBuffer&#x2F;StringBuilder"></a>StringBuffer&#x2F;StringBuilder</h3><ol><li><p>StringBuffer&#x2F;StringBuilder可以看做可变长度字符串。</p></li><li><p>StringBuffer&#x2F;StringBuilder初始化容量16</p></li><li><p>StringBuffer&#x2F;StringBuilder是完成字符串拼接操作的，方法名：append</p></li><li><p>StringBuffer是线程安全的。StringBuilder是非线程安全的。</p></li><li><p>频繁进行字符串拼接不建议使用“+”，因为java中的字符串是不可变的，每一次拼接都会产生新字符串。这样会占用大量的方法区内存。造成内存空间的浪费。给方法区字符串常量池带来很大的压力。<br>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>s <span class="token operator">+=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token comment">// 就以上两行代码，就导致在方法区字符串常量池当中创建了3个对象："abc","hello","abchello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>如果以后需要进行大量字符串的拼接操作，建议使用Java中自带的</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>StringBuffer</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>StringBuilder</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h4><ol><li>如何优化StringBuffer的性能？<ol><li>在创建StringBuffer的时候尽可能给定一个初始化容量。</li><li>最好减少底层数组的扩容次数。预估计一下，给一个大一些初始化容量。</li><li>关键点：给一个合适的初始化容量。可以提高程序的执行效率。</li></ol></li></ol><h5 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建一个初始化容量为16个byte[] 数组。（字符串缓冲区对象）</span>        <span class="token class-name">StringBuffer</span> stringBuffer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 拼接字符串，以后拼接字符串统一调用 append()方法。</span>        <span class="token comment">// append是追加的意思。</span>        stringBuffer1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringBuffer1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// append方法底层在进行追加的时候，如果byte数组满了，会自动扩容。</span>        stringBuffer1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"f!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringBuffer1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// def!!!</span>        <span class="token comment">// 指定初始化容量的stringBuffer1对象（字符串缓冲区对象）</span>        <span class="token class-name">StringBuffer</span> stringBuffer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringBuffer2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringBuffer2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"word!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringBuffer2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// helloword!!!</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="String为什么是不可变的？"><a href="#String为什么是不可变的？" class="headerlink" title="String为什么是不可变的？"></a>String为什么是不可变的？</h5><p>通过源代码，String类中有一个byte[]数组，这个byte[]数组采用了final修饰，因为数组一旦创建，长度不可变。并且被final修饰的引用一旦指向某个对象之后，不可再指向其它对象，所以String是不可变的！”abc” 无法变成 “abcd”</p><h5 id="StringBuilder-x2F-StringBuffer为什么是可变的呢？"><a href="#StringBuilder-x2F-StringBuffer为什么是可变的呢？" class="headerlink" title="StringBuilder&#x2F;StringBuffer为什么是可变的呢？"></a>StringBuilder&#x2F;StringBuffer为什么是可变的呢？</h5><p>通过源代码，StringBuffer&#x2F;StringBuilder内部实际上是一个byte[]数组，这个byte[]数组没有被final修饰，StringBuffer&#x2F;StringBuilder的初始化容量是16，当存满之后会进行扩容，底层调用了数组拷贝的方法System.arraycopy()方法，是这样扩容的。所以StringBuilder&#x2F;StringBuffer适合于使用字符串的频繁拼接操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 字符串不可变是什么意思？</span>        <span class="token comment">// 是说双引号里面的字符串对象一旦创建不可变。</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span> <span class="token comment">//"abc"放到了字符串常量池当中。"abc"不可变。</span>        <span class="token comment">// s变量是可以指向其它对象的。</span>        <span class="token comment">// 字符串不可变不是说以上变量s不可变。说的是"abc"这个对象不可变。</span>        s <span class="token operator">=</span> <span class="token string">"xyz"</span><span class="token punctuation">;</span><span class="token comment">//"xyz"放到了字符串常量池当中。"xyz"不可变。</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h4><ol><li><p>StringBuffer和StringBuilder的区别？</p><ol><li><p>StringBuffer中的方法都有：synchronized关键字修饰。表示StringBuffer在多线程环境下运行是安全的，<strong>StringBuffer是线程安全的。</strong></p></li><li><p>StringBuilder中的方法都没有：synchronized关键字修饰，表示StringBuilder在多线程环境下运行是不安全的。</p><p><strong>StringBuilder是非线程安全的。</strong></p></li></ol></li></ol><h5 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 使用StringBuilder也是可以完成字符串的拼接。</span>        <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// def!!!</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数字类的格式化</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/shu-zi-ge-shi-hua/shu-zi-ge-shi-hua-lei/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/shu-zi-ge-shi-hua/shu-zi-ge-shi-hua-lei/</url>
      
        <content type="html"><![CDATA[<h3 id="数字格式化类"><a href="#数字格式化类" class="headerlink" title="数字格式化类"></a>数字格式化类</h3><h4 id="DecimalFormat类"><a href="#DecimalFormat类" class="headerlink" title="DecimalFormat类"></a>DecimalFormat类</h4><p>java.text.DecimalFormat专门负责数字格式化的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DecimalFormat</span> decimalFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"数字格式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="数字格式有哪些？"><a href="#数字格式有哪些？" class="headerlink" title="数字格式有哪些？"></a>数字格式有哪些？</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"># 代表任意数字<span class="token punctuation">,</span> 代表千分位<span class="token punctuation">.</span> 代表小数点<span class="token number">0</span> 代表不够时补<span class="token number">0</span>例如<span class="token operator">:</span>###<span class="token punctuation">,</span>###<span class="token punctuation">.</span>## <span class="token comment">// 表示：加入千分位，保留2个小数。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">DecimalFormat</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// java.text.DecimalFormat专门负责数字格式化的。</span>        <span class="token comment">// DecimalFormat decimalFormat = new DecimalFormat("数字格式");</span>        <span class="token class-name">DecimalFormat</span> decimalFormat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"###,###.##"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> numStr <span class="token operator">=</span> decimalFormat1<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token number">1314.234</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>numStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1,314.23</span>        <span class="token class-name">DecimalFormat</span> decimalFormat2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DecimalFormat</span><span class="token punctuation">(</span><span class="token string">"###,###.0000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s2 <span class="token operator">=</span> decimalFormat2<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token number">1234.56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "1,234.5600"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="BigDecimal类"><a href="#BigDecimal类" class="headerlink" title="BigDecimal类"></a>BigDecimal类</h4><p>BigDecimal 属于大数据，精度极高。不属于基本数据类型，属于java对象（引用数据类型）</p><p>java.math.BigDecimal处理财务数据时使用，尽量不要使用double。</p><h6 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 这个100不是普通的100，是精度极高的100</span>        <span class="token class-name">BigDecimal</span> bigDecimal1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 精度极高的200</span>        <span class="token class-name">BigDecimal</span> bigDecimal2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 求和</span>        <span class="token comment">// bigDecimal1 + bigDecimal2; // 这样不行，v1和v2都是引用，不能直接使用+求和。</span>        <span class="token comment">// 调用方法求和。</span>        <span class="token class-name">BigDecimal</span> bigResult1 <span class="token operator">=</span> bigDecimal1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bigDecimal2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigResult1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 300</span>        <span class="token class-name">BigDecimal</span> bigResult2 <span class="token operator">=</span> bigDecimal2<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>bigDecimal1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用除法</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bigResult2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java类型转换</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/lei-xing-he-lei-xing-zhi-jian-de-guan-xi/lei-xing-he-lei-xing-zhi-jian-de-guan-xi/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/lei-xing-he-lei-xing-zhi-jian-de-guan-xi/lei-xing-he-lei-xing-zhi-jian-de-guan-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="类型和类型之间的关系"><a href="#类型和类型之间的关系" class="headerlink" title="类型和类型之间的关系"></a>类型和类型之间的关系</h3><h4 id="is-a（继承）"><a href="#is-a（继承）" class="headerlink" title="is a（继承）"></a>is a（继承）</h4><p>is a：<br>    Cat is a Animal（猫是一个动物）<br>    凡是能够满足is a的表示“继承关系”</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">B</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="has-a（关联）"><a href="#has-a（关联）" class="headerlink" title="has a（关联）"></a>has a（关联）</h4><p>has a：<br>    I has a Pen（我有一支笔）<br>    凡是能够满足has a关系的表示“关联关系”<br>    关联关系通常以“属性”的形式存在。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token class-name">B</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="like-a（实现）"><a href="#like-a（实现）" class="headerlink" title="like a（实现）"></a>like a（实现）</h4><p>like a:<br>    Cooker like a FoodMenu（厨师像一个菜单一样）<br>    凡是能够满足like a关系的表示“实现关系”<br>    实现关系通常是：类实现接口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">A</span> <span class="token keyword">implements</span> <span class="token class-name">B</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="package和import"><a href="#package和import" class="headerlink" title="package和import"></a>package和import</h3><h4 id="package"><a href="#package" class="headerlink" title="package"></a>package</h4><ol><li><p>package是一个关键字，后面加包名。例如：package com.javase;其中每一个以.分割的是目录的名字。</p></li><li><p>注意：package语句只允许出现在java源代码的第一行。</p></li><li><p>对于带有package的java程序怎么编译？怎么运行？<br>类名不再是：HelloWorld了。<br>类名是：com.javase.HelloWorld</p></li><li><p>编译：<br>javac -d . HelloWorld.java<br>解释一下：<br>    javac 负责编译的命令<br>    -d        带包编译<br>    .        代表编译之后生成的东西放到当前目录下（点代表当前目录）<br>    HelloWorld.java  被编译的java文件名。</p></li><li><p>运行：<br>java com.javase.HelloWorld</p></li><li><p>以后说类名的时候，如果带着包名描述，表示完整类名。如果没有带包，描述的话，表示简类名。</p><p>​    java.util.Scanner 完整类名。</p><p>​    Scanner 简类名</p></li></ol><h4 id="import"><a href="#import" class="headerlink" title="import"></a>import</h4><ol><li><p>import什么时候使用？<br>A类中使用B类。<br>A和B类都在同一个包下。不需要import。<br>A和B类不在同一个包下。需要使用import。</p></li><li><p>java.lang.*;这个包下的类不需要使用import导入。</p></li><li><p>import怎么用？<br>import语句只能出现在package语句之下，class声明语句之上。<br>import语句还可以采用星号的方式。</p></li><li><p>怎么用？</p><p>​    import 完整类名;</p><p>​    import 包名.*;</p><p>​    import java.util.Scanner; &#x2F;&#x2F; 完整类名。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的访问控制权限</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/fang-wen-kong-zhi-quan-xian/fang-wen-kong-zhi-quan-xian/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/fang-wen-kong-zhi-quan-xian/fang-wen-kong-zhi-quan-xian/</url>
      
        <content type="html"><![CDATA[<h3 id="访问控制权限"><a href="#访问控制权限" class="headerlink" title="访问控制权限"></a>访问控制权限</h3><ol><li><p>访问控制权限都有哪些？4个。<br>private—&gt;私有<br>public—&gt;公开<br>protected—&gt;受保护<br>默认—&gt;类型前面什么都不写</p></li><li><p>以上的4个访问控制权限：控制的范围是什么？<br>private 表示私有的，只能在本类中访问<br>public 表示公开的，在任何位置都可以访问<br>“默认”表示只能在本类，以及同包下访问。<br>protected表示只能在本类、同包、子类中访问。<br> 范围从大到小排序：public &gt; protected &gt; 默认 &gt; private</p><table><thead><tr><th align="center">访问控制修饰符</th><th align="center">本类</th><th align="center">同包</th><th align="center">子类</th><th align="center">任意位置</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">可以</td><td align="center">可以</td><td align="center">可以</td><td align="center">可以</td></tr><tr><td align="center">protected</td><td align="center">可以</td><td align="center">可以</td><td align="center">可以</td><td align="center">不行</td></tr><tr><td align="center">默认</td><td align="center">可以</td><td align="center">可以</td><td align="center">不行</td><td align="center">不行</td></tr><tr><td align="center">private</td><td align="center">可以</td><td align="center">不行</td><td align="center">不行</td><td align="center">不行</td></tr></tbody></table></li><li><p>访问控制权限修饰符可以修饰什么？<br>属性（4个都能用）<br>方法（4个都能用）<br>类（public和默认能用，其它不行。）<br>接口（public和默认能用，其它不行。）</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础与计算机基础</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-ru-men/java-de-xue-xi/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-ru-men/java-de-xue-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="Java的学习"><a href="#Java的学习" class="headerlink" title="Java的学习"></a>Java的学习</h3><h4 id="计算机的编码"><a href="#计算机的编码" class="headerlink" title="计算机的编码"></a>计算机的编码</h4><p>1字节&#x3D;8bit(比特) ——&gt;1byte&#x3D;8bit</p><p>1bit就是一个0或1。byte&#x3D;2在计算机中这样表示：00000010</p><p>1KB&#x3D;1024byte</p><p>1MB&#x3D;1024KB</p><p>1GB&#x3D;1024MB</p><p>1TB&#x3D;1024GB</p><p>char占用2个字节，char采用Unicode编码方式，char类型的字面量使用单引号括起来，char可以储存一个汉字。</p><p>计算机永远储存的都是二进制的补码形式。补码&#x3D;反码+1，对于正数而言，原码&#x3D;补码&#x3D;反码</p><p>多种数据类型做混合运算时，最终的结果类型是”最大容量”所对应的类型。</p><p>eg：char+short+byte会转化为int在做运算。</p><h4 id="JAVA的编译原理"><a href="#JAVA的编译原理" class="headerlink" title="JAVA的编译原理"></a>JAVA的编译原理</h4><p>使用javac命令将xxx.java编译为字节码文件，即：xxx.class文件</p><p>使用java xxx时的原理：</p><p>第一步：先启动JVM</p><p>第二步：JVM启动之后，JVM回去启动类加载器”classloader”</p><p>类加载器的作用：加载类的。本质上类加载器负责去硬盘上找“类”对应的“字节码”文件。<br>假设是“java HelloWorld”，那么类加载器会去硬盘上搜索：HelloWorld.class文件。<br>假设是“java Test”，那么类加载器会去硬盘上搜索：Test.class文件。</p><p>第三步：<br>            类加载器如果在硬盘上找不到对应的字节码文件，会报错，错误: 找不到或无法加载主类、类加载器如果在硬盘上找到了对应的字节码文件，类加载器会将该字节码<br>            文件装载到JVM当中，JVM启动“解释器”将字节码解释为“101010000…”这种<br>            二进制码，操作系统执行二进制码和硬件交互。</p><h5 id="JVM的简单学习"><a href="#JVM的简单学习" class="headerlink" title="JVM的简单学习"></a>JVM的简单学习</h5><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-ru-men/java-de-xue-xi/JVM%E7%9A%84%E4%B8%BB%E8%A6%81%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%EF%BC%88%E4%B8%89%E5%9D%97%EF%BC%89.png" alt="JVM的主要内存空间（三块）"></p><h4 id="public-class与class的区别"><a href="#public-class与class的区别" class="headerlink" title="public class与class的区别"></a>public class与class的区别</h4><p>一个java源文件可以定义多个class</p><p>public的类不是必须的</p><p>任何一个class中都可以编写main方法，每一个main方法都是一个入口</p><p>只要有一个class的定义，那么就会对应生成一个class文件。</p><p>public的类可以没有，但是如果有的话，public修饰的类名必须和源文件名保持一致。</p><p>public的类在一个java文件中只能有一个。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">//这个类是public必须在B.java中声明。切B类只能有一个。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="关于栈的数据结构"><a href="#关于栈的数据结构" class="headerlink" title="关于栈的数据结构"></a>关于栈的数据结构</h4><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-ru-men/java-de-xue-xi/%E5%85%B3%E4%BA%8E%E6%A0%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" alt="关于栈数据结构"></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的参数传递</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-de-can-shu-chuan-di/java-de-can-shu-chuan-di/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-de-can-shu-chuan-di/java-de-can-shu-chuan-di/</url>
      
        <content type="html"><![CDATA[<h3 id="JAVA的参数传递"><a href="#JAVA的参数传递" class="headerlink" title="JAVA的参数传递"></a>JAVA的参数传递</h3><ul><li><p>java中规定：参数传递的时候，和类型无关，不管是基本数据类型还是引用数据类型，统一都是将盒子中保存的那个“值”复制一份，传递下去。</p></li><li><p>java中只有一个规定：参数传递的时候，一定是将“盒子”中的东西复制一份传递过去。</p></li><li><p>内存地址也是值，也是盒子中保存的一个东西。</p></li></ul><h4 id="按值传递"><a href="#按值传递" class="headerlink" title="按值传递"></a>按值传递</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 局部变量，域是main</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token comment">// x赋值给y，是怎么传递的？将x变量中保存的100这个值复制一份传给y</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// 将i变量中保存的10复制一份，传给add方法。</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main ---> "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//10</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// k是局部变量，域是add</span>k<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add ----> "</span> <span class="token operator">+</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//11</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-de-can-shu-chuan-di/java-de-can-shu-chuan-di/%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%921.png" alt="参数传递1"></p><h4 id="按地址传递"><a href="#按地址传递" class="headerlink" title="按地址传递"></a>按地址传递</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*java中关于方法调用时参数传递实际上只有一个规则：不管你是基本数据类型，还是引用数据类型，实际上在传递的时候都是将变量中保存的那个“值”复制一份，传过去。int x = 1;int y = x; 把x中保存1复制一份传给yx和y都是两个局部变量。Person p1 = 0x1234;Person p2 = p1; 把p1中保存的0x1234复制一份传给p2p1和p2都是两个局部变量。*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main--->"</span> <span class="token operator">+</span> p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//11</span><span class="token punctuation">&#125;</span><span class="token comment">// 方法的参数可以是基本数据类型，也可以是引用数据类型，只要是合法的数据类型就行。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Person</span> p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// p是add方法的局部变量。</span>p<span class="token punctuation">.</span>age<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add--->"</span> <span class="token operator">+</span> p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//11</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token comment">// 成员变量中的实例变量。</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-de-can-shu-chuan-di/java-de-can-shu-chuan-di/%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%922.png" alt="参数传递2"></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的对象和引用</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-de-dui-xiang-he-yin-yong/java-de-dui-xiang-he-yin-yong/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-de-dui-xiang-he-yin-yong/java-de-dui-xiang-he-yin-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="JAVA的对象和引"><a href="#JAVA的对象和引" class="headerlink" title="JAVA的对象和引"></a>JAVA的对象和引</h3><p>类&#x3D;属性+方法</p><h4 id="java的数据类型包括两种："><a href="#java的数据类型包括两种：" class="headerlink" title="java的数据类型包括两种："></a>java的数据类型包括两种：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">基本数据类型：<span class="token keyword">byte</span> <span class="token keyword">short</span> <span class="token keyword">int</span> <span class="token keyword">long</span> <span class="token keyword">float</span> <span class="token keyword">double</span> <span class="token keyword">boolean</span> <span class="token keyword">char</span>引用数据类型：<span class="token class-name">String</span>、<span class="token class-name">XueSheng</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>java中所有的“类”都属于引用数据类型。</p><h4 id="引用和对象怎么区分？"><a href="#引用和对象怎么区分？" class="headerlink" title="引用和对象怎么区分？"></a>引用和对象怎么区分？</h4><p>​    “引用”是啥？是存储对象内存地址的一个变量。<br>​    “对象”是啥？堆里new出来的。</p><p>​    通俗一点：<br>​    只要这个变量中保存的是一个对象的内存地址，那么这个变量就叫做“引用”。</p><p>​    思考：<br>​        引用一定是局部变量吗？不一定。</p><h4 id="什么是实例变量？"><a href="#什么是实例变量？" class="headerlink" title="什么是实例变量？"></a>什么是实例变量？</h4><p>​    对象又被称为实例。<br>​    实例变量实际上就是：对象级别的变量。</p><h6 id="XueSheng类的声明"><a href="#XueSheng类的声明" class="headerlink" title="XueSheng类的声明"></a>XueSheng类的声明</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*变量有一个特点：必须先声明，再赋值，才能访问。成员变量可以不手动赋值,系统可以为其自动分配值，都是0或者NULL*/</span><span class="token comment">//XueSheng既是一个类名，同时又是一个“类型名”，属于引用数据类型。</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XueSheng</span><span class="token punctuation">&#123;</span> <span class="token comment">// 这个程序编译之后，会生成XueSheng.class字节码文件。</span><span class="token comment">// 属性,成员变量</span><span class="token keyword">int</span> xueHao<span class="token punctuation">;</span><span class="token class-name">String</span> xingMing<span class="token punctuation">;</span><span class="token keyword">int</span> nianLing<span class="token punctuation">;</span><span class="token keyword">boolean</span> xingBie<span class="token punctuation">;</span><span class="token class-name">String</span> zhuZhi<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h6><p>类是模板，通过一个类，是可以创建N多个对象的。new是一个运算符。专门负责对象的创建。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*对于int i = 100;来说i是变量名int是变量的数据类型100是具体的数据。对于XueSheng s1 = new XueSheng();来说s1是变量名（s1不能叫做对象。s1只是一个变量名字。）XueSheng是变量s1的数据类型（引用数据类型）new XueSheng() 这是一个对象。（学生类创建出来的学生对象。）*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XueShengTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">XueSheng</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XueSheng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 和 int i = 10;一个道理。</span><span class="token comment">// 再通过该类创建一个全新的对象</span><span class="token class-name">XueSheng</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XueSheng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 再创建另一个对象</span><span class="token class-name">XueSheng</span> xsh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XueSheng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 以上的3行代码就相当于通过XueSheng类实例化了3个XueSheng对象。</span><span class="token comment">// 创建对象的个数没有限制，可以随意。只要有模板类就行。</span><span class="token comment">// 3个对象都属于学生类型。</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-de-dui-xiang-he-yin-yong/java-de-dui-xiang-he-yin-yong/%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%BC%95%E7%94%A8.png" alt="对象和引用"></p><h4 id="对象的创建进阶"><a href="#对象的创建进阶" class="headerlink" title="对象的创建进阶"></a>对象的创建进阶</h4><p>基础User类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span><span class="token comment">// 访问id不能这样：User.id （这是错误的，实例变量不能用类名访问。）</span><span class="token comment">// id的访问必须先造对象，然后对象有了，才能访问对象的id</span><span class="token keyword">int</span> id<span class="token punctuation">;</span> <span class="token comment">//成员变量，实例变量（对象变量，一个对象一份。）</span><span class="token class-name">String</span> username<span class="token punctuation">;</span> <span class="token comment">// 成员变量可以不手动赋值，系统赋默认值。</span><span class="token class-name">String</span> password<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// byte short int long float double boolean char :这些默认值是0，false也是0</span><span class="token comment">// 引用类型：null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>UserTest类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 第一步：类加载</span><span class="token comment">// 第二步：调用UserTest类的main方法（方法调用要压栈。）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTest</span><span class="token punctuation">&#123;</span><span class="token comment">// 方法体外声明的变量叫做成员变量。</span><span class="token comment">//User u1; //成员变量。（实例变量）</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 方法体当中声明的变量叫做局部变量</span><span class="token class-name">User</span> u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 实例变量怎么访问（属性怎么访问）？语法是：“引用.属性名”</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//null</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//null</span>u1<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">11111</span><span class="token punctuation">;</span>u1<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span>u1<span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> u2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>u2<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">22222</span><span class="token punctuation">;</span>u2<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">"lisi"</span><span class="token punctuation">;</span>u2<span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token string">"456"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u2<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u2<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u2<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-de-dui-xiang-he-yin-yong/java-de-dui-xiang-he-yin-yong/%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="程序执行内存图"></p><h4 id="对象嵌套的进阶-自定义类型"><a href="#对象嵌套的进阶-自定义类型" class="headerlink" title="对象嵌套的进阶(自定义类型)"></a>对象嵌套的进阶(自定义类型)</h4><p>Address类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> city<span class="token punctuation">;</span> <span class="token comment">// 实例变量</span><span class="token class-name">String</span> street<span class="token punctuation">;</span><span class="token class-name">String</span> zipcode<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>User类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span><span class="token comment">// 类=属性+方法</span><span class="token comment">// 以下3个都是属性，都是实例变量。（对象变量。）</span><span class="token keyword">int</span> id<span class="token punctuation">;</span> <span class="token comment">// 实例变量</span><span class="token class-name">String</span> username<span class="token punctuation">;</span> <span class="token comment">// 实例变量,String是一种引用数据类型</span><span class="token comment">// Address是一种引用数据类型</span><span class="token comment">// addr是成员变量并且还是一个实例变量</span><span class="token comment">// addr是否是一个引用呢？是。addr是一个引用。</span><span class="token class-name">Address</span> addr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">// 实例变量都存储在哪里？实例变量都在堆内存的对象内部。</span><span class="token comment">// 方法体外，类体内定义的变量叫做：成员变量。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Test类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*User u = new User();u是引用。*/</span><span class="token comment">//System.out.println(User.id);</span>        <span class="token comment">//报错了。id是实例变量，必须先创建对象，通过“引用.”的方式访问。</span><span class="token comment">/*int i = 100;int j = i; // 原理：会将i中保存的100复制一份，传给j变量。*/</span><span class="token comment">// 家庭住址对象</span><span class="token class-name">Address</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>city <span class="token operator">=</span> <span class="token string">"北京"</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>street <span class="token operator">=</span> <span class="token string">"大兴区"</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>zipcode <span class="token operator">=</span> <span class="token string">"121221"</span><span class="token punctuation">;</span><span class="token comment">// 用户对象</span><span class="token class-name">User</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>u<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">11111</span><span class="token punctuation">;</span>u<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span>u<span class="token punctuation">.</span>addr <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment">// 思考一个问题：</span><span class="token comment">// 我想直到zhangsan他是哪个城市的，代码应该怎么写？</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>username <span class="token operator">+</span> <span class="token string">"是"</span><span class="token operator">+</span>u<span class="token punctuation">.</span>addr<span class="token punctuation">.</span>city<span class="token operator">+</span><span class="token string">"城市的！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// u.addr.city 这行代码可否拆分呢？u.addr.city 节省变量。</span><span class="token comment">// 拆分成以下代码和以上效果完全相同，原理完全相同，不同的是以下代码多了两个变量。</span><span class="token class-name">Address</span> ad <span class="token operator">=</span> u<span class="token punctuation">.</span>addr<span class="token punctuation">;</span><span class="token class-name">String</span> zhuZhi <span class="token operator">=</span> ad<span class="token punctuation">.</span>city<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zhuZhi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-----------------------是否理解以下代码---------------------------</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">// = 代表赋值运算，“赋值”中有一个“值”</span><span class="token comment">// x变量中的值是100. 将100复制一份给y</span><span class="token comment">// 表示：将x变量中保存的值100复制一份给y</span><span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token comment">//-----------------------是否理解以下代码---------------------------</span><span class="token class-name">Address</span> k <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Address k = 0x1111;</span><span class="token class-name">Address</span> m <span class="token operator">=</span> k<span class="token punctuation">;</span> <span class="token comment">// 这里表示将k变量中保存的0x1111复制了一份传给了m变量。</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-de-dui-xiang-he-yin-yong/java-de-dui-xiang-he-yin-yong/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="自定义类型内存图"></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的封装</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-de-feng-zhuang/java-de-feng-zhuang/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-de-feng-zhuang/java-de-feng-zhuang/</url>
      
        <content type="html"><![CDATA[<h3 id="JAVA的封装"><a href="#JAVA的封装" class="headerlink" title="JAVA的封装"></a>JAVA的封装</h3><p>类 &#x3D; 属性 + 方法<br>属性描述状态<br>方法描述行为动作</p><h4 id="不带static关键字"><a href="#不带static关键字" class="headerlink" title="不带static关键字"></a>不带static关键字</h4><p>对象被称为实例。<br>实例相关的有：实例变量(对象变量)、实例方法（对象方法，对象级别的方法，应该是一个对象级别的行为）。方法模拟的是对象的行为动作。<br>实例变量是对象变量。实例方法是对象方法。<br>实例相关的都需要先new对象，通过“引用.”的方式去访问。</p><h4 id="带static关键字"><a href="#带static关键字" class="headerlink" title="带static关键字"></a>带static关键字</h4><p>带有static的方法怎么调用？通过“类名.”的方式访问。类名. 可以省略（在同一个类中。）</p><h4 id="封装的实现"><a href="#封装的实现" class="headerlink" title="封装的实现"></a>封装的实现</h4><ul><li>怎么进行封装，代码怎么实现？<br>    第一步：属性私有化（使用private关键字进行修饰。）private 表示私有的，被这个关键字修饰之后，该数据只能在本类中访问。出了这个类，属性就无法访问了。私有的。<br>      第二步：对外提供简单的操作入口。即1个属性对外提供两个set和get方法。外部程序只能通过set方法修改，只能通过get方法读取，可以在set方法中设立关卡来保证数据的安全性。</li></ul><p>要想访问被private修饰的属性，需要对外提供方法；例如get和set方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">写一个方法专门来完成读。<span class="token punctuation">(</span>get<span class="token punctuation">)</span>写一个方法专门来完成写。<span class="token punctuation">(</span>set<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>set和get方法都是实例方法，不能带static。实例方法的调用必须先new对象。</p><h4 id="set和get方法书写规范："><a href="#set和get方法书写规范：" class="headerlink" title="set和get方法书写规范："></a>set和get方法书写规范：</h4><ul><li>set方法长这个样子：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> set<span class="token operator">+</span>属性名首字母大写<span class="token punctuation">(</span><span class="token number">1</span>个参数<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>xxx <span class="token operator">=</span> <span class="token number">1</span>个参数<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>get方法长这个样子：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> 返回值类型 get<span class="token operator">+</span>属性名首字母大写<span class="token punctuation">(</span>无参<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> xxx<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>static关键字<br>    2.1、static修饰的统一都是静态的，都是类相关的，不需要new对象。直接采用“类名.”访问。<br>    2.2、当一个属性是类级别的属性，所有对象的这个属性的值是一样的，建议定义为静态变量。</p><p>通过“类名.”可以调用set和get方法吗？不行。<br> 只有方法修饰符列表中有static的时候，才能使用“类名.”的方式访问，因为是实例方法。</p><h4 id="空指针异常"><a href="#空指针异常" class="headerlink" title="空指针异常"></a>空指针异常</h4><p>空指针异常导致的最本质的原因是？空引用访问“实例相关的数据”，会出现空指针异常。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java构造方法</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-de-gou-zao-fang-fa/java-de-gou-zao-fang-fa/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-de-gou-zao-fang-fa/java-de-gou-zao-fang-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="JAVA的构造方法"><a href="#JAVA的构造方法" class="headerlink" title="JAVA的构造方法"></a>JAVA的构造方法</h3><p><strong>无论是什么方法只要调用都会在栈中进行压栈。</strong></p><p>构造方法对应的英语单词：Constructor【构造器】<br>构造方法作用：<br>        创建对象，并且创建对象的过程中给属性赋值（初始化。）</p><p>当一个类中没有提供任何构造方法，系统默认提供一个无参数的构造方法。这个无参数的构造方法叫做缺省构造器。</p><p>当一个类中手动的提供了构造方法，那么系统将不再默认提供无参数构造方法。建议将无参数构造方法手动的写出来</p><p>无参数构造方法和有参数的构造方法都可以调用。</p><p>构造方法是支持方法重载的。在一个类当中构造方法可以有多个。并且所有的构造方法名字都是一样的。</p><p>方法重载特点：在同一个类中，方法名相同，参数列表不同。</p><p>对于实例变量来说，只要你在构造方法中没有手动给它赋值，统一都会默认赋值。默认赋系统值。</p><p>实例变量没有手动赋值的时候，实际上系统会默认赋值，实例变量是在构造方法执行的过程中完成初始化的，完成赋值的。</p><ul><li><p>什么是构造方法，有什么用？<br>    构造方法是一个比较特殊的方法，通过构造方法可以完成对象的创建，以及实例变量的初始化。换句话说：构造方法是用来创建对象，并且同时给对象的属性赋值。（注意：实例变量没有手动赋值的时候，系统会赋默认值。）</p></li><li><p>调用构造方法怎么调用呢？</p><p>​        使用new运算符来调用构造方法。<br>​                语法格式：<br>​                    new 构造方法名(实际参数列表);</p></li><li><p>构造方法的语法结构是？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符列表<span class="token punctuation">]</span> 构造方法名<span class="token punctuation">(</span>形式参数列表<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>构造方法体<span class="token punctuation">;</span>通常在构造方法体当中给属性赋值，完成属性的初始化。<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstructorTest01</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 调用Student类的无参数构造方法，由于该方法没有创建引用所以在调用完后就会被当作垃圾回收了</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建Student类型的对象</span><span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出“引用”</span><span class="token comment">//只要输出结果不是null，说明这个对象一定是创建完成了。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Student@54bedef2</span><span class="token comment">// 这是调用另一个有参数的构造方法。</span><span class="token class-name">Student</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Student@5caf905d</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java垃圾回收机制</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-kong-zhi-zhen-yi-chang/java-kong-zhi-zhen-yi-chang/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-kong-zhi-zhen-yi-chang/java-kong-zhi-zhen-yi-chang/</url>
      
        <content type="html"><![CDATA[<h3 id="JAVA空指针异常"><a href="#JAVA空指针异常" class="headerlink" title="JAVA空指针异常"></a>JAVA空指针异常</h3><h4 id="关于垃圾回收器：GC"><a href="#关于垃圾回收器：GC" class="headerlink" title="关于垃圾回收器：GC"></a>关于垃圾回收器：GC</h4><p>​    在java语言中，垃圾回收器主要针对的是堆内存。当一个java对象没有任何引用指向该对象的时候，GC会考虑将该垃圾数据释放回收掉。</p><h4 id="空指针异常。（NullPointerException）"><a href="#空指针异常。（NullPointerException）" class="headerlink" title="空指针异常。（NullPointerException）"></a>空指针异常。（NullPointerException）</h4><p>出现空指针异常的前提条件是？<br>    “空引用”访问实例【对象相关】相关的数据时，都会出现空指针异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NullPointerTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 创建客户对象</span><span class="token class-name">Customer</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 访问这个客户的id</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span class="token comment">// 重新给id赋值</span>c<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">9521</span><span class="token punctuation">;</span> <span class="token comment">// 终身代号</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户的id是="</span> <span class="token operator">+</span> c<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>c <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// NullPointerException</span><span class="token comment">// 编译器没问题，因为编译器只检查语法，编译器发现c是Customer类型，</span><span class="token comment">// Customer类型中有id属性，所以可以：c.id。语法过了。</span><span class="token comment">// 但是运行的时候需要对象的存在，但是对象没了，尴尬了，就只能出现一个异常。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Customer</span><span class="token punctuation">&#123;</span><span class="token comment">// 客户id</span><span class="token keyword">int</span> id<span class="token punctuation">;</span> <span class="token comment">// 成员变量中的实例变量，应该先创建对象，然后通过“引用.”的方式访问。</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-kong-zhi-zhen-yi-chang/java-kong-zhi-zhen-yi-chang/%E7%A9%BA%E6%8C%87%E9%92%88%E5%BC%82%E5%B8%B8.png" alt="空指针异常"></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的递归</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-de-di-gui/java-de-di-gui/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-de-di-gui/java-de-di-gui/</url>
      
        <content type="html"><![CDATA[<h3 id="Java的递归"><a href="#Java的递归" class="headerlink" title="Java的递归"></a>Java的递归</h3><ul><li>方法自己调用自己，这就是方法递归。所以：递归必须要有结束条件。</li></ul><p>当递归时程序没有结束条件，一定会发生：</p><pre class="line-numbers language-none"><code class="language-none">栈内存溢出错误：StackOverflowError所以：递归必须要有结束条件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>JVM发生错误之后只有一个结果，就是退出JVM。</p></li><li><p>递归假设是有结束条件的，就一定不会发生栈内存溢出错误吗？        </p><pre class="line-numbers language-none"><code class="language-none">假设这个结束条件是对的，是合法的，递归有的时候也会出现栈内存溢出错误。因为有可能递归的太深，栈内存不够了。因为一直在压栈。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>在实际的开发中，不建议轻易的选择递归，能用for循环while循环代替的，尽量使用循环来做。因为循环的效率高，耗费的内存少。递归耗费的内存比较大，另外递归的使用不当，会导致JVM死掉。(但在极少数的情况下，不用递归，这个程序没法实现。)</p><ul><li>在实际的开发中，假设有一天你真正的遇到了：StackOverflowError<br>解决问题的思路：<br>        首先第一步：<br>            先检查递归的结束条件对不对。如果递归结束条件不对，必须对条件进一步修改，直到正确为止。<br>​            第二步：假设递归条件没问题，怎么办？<br>​                这个时候需要手动的调整JVM的栈内存初始化大小。可以将栈内存的空间调大点。（可以调整大一些。）<br>​            第三步：调整了大小，如果运行时还是出现这个错误，<br>​                没办法，只能继续扩大栈的内存大小。(java -X)这个可以查看调整堆栈大小的参数</li></ul><h4 id="递归的代码"><a href="#递归的代码" class="headerlink" title="递归的代码"></a>递归的代码</h4><h5 id="栈溢出错误"><a href="#栈溢出错误" class="headerlink" title="栈溢出错误"></a>栈溢出错误</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">dosome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">dosome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dosome begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">dosome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dosome end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>递归没有结束条件的时候会发生栈内存溢出错误</p><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-de-di-gui/java-de-di-gui/%E9%80%92%E5%BD%92%E6%B2%A1%E6%9C%89%E7%BB%93%E6%9D%9F%E6%9D%A1%E4%BB%B6%E7%9A%84%E6%97%B6%E5%80%99%E4%BC%9A%E5%8F%91%E7%94%9F%E6%A0%88%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E9%94%99%E8%AF%AF.png" alt="005-递归没有结束条件的时候会发生栈内存溢出错误"></p><h5 id="不使用递归计算1-n的和"><a href="#不使用递归计算1-n的和" class="headerlink" title="不使用递归计算1-n的和"></a>不使用递归计算1-n的和</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Scanner</span> sc <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个数字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> input <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1-"</span><span class="token operator">+</span>input<span class="token operator">+</span><span class="token string">"的和是："</span><span class="token operator">+</span><span class="token function">sum</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> result<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>result<span class="token operator">+=</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="使用递归计算1-n的和"><a href="#使用递归计算1-n的和" class="headerlink" title="使用递归计算1-n的和"></a>使用递归计算1-n的和</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Scanner</span> sc <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个数字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> input <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1-"</span><span class="token operator">+</span>input<span class="token operator">+</span><span class="token string">"的和是："</span><span class="token operator">+</span><span class="token function">sum</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> num<span class="token operator">+</span><span class="token function">sum</span><span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>递归原理</p><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-de-di-gui/java-de-di-gui/%E9%80%92%E5%BD%92%E5%8E%9F%E7%90%86.png" alt="004-递归原理"></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的三大变量</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-zhong-de-san-da-bian-liang/java-zhong-de-san-da-bian-liang/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-zhong-de-san-da-bian-liang/java-zhong-de-san-da-bian-liang/</url>
      
        <content type="html"><![CDATA[<h3 id="java中的三大变量"><a href="#java中的三大变量" class="headerlink" title="java中的三大变量"></a>java中的三大变量</h3><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/java-zhong-de-san-da-bian-liang/java-zhong-de-san-da-bian-liang/java%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E5%8F%98%E9%87%8F.png" alt="java中的三大变量"></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的Static关键字</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/static/static/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/static/static/</url>
      
        <content type="html"><![CDATA[<h3 id="Static关键字"><a href="#Static关键字" class="headerlink" title="Static关键字"></a>Static关键字</h3><h4 id="变量的分类："><a href="#变量的分类：" class="headerlink" title="变量的分类："></a>变量的分类：</h4><ol><li>​    变量根据声明的位置进行划分：<br>​        在方法体当中声明的变量叫做：局部变量。<br>​        在方法体外声明的变量叫做：成员变量。</li><li>​    成员变量又可以分为：<br>​        实例变量：实例的，都是对象相关的，访问时采用“引用.”的方式访问。需要先new对象。必须先有对象，才能访问，可能会出现空指针异常。<br>​        静态变量(类级别的变量)：都是类相关的，访问时采用“类名.”的方式访问。不需要new对象。不需要对象的参与即可访问。没有空指针异常的发生。</li></ol><h4 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h4><ol><li><p>static翻译为“静态”</p></li><li><p>所有static关键字修饰的都是类相关的，类级别的。</p></li><li><p>所有static修饰的，都是采用“类名.”的方式访问。</p></li><li><p>static修饰的变量：静态变量</p></li><li><p>static修饰的方法：静态方法</p></li><li><p>static修饰的统一都是静态的，都是类相关的，不需要new对象。直接采用“类名.”访问。在本类中可以直接调用方法名来访问。</p></li><li><p>当一个属性是类级别的属性，所有对象的这个属性的值是一样的，建议定义为静态变量。</p></li></ol><h5 id="什么时候变量声明为实例的，什么时候声明为静态的？"><a href="#什么时候变量声明为实例的，什么时候声明为静态的？" class="headerlink" title="什么时候变量声明为实例的，什么时候声明为静态的？"></a>什么时候变量声明为实例的，什么时候声明为静态的？</h5><p>​    如果这个类型的所有对象的某个属性值都是一样的，不建议定义为实例变量，浪费内存空间。建议定义为类级别特征，定义为静态变量，在方法区中只保留一份，节省内存开销。</p><p>​    一个对象一份的是实例变量。所有对象一份的是静态变量。</p><h5 id="不用static的代码，实例变量"><a href="#不用static的代码，实例变量" class="headerlink" title="不用static的代码，实例变量"></a>不用static的代码，实例变量</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticTest02</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Chinese</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chinese</span><span class="token punctuation">(</span><span class="token string">"1231456456456456"</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"中国"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>idCard<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>country<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Chinese</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chinese</span><span class="token punctuation">(</span><span class="token string">"7897897896748564"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"中国"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span>idCard<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span>country<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义一个类：中国人</span><span class="token keyword">class</span> <span class="token class-name">Chinese</span><span class="token punctuation">&#123;</span><span class="token comment">// 身份证号</span><span class="token comment">// 每一个人的身份证号不同，所以身份证号应该是实例变量，一个对象一份。</span><span class="token class-name">String</span> idCard<span class="token punctuation">;</span> <span class="token comment">// 姓名</span><span class="token comment">// 姓名也是一个人一个姓名，姓名也应该是实例变量。</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">// 国籍</span><span class="token comment">// 对于“中国人”这个类来说，国籍都是“中国”，不会随着对象的改变而改变。</span><span class="token comment">// 显然国籍并不是对象级别的特征。</span><span class="token comment">// 国籍属于整个类的特征。整个族的特征。</span><span class="token class-name">String</span> country<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Chinese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Chinese</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span><span class="token class-name">String</span> s2<span class="token punctuation">,</span> <span class="token class-name">String</span> s3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>idCard <span class="token operator">=</span> s1<span class="token punctuation">;</span>name <span class="token operator">=</span> s2<span class="token punctuation">;</span>country <span class="token operator">=</span> s3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/static/static/%E5%8F%98%E9%87%8F%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E5%A3%B0%E6%98%8E%E4%B8%BA%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F.png" alt="变量什么时候声明为静态变量"></p><h5 id="用static的代码，静态的变量"><a href="#用static的代码，静态的变量" class="headerlink" title="用static的代码，静态的变量"></a>用static的代码，静态的变量</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticTest02</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 访问中国人的国籍</span><span class="token comment">// 静态变量应该使用类名.的方式访问</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Chinese</span><span class="token punctuation">.</span>country<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Chinese</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chinese</span><span class="token punctuation">(</span><span class="token string">"1231456456456456"</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>idCard<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Chinese</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chinese</span><span class="token punctuation">(</span><span class="token string">"7897897896748564"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span>idCard<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//System.out.println(Chinese.idCard);错误: 无法从静态上下文中引用非静态 变量 idCard</span><span class="token comment">// idCard是实例变量，必须先new对象，通过“引用.” 访问</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义一个类：中国人</span><span class="token keyword">class</span> <span class="token class-name">Chinese</span><span class="token punctuation">&#123;</span><span class="token comment">// 身份证号</span><span class="token comment">// 每一个人的身份证号不同，所以身份证号应该是实例变量，一个对象一份。</span><span class="token class-name">String</span> idCard<span class="token punctuation">;</span> <span class="token comment">// 姓名</span><span class="token comment">// 姓名也是一个人一个姓名，姓名也应该是实例变量。</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">// 国籍</span><span class="token comment">// 重点重点五颗星：加static的变量叫做静态变量</span><span class="token comment">// 静态变量在类加载时初始化，不需要new对象，静态变量的空间就开出来了。</span><span class="token comment">// 静态变量存储在方法区。一般会给一个默认值。</span><span class="token keyword">static</span> <span class="token class-name">String</span> country <span class="token operator">=</span> <span class="token string">"中国"</span><span class="token punctuation">;</span><span class="token comment">// 无参数</span><span class="token keyword">public</span> <span class="token class-name">Chinese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 有参数</span><span class="token keyword">public</span> <span class="token class-name">Chinese</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span><span class="token class-name">String</span> s2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>idCard <span class="token operator">=</span> s1<span class="token punctuation">;</span>name <span class="token operator">=</span> s2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/static/static/%E5%8F%98%E9%87%8F%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E5%A3%B0%E6%98%8E%E4%B8%BA%E9%9D%99%E6%80%81%E7%9A%842.png" alt="变量什么时候声明为静态的2"></p><h4 id="空引用访问静态不会空指针"><a href="#空引用访问静态不会空指针" class="headerlink" title="空引用访问静态不会空指针"></a>空引用访问静态不会空指针</h4><ol><li>实例的：<br>一定需要使用“引用.”来访问。</li><li>静态的：<br>建议使用“类名.”来访问，但使用“引用.”也行（不建议使用”引用.”）。<br>静态的如果使用“引用.”来访问会让程序员产生困惑：程序员以为是实例的呢。</li><li>结论：<br>空指针异常只有在什么情况下才会发生呢?<br>    只有在“空引用”访问“实例”相关的，都会出现空指针异常。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticTest03</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 通过"类名."的方式访问静态变量</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Chinese</span><span class="token punctuation">.</span>country<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建对象</span><span class="token class-name">Chinese</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chinese</span><span class="token punctuation">(</span><span class="token string">"1111111"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>idCard<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1111111</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 张三</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>country<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 中国</span><span class="token comment">// c1是空引用</span>c1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// 分析这里会不会出现空指针异常？</span><span class="token comment">// 不会出现空指针异常。</span><span class="token comment">// 因为静态变量不需要对象的存在。</span><span class="token comment">// 实际上以下的代码在运行的时候，还是：System.out.println(Chinese.country);</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>country<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这个会出现空指针异常，因为name是实例变量。</span><span class="token comment">//System.out.println(c1.name);</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Chinese</span><span class="token punctuation">&#123;</span><span class="token comment">// 实例变量</span><span class="token class-name">String</span> idCard<span class="token punctuation">;</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">// 静态变量</span><span class="token keyword">static</span> <span class="token class-name">String</span> country <span class="token operator">=</span> <span class="token string">"中国"</span><span class="token punctuation">;</span><span class="token comment">//构造方法</span><span class="token keyword">public</span> <span class="token class-name">Chinese</span><span class="token punctuation">(</span><span class="token class-name">String</span> x<span class="token punctuation">,</span> <span class="token class-name">String</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>idCard <span class="token operator">=</span> x<span class="token punctuation">;</span>name <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h4><p>使用static关键字可以定义：静态代码块<br>什么是静态代码块，语法是什么？    </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token punctuation">&#123;</span>java语句<span class="token punctuation">;</span>java语句<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>static静态代码块在什么时候执行呢？类加载时执行。并且只执行一次。</p><h6 id="静态代码块有这样的特征-x2F-特点。"><a href="#静态代码块有这样的特征-x2F-特点。" class="headerlink" title="静态代码块有这样的特征&#x2F;特点。"></a>静态代码块有这样的特征&#x2F;特点。</h6><p>注意：</p><p>静态代码块在类加载时执行，并且在main方法执行之前执行。</p><p>静态代码块一般是按照自上而下的顺序执行。</p><p>静态代码块有啥作用，有什么用？<br>    第一：静态代码块不是那么常用。（不是每一个类当中都要写的东西。）<br>    第二：静态代码块这种语法机制是一个特殊的时刻&#x2F;时机。<br>    这个时机叫做：类加载时机。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaTest</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 静态代码块（特殊的时机：类加载时机。）</span>    <span class="token comment">// 一个类当中可以编写多个静态代码块</span>    <span class="token comment">// 编写一个静态代码块</span><span class="token keyword">static</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Static begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Static end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*Static beginStatic endmain begin*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>静态代码块</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*栈：方法只要执行，会压栈。（局部变量）堆：new出来的对象都在堆中。垃圾回收器主要针对。（实例变量）方法区：类的信息，字节码信息，代码片段。（静态变量）方法的代码片段放在方法区，但是方法执行过程当中需要的内存在栈中。*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticTest07</span><span class="token punctuation">&#123;</span><span class="token comment">// 静态变量在什么时候初始化？类加载时初始化。</span><span class="token comment">// 静态变量存储在哪里？方法区</span><span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">// 静态代码块什么时候执行？类加载时执行。</span><span class="token keyword">static</span> <span class="token punctuation">&#123;</span><span class="token comment">// 这里可以访问i吗？可以</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 实例变量</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">;</span> <span class="token comment">// k变量是实例变量，在构造方法执行时内存空间才会开辟。</span><span class="token keyword">static</span> <span class="token punctuation">&#123;</span><span class="token comment">//k变量可以访问吗？</span><span class="token comment">// static静态代码块在类加载时执行，并且只执行一次。</span><span class="token comment">// 类加载时，k变量空间还没有开辟出来呢。</span><span class="token comment">//错误: 无法从静态上下文中引用非静态 变量 k</span><span class="token comment">//System.out.println("k = " + k);</span><span class="token comment">// 这里可以访问name吗？</span><span class="token comment">//错误: 非法前向引用</span><span class="token comment">// 静态代码块和静态变量都在类加载的时候执行，时间相同，只能靠代码的顺序来决定谁先谁后。</span><span class="token comment">//System.out.println("name = " + name);</span><span class="token punctuation">&#125;</span><span class="token comment">// 静态变量在静态代码块下面。</span><span class="token keyword">static</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span><span class="token comment">//入口(main方法执行之前实际上执行了很多代码)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*总结：到目前为止，你遇到的所有java程序，有顺序要求的是哪些？第一：对于一个方法来说，方法体中的代码是有顺序的，遵循自上而下的顺序执行。第二：静态代码块1和静态代码块2是有先后顺序的。第三：静态代码块和静态变量是有先后顺序的。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实例代码块"><a href="#实例代码块" class="headerlink" title="实例代码块"></a>实例代码块</h4><p>除了静态代码块之外，还有一种语句块叫做：实例语句块<br><strong>实例语句语法？</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">&#123;</span>java语句<span class="token punctuation">;</span>java语句<span class="token punctuation">;</span>java语句<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例语句在类加载时并没有执行。</p><p>实例语句块在什么时候执行？<br>    只要是构造方法执行，必然在构造方法执行之前，自动执行“实例语句块”中的代码。<br>    实际上这也是一个特殊的时机，叫做对象构建时机。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstanceCode</span><span class="token punctuation">&#123;</span><span class="token comment">//入口</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">InstanceCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">InstanceCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">InstanceCode</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">InstanceCode</span><span class="token punctuation">(</span><span class="token string">"xyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//实例语句块</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实例语句块执行！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Constructor</span><span class="token keyword">public</span> <span class="token class-name">InstanceCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无参数构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Constructor</span><span class="token keyword">public</span> <span class="token class-name">InstanceCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有参数的构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码的执行顺序"><a href="#代码的执行顺序" class="headerlink" title="代码的执行顺序"></a>代码的执行顺序</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaTest</span><span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">JavaTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">JavaTest</span><span class="token punctuation">(</span><span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"G"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">JavaTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">JavaTest</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">static</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*ABCDEDFG*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的super关键字</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/super/super/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/super/super/</url>
      
        <content type="html"><![CDATA[<h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><p>super是一个关键字，全部小写。</p><h4 id="super和this对比着学习。"><a href="#super和this对比着学习。" class="headerlink" title="super和this对比着学习。"></a>super和this对比着学习。</h4><h5 id="this"><a href="#this" class="headerlink" title="this:"></a>this:</h5><ol><li><p>this能出现在实例方法和构造方法中。</p></li><li><p>this的语法是：“this.”、“this()”</p></li><li><p>this不能使用在静态方法中。</p></li><li><p>this. 大部分情况下是可以省略的。</p></li><li><p>this.什么时候不能省略呢？ 在区分局部变量和实例变量的时候不能省略。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>this() 只能出现在构造方法第一行，通过当前的构造方法去调用“本类”中其它的构造方法，目的是：代码复用。</p></li></ol><h5 id="super"><a href="#super" class="headerlink" title="super:"></a>super:</h5><h6 id="super的使用："><a href="#super的使用：" class="headerlink" title="super的使用："></a>super的使用：</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">super</span><span class="token punctuation">.</span>属性名 <span class="token comment">//访问父类的属性</span><span class="token keyword">super</span><span class="token punctuation">.</span>方法名<span class="token punctuation">(</span>实参<span class="token punctuation">)</span> <span class="token comment">//访问父类的方法</span><span class="token keyword">super</span><span class="token punctuation">(</span>实参<span class="token punctuation">)</span> <span class="token comment">//调用父类的构造方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li><p>super能出现在实例方法和构造方法中。</p></li><li><p>super的语法是：“super.”、“super()”</p></li><li><p>super不能使用在静态方法中。</p></li><li><p>super.大部分情况下是可以省略的。</p></li><li><p>super.什么时候不能省略呢？</p><p>父类和子类中有同名属性，或者说有同样的方法，想在子类中访问父类的，super. 不能省略。</p></li><li><p>super() 只能出现在构造方法第一行，通过当前的构造方法去调用“父类”中的构造方法，目的是：创建子类对象的时候，先初始化父类型特征。</p></li><li><p>super()表示通过子类的构造方法调用父类的构造方法。模拟现实世界中的这种场景：要想有儿子，需要先有父亲。</p></li></ol><h6 id="重要的结论："><a href="#重要的结论：" class="headerlink" title="重要的结论："></a>重要的结论：</h6><p>当一个构造方法第一行：既没有this()又没有super()的话，默认会有一个super();表示通过当前子类的构造方法调用父类的无参数构造方法。所以必须保证父类的无参数构造方法是存在的。</p><h6 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h6><ol><li>this()和super() 不能共存，它们都是只能出现在构造方法第一行。</li><li>无论是怎样折腾，父类的构造方法是一定会执行的。（百分百的。）</li><li>在java语言中不管是是new什么对象，最后老祖宗的Object类的无参数构造方法一定会执行。（Object类的无参数构造方法是处于“栈顶部”）</li><li>栈顶的特点：<br>​    最后调用，但是最先执行结束。<br>​    后进先出原则。</li><li>注意：<br>​    以后写代码的时候，一个类的无参数构造方法还是建议手动的写出来。<br>​    如果无参数构造方法丢失的话，可能会影响到“子类对象的构建”。</li></ol><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperStudy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建子类对象</span><span class="token comment">/*A类的无参数构造方法！B类的无参数构造方法！*/</span>        <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 建议手动的将一个类的无参数构造方法写出来。</span>    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//super(); // 这里也是默认有这一行代码的。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A类的无参数构造方法！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 一个类如果没有手动提供任何构造方法，系统会默认提供一个无参数构造方法。</span>    <span class="token comment">// 一个类如果手动提供了一个构造方法，那么无参数构造系统将不再提供。</span>    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A类的有参数构造方法(int)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B类的无参数构造方法！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 调用父类中有参数的构造方法</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">521</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B类的有参数构造方法(String)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*A类的有参数构造方法(int)B类的有参数构造方法(String)B类的无参数构造方法！*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="super关键字的的使用时机"><a href="#super关键字的的使用时机" class="headerlink" title="super关键字的的使用时机"></a>super关键字的的使用时机</h4><ol><li><p>举个例子：<br>​    在恰当的时间使用：super(实际参数列表);</p></li><li><p>注意：<br>​    在构造方法执行过程中一连串调用了父类的构造方法，<br>​    父类的构造方法又继续向下调用它的父类的构造方法，但是实际上对象只创建了一个。</p></li><li><p>思考：“super(实参)”到底是干啥的？<br>​    super(实参)的作用是：初始化当前对象的父类型特征。<br>​    并不是创建新对象。实际上对象只创建了1个。</p></li><li><p>super关键字代表什么呀？<br>​    super关键字代表的就是“当前对象”的那部分父类型特征。</p></li></ol><h5 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperStudy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CreditAccount</span> creditAccount1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreditAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>creditAccount1<span class="token punctuation">.</span><span class="token function">getActno</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>creditAccount1<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>creditAccount1<span class="token punctuation">.</span><span class="token function">getCredit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CreditAccount</span> creditAccount2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreditAccount</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">100.0</span><span class="token punctuation">,</span><span class="token number">0.99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>creditAccount2<span class="token punctuation">.</span><span class="token function">getActno</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>creditAccount2<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>creditAccount2<span class="token punctuation">.</span><span class="token function">getCredit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 账户</span><span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 属性</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> actno<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span>    <span class="token comment">// 构造方法</span>    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token class-name">String</span> actno<span class="token punctuation">,</span><span class="token keyword">double</span> balance<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>actno<span class="token operator">=</span>actno<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token operator">=</span>balance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getActno</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>actno<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setActno</span><span class="token punctuation">(</span><span class="token class-name">String</span> actno<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>actno <span class="token operator">=</span> actno<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token keyword">double</span> balance<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 信用账户</span><span class="token keyword">class</span> <span class="token class-name">CreditAccount</span> <span class="token keyword">extends</span> <span class="token class-name">Account</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 属性：信誉度（诚信值）</span>    <span class="token comment">// 子类特有的一个特征，父类没有。</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> credit<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CreditAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">CreditAccount</span><span class="token punctuation">(</span><span class="token class-name">String</span> actno<span class="token punctuation">,</span><span class="token keyword">double</span> balance<span class="token punctuation">,</span><span class="token keyword">double</span> credit<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>actno<span class="token punctuation">,</span> balance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>credit <span class="token operator">=</span> credit<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getCredit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>credit<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCredit</span><span class="token punctuation">(</span><span class="token keyword">double</span> credit<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>credit <span class="token operator">=</span> credit<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/super/super/super%E7%9A%84%E5%8E%9F%E7%90%86.png" alt="super的原理"></p><h4 id="super与this的区别"><a href="#super与this的区别" class="headerlink" title="super与this的区别"></a>super与this的区别</h4><h5 id="代码实例1"><a href="#代码实例1" class="headerlink" title="代码实例1"></a>代码实例1</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperTest04</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Vip</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vip</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">shopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Customer</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Vip</span> <span class="token keyword">extends</span> <span class="token class-name">Customer</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">Vip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Vip</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// super和this都不能出现在静态方法中。</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// this表示当前对象。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"正在购物!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// super表示的是当前对象的父类型特征。（super是this指向的那个对象中的一块空间。）</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"正在购物!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"正在购物!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/super/super/SuperTest04.png" alt="SuperTest04"></p><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/super/super/super%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E7%90%86%E8%A7%A3.png" alt="super关键字的理解"></p><h5 id="代码实例2"><a href="#代码实例2" class="headerlink" title="代码实例2"></a>代码实例2</h5><ol><li><p>“this.”和“super.”大部分情况下都是可以省略的。</p></li><li><p>this. 什么时候不能省略？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>super. 什么时候不能省略？<br>父中有，子中又有，如果想在子中访问“父的特征”，super. 不能省略。</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperTest05</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Vip</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vip</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">shopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" do some!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" do some!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//错误: 找不到符号</span><span class="token comment">//System.out.println(super.name + " do some!");</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Vip</span> <span class="token keyword">extends</span> <span class="token class-name">Customer</span><span class="token punctuation">&#123;</span><span class="token comment">// 假设子类也有一个同名属性</span><span class="token comment">// java中允许在子类中出现和父类一样的同名变量/同名属性。</span><span class="token class-name">String</span> name<span class="token punctuation">;</span> <span class="token comment">// 实例变量</span><span class="token keyword">public</span> <span class="token class-name">Vip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Vip</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// this.name = null;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*java是怎么来区分子类和父类的同名属性的？this.name：当前对象的name属性super.name：当前对象的父类型特征中的name属性。*/</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"正在购物!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null 正在购物</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"正在购物!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 张三正在购物</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"正在购物!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//null 正在购物</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/super/super/SuperTest05.png" alt="SuperTest05"></p><h4 id="super的实际意义"><a href="#super的实际意义" class="headerlink" title="super的实际意义"></a>super的实际意义</h4><p>通过这个测试得出的结论：<br>    super 不是引用。super也不保存内存地址，super也不指向任何对象。<br>    super 只是代表当前对象内部的那一块父类型的特征。</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class SuperTest06 &#123;&#x2F;&#x2F; 实例方法public void doSome()&#123;&#x2F;&#x2F; SuperTest06@2f92e0f4System.out.println(this);&#x2F;&#x2F; 输出“引用”的时候，会自动调用引用的toString()方法。&#x2F;&#x2F;System.out.println(this.toString());&#x2F;&#x2F;编译错误: 需要&#39;.&#39;&#x2F;&#x2F;System.out.println(super);&#125;&#x2F;&#x2F; this和super不能使用在static静态方法中。&#x2F;*public static void doOther()&#123;System.out.println(this);System.out.println(super.xxx);&#125;*&#x2F;&#x2F;&#x2F; 静态方法，主方法public static void main(String[] args)&#123;SuperTest06 st &#x3D; new SuperTest06();st.doSome();&#x2F;&#x2F; main方法是静态的&#x2F;&#x2F; 错误的。&#x2F;*System.out.println(this);System.out.println(super.xxxx);*&#x2F;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="super的访问"><a href="#super的访问" class="headerlink" title="super的访问"></a>super的访问</h4><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;*在父和子中有同名的属性，或者说有相同的方法，如果此时想在子类中访问父中的数据，必须使用“super.”加以区分。super.属性名    【访问父类的属性】super.方法名(实参) 【访问父类的方法】super(实参)  【调用父类的构造方法】*&#x2F;public class SuperTest07&#123;public static void main(String[] args)&#123;&#x2F;*Cat move!Cat move!Animal move!*&#x2F;Cat c &#x3D; new Cat();c.yiDong();&#125;&#125;class Animal&#123;public void move()&#123;System.out.println(&quot;Animal move!&quot;);&#125;&#125;class Cat extends Animal&#123;&#x2F;&#x2F; 对move进行重写。public void move()&#123;System.out.println(&quot;Cat move!&quot;);&#125;&#x2F;&#x2F; 单独编写一个子类特有的方法。public void yiDong()&#123;this.move();move();&#x2F;&#x2F; super. 不仅可以访问属性，也可以访问方法。super.move();&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的this关键字</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/this/this/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/this/this/</url>
      
        <content type="html"><![CDATA[<h3 id="This关键字"><a href="#This关键字" class="headerlink" title="This关键字"></a>This关键字</h3><h4 id="This基础"><a href="#This基础" class="headerlink" title="This基础"></a>This基础</h4><ol><li><p>this是一个关键字，是一个引用，是一个变量，保存内存地址指向自身。</p></li><li><p>this可以使用在实例方法中，也可以使用在构造方法中。</p></li><li><p>this出现在实例方法中其实代表的是当前对象。</p></li><li><p>this不能使用在静态方法中。因为静态方法是类级别的方法。</p></li><li><p>this. 大部分情况下可以省略，但是用来区分局部变量和实例变量的时候不能省略。</p></li><li><p>this() 这种语法只能出现在构造方法第一行，表示当前构造方法调用本类其他的构造方法，目的是代码复用。</p></li></ol><h4 id="This详解"><a href="#This详解" class="headerlink" title="This详解"></a>This详解</h4><ol><li><p>一个对象一个this。this是一个变量，是一个关键字，是一个引用。this保存当前对象的内存地址，指向自身。所以，严格意义上来说，this代表的就是“当前对象”，this存储在堆内存当中对象的内部。</p></li><li><p>this只能使用在实例方法中。谁调用这个实例方法，this就是谁。所以this代表的是：当前对象。</p></li><li><p>“this.”大部分情况下是可以省略的。</p></li><li><p>为什么this不能使用在静态方法中？？？？？？<br>this代表当前对象，静态方法中不存在当前对象。</p></li></ol><h5 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThisTest01</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Customer</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c1<span class="token punctuation">.</span><span class="token function">shopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Customer</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c2<span class="token punctuation">.</span><span class="token function">shopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Customer</span><span class="token punctuation">.</span><span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 顾客类</span><span class="token keyword">class</span> <span class="token class-name">Customer</span><span class="token punctuation">&#123;</span><span class="token comment">// 属性</span><span class="token comment">// 实例变量（必须采用“引用.”的方式访问）</span><span class="token class-name">String</span> name<span class="token punctuation">;</span>   <span class="token comment">//构造方法</span><span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>name <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 顾客购物的方法</span><span class="token comment">// 实例方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 这里的this是谁？this是当前对象。</span><span class="token comment">// c1调用shopping(),this是c1</span><span class="token comment">// c2调用shopping(),this是c2</span><span class="token comment">//System.out.println(this.name + "正在购物!");</span><span class="token comment">// this. 是可以省略的。</span><span class="token comment">// this. 省略的话，还是默认访问“当前对象”的name。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"正在购物!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 静态方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// this代表的是当前对象，而静态方法的调用不需要对象。矛盾了。</span><span class="token comment">// 错误: 无法从静态上下文中引用非静态 变量 this</span><span class="token comment">//System.out.println(this);</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span><span class="token comment">// 实例变量，怎么访问？必须先new对象，通过“引用.”来访问。</span><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span><span class="token comment">// 静态方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//System.out.println(name);</span><span class="token comment">// this代表的是当前对象。</span><span class="token comment">//System.out.println(this.name);</span><span class="token comment">// 除非你这样</span><span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//为什么set和get方法是实例方法？</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>name <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 什么时候方法定义为实例方法，什么时候定义为静态方法？</span><span class="token comment">// 如果方法中直接访问了实例变量，该方法必须是实例方法。</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/this/this/this%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="this关键字"></p><h5 id="实例变量的访问与静态变量的访问"><a href="#实例变量的访问与静态变量的访问" class="headerlink" title="实例变量的访问与静态变量的访问"></a>实例变量的访问与静态变量的访问</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThisTest02</span><span class="token punctuation">&#123;</span><span class="token comment">// 实例变量</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 这个i变量是不是必须先new对象才能访问。</span><span class="token comment">// 静态变量</span><span class="token keyword">static</span> <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">111</span><span class="token punctuation">;</span><span class="token comment">// 静态方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 错误: 无法从静态上下文中引用非静态 变量 i</span><span class="token comment">// System.out.println(i);</span><span class="token comment">// 怎么样访问i</span><span class="token class-name">ThisTest02</span> tt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThisTest02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 静态变量用“类名.”访问。</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ThisTest02</span><span class="token punctuation">.</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 类名. 能不能省略？</span><span class="token comment">// 可以</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="this的省略问题"><a href="#this的省略问题" class="headerlink" title="this的省略问题"></a>this的省略问题</h5><ol><li><p>this可以使用在实例方法中，不能使用在静态方法中。</p></li><li><p>this关键字大部分情况下可以省略，什么时候不能省略呢？<br>在实例方法中，或者构造方法中，为了区分局部变量和实例变量，这种情况下：this. 是不能省略的。</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThisTest03</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">setNo</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学号："</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名："</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Student</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">2222</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学号："</span> <span class="token operator">+</span> s2<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名："</span> <span class="token operator">+</span> s2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 分析一下：以下代码哪里写的不好。</span><span class="token comment">// 学生类</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span><span class="token comment">//学号</span><span class="token keyword">private</span> <span class="token keyword">int</span> no<span class="token punctuation">;</span><span class="token comment">//姓名</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">//构造方法无参</span><span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//构造方法有参</span><span class="token comment">/*public Student(int i, String s)&#123;no = i;name = s;&#125;*/</span><span class="token comment">// 上面的构造方法也增强以下可读性</span><span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// setter and getter方法</span><span class="token comment">/*public void setNo(int i)&#123;no = i;&#125;*/</span><span class="token comment">/*public void setNo(int no)&#123; // 就近原则。no = no; //这两个no都是局部变量no，和实例变量no没关系。&#125;*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNo</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//no是局部变量</span><span class="token comment">//this.no 是指的实例变量。</span><span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span> <span class="token comment">// this. 的作用是：区分局部变量和实例变量。</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> no<span class="token punctuation">;</span><span class="token comment">//return this.no;</span><span class="token punctuation">&#125;</span><span class="token comment">/*public void setName(String s)&#123;name = s;&#125;*/</span><span class="token comment">/*public void setName(String name)&#123; // 就近原则name = name; //这两个name都是局部变量name，和实例变量name没关系。&#125;*/</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*public String getName()&#123;return name;&#125;*/</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// getName实际上获取的是“当前对象”的名字。</span><span class="token comment">//return this.name; // 严格来说，这里是有一个 this. 的。只不过这个 this. 是可以省略的。</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="this在构造方法中的调用"><a href="#this在构造方法中的调用" class="headerlink" title="this在构造方法中的调用"></a>this在构造方法中的调用</h5><ol><li><p>this除了可以使用在实例方法中，还可以用在构造方法中</p></li><li><p>新语法：通过当前的构造方法去调用另一个本类的构造方法，可以使用以下语法格式：<br>this(实际参数列表);<br>通过一个构造方法1去调用构造方法2，可以做到代码复用。但需要注意的是：“构造方法1”和“构造方法2” 都是在同一个类当中。</p></li><li><p>this() 这个语法作用是什么？<br>代码复用。</p></li><li><p>对于this()的调用只能出现在构造方法的第一行。</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThisTest04</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 调用无参数构造方法</span><span class="token class-name">Date</span> d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d1<span class="token punctuation">.</span><span class="token function">detail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用有参数构造方法</span><span class="token class-name">Date</span> d2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2008</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d2<span class="token punctuation">.</span><span class="token function">detail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*需求：1、定义一个日期类，可以表示年月日信息。2、需求中要求：如果调用无参数构造方法，默认创建的日期为：1970年1月1日。当然，除了调用无参数构造方法之外，也可以调用有参数的构造方法来创建日期对象。*/</span><span class="token keyword">class</span> <span class="token class-name">Date</span><span class="token punctuation">&#123;</span> <span class="token comment">// 以后写代码都要封装，属性私有化，对外提供setter and getter</span><span class="token comment">//年</span><span class="token keyword">private</span> <span class="token keyword">int</span> year<span class="token punctuation">;</span><span class="token comment">//月</span><span class="token keyword">private</span> <span class="token keyword">int</span> month<span class="token punctuation">;</span><span class="token comment">//日</span><span class="token keyword">private</span> <span class="token keyword">int</span> day<span class="token punctuation">;</span><span class="token comment">// 构造方法无参</span><span class="token comment">// 调用无参数构造方法，初始化的日期是固定值。</span><span class="token keyword">public</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//错误: 对this的调用必须是构造器中的第一个语句</span><span class="token comment">//System.out.println(11);</span><span class="token comment">/*this.year = 1970;this.month = 1;this.day = 1;*/</span><span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">1970</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 构造方法有参数</span><span class="token keyword">public</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> day<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>month <span class="token operator">=</span> month<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>day <span class="token operator">=</span> day<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 提供一个可以打印日期的方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//System.out.println(year + "年" + month + "月" + day + "日");</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">+</span> <span class="token string">"年"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>month <span class="token operator">+</span> <span class="token string">"月"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>day <span class="token operator">+</span> <span class="token string">"日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//setter and getter</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setYear</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 设立关卡（有时间可以设立关卡）</span><span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> year<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMonth</span><span class="token punctuation">(</span><span class="token keyword">int</span> month<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 设立关卡（有时间可以设立关卡）</span><span class="token keyword">this</span><span class="token punctuation">.</span>month <span class="token operator">=</span> month<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> month<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDay</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 设立关卡（有时间可以设立关卡）</span><span class="token keyword">this</span><span class="token punctuation">.</span>day <span class="token operator">=</span> day<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> day<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码的实例"><a href="#代码的实例" class="headerlink" title="代码的实例"></a>代码的实例</h3><p>JavaStudy</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaStudy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Card</span> card <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Card</span><span class="token punctuation">(</span><span class="token string">"1000"</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">,</span><span class="token number">1.23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jane Smith"</span><span class="token punctuation">,</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">getCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"余额是"</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">getCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">960</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"余额是"</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">getCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>User</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Card</span> card<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">Card</span> card<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>card <span class="token operator">=</span> card<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCard</span><span class="token punctuation">(</span><span class="token class-name">Card</span> card<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>card <span class="token operator">=</span> card<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Card</span> <span class="token function">getCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>card<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Card</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Card</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> annualInterestRate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Card</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Card</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">,</span><span class="token keyword">double</span> balance <span class="token punctuation">,</span><span class="token keyword">double</span> annualInterestRate<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token operator">=</span>id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>annualInterestRate <span class="token operator">=</span> annualInterestRate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token keyword">double</span> balance<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token operator">=</span>balance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAnnualInterestRate</span><span class="token punctuation">(</span><span class="token keyword">float</span> annualInterestRate<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>annualInterestRate <span class="token operator">=</span> annualInterestRate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getAnnualInterestRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>annualInterestRate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token operator">&lt;</span>money<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"余额不足，取钱失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//this.balance -=money;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功取出"</span><span class="token operator">+</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//this.balance+=money;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"成功存入"</span><span class="token operator">+</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的多态</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/duo-tai/duo-tai/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/duo-tai/duo-tai/</url>
      
        <content type="html"><![CDATA[<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><h4 id="Java中可以使用-的情况"><a href="#Java中可以使用-的情况" class="headerlink" title="Java中可以使用.的情况"></a>Java中可以使用.的情况</h4><p>java中只有“类名”或者“引用”才能去“点”，类名.，引用.，万变不离其宗，只要你想“点”，“点”前面要么是一个类名，要么是一个引用。</p><h4 id="什么是多态。"><a href="#什么是多态。" class="headerlink" title="什么是多态。"></a>什么是多态。</h4><ol><li><p>父类型引用指向子类型对象。</p></li><li><p>多种形态，多种状态，编译和运行有两个不同的状态。</p></li><li><p>包括编译阶段和运行阶段。<br>编译阶段：绑定父类的方法。叫做静态绑定<br>运行阶段：动态绑定子类型对象的方法。叫做动态绑定</p></li></ol><h4 id="多态的基础语法："><a href="#多态的基础语法：" class="headerlink" title="多态的基础语法："></a>多态的基础语法：</h4><ol><li><p>多态的典型代码：父类型的引用指向子类型的对象。</p></li><li><p>学习多态基础语法之前，我们需要普及两个概念：<br>第一个：向上转型<br>    子 —&gt; 父（自动类型转换）(upcasting)<br>第二个：向下转型<br>    父 —&gt; 子（强制类型转换，需要加强制类型转换符）(downcasting)</p></li><li><p>注意：<br>java中允许向上转型，也允许向下转型。<br>无论是向上转型，还是向下转型，两种类型之间必须有继承关系，没有继承关系编译器报错。</p></li><li><p>什么时候必须使用“向下转型”？<br>不要随便做强制类型转换。当你需要访问的是子类对象中“特有”的方法。此时必须进行向下转型。</p></li><li><p>向下转型有风险吗？<br>容易出现ClassCastException（类型转换异常）<br>怎么避免这个风险？<br>    <strong>instanceof</strong>运算符，可以在程序运行阶段动态的判断某个引用指向的对象，是否为某一种类型。养成好习惯，向下转型之前一定要使用instanceof运算符进行判断。</p></li><li><p>例如：<br>​    Animal a &#x3D; new Cat();<br>​    编译的时候编译器发现a的类型是Animal，所以编译器会去Animal类中找move()方法，找到了，绑定，编译通过。但是运行的时候和底层堆内存当中的实际对象有关,真正执行的时候会自动调用“堆内存中真实对象”的相关方法。a.move();</p></li></ol><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/duo-tai/duo-tai/%E5%90%91%E4%B8%8A%E5%92%8C%E5%90%91%E4%B8%8B%E8%BD%AC%E5%9E%8B.png" alt="向上和向下转型"></p><h3 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h3><p>Animal</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物在移动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Bird</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 重写父类的move方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸟儿在飞翔！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 也有自己特有的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸟儿在歌唱！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Cat</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 对move方法进行重写</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cat走猫步！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 这个行为是子类型对象特有的方法。</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">catchMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫正在抓老鼠！！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Dog</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>JavaStudy</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaStudy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Animal</span> animal1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animal1<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 动物在移动</span>        <span class="token class-name">Cat</span> cat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cat1<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// cat走猫步！</span>        <span class="token class-name">Bird</span> bird1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bird1<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 鸟儿在飞翔！！！</span>        <span class="token comment">// 代码可以这样写吗？</span><span class="token comment">/*1、Animal和Cat之间有继承关系吗？有的。2、Animal是父类，Cat是子类。3、Cat is a Animal，这句话能不能说通？能。4、经过测试得知java中支持这样的一个语法：父类型的引用允许指向子类型的对象。Animal animalcat = new Cat();animalcat就是父类型的引用。new Cat()是一个子类型的对象。允许animalcat这个父类型引用指向子类型的对象。*/</span>        <span class="token comment">// 没有继承关系的两个类型之间存在转型吗？</span>        <span class="token comment">// 错误: 不兼容的类型: Dog无法转换为Animal</span>        <span class="token comment">// Animal animaldog = new Dog();</span>        <span class="token class-name">Animal</span> animalcat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用animalcat的move()方法</span><span class="token comment">/*什么是多态？多种形态，多种状态。分析：animalcat.move();java程序分为编译阶段和运行阶段。先来分析编译阶段：对于编译器来说，编译器只知道animalcat的类型是Animal，所以编译器在检查语法的时候，会去Animal.class字节码文件中找move()方法，找到了，绑定上move()方法，编译通过，静态绑定成功。（编译阶段属于静态绑定。）再来分析运行阶段：运行阶段的时候，实际上在堆内存中创建的java对象是Cat对象，所以move的时候，真正参与move的对象是一只猫，所以运行阶段会动态执行Cat对象的move()方法。这个过程属于运行阶段绑定。（运行阶段绑定属于动态绑定。）多态表示多种形态：编译的时候一种形态。运行的时候另一种形态。*/</span>        animalcat1<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//cat走猫步！</span>        <span class="token class-name">Animal</span> animalbird1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animalbird1<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 鸟儿在飞翔！！！</span>        <span class="token comment">// ============</span>        <span class="token class-name">Animal</span> animalcat2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 底层对象是一只猫。</span>        <span class="token comment">// 分析这个程序能否编译和运行呢？</span>        <span class="token comment">// 分析程序一定要分析编译阶段的静态绑定和运行阶段的动态绑定。</span>        <span class="token comment">// 只有编译通过的代码才能运行。没有编译，根本轮不到运行。</span>        <span class="token comment">// 错误: 找不到符号</span>        <span class="token comment">// why??? 因为编译器只知道animalcat2的类型是Animal，去Animal.class文件中找catchMouse()方法</span>        <span class="token comment">// 结果没有找到，所以静态绑定失败，编译报错。无法运行。（语法不合法。）</span>        <span class="token comment">//animalcat2.catchMouse();</span>        <span class="token comment">// 假设代码写到了这里，我非要调用catchMouse()方法怎么办？</span>        <span class="token comment">// 这个时候就必须使用“向下转型”了。（强制类型转换）</span>        <span class="token comment">// 以下这行代码为啥没报错？？？？</span>        <span class="token comment">// 因为animalcat2是Animal类型，转成Cat，Animal和Cat之间存在继承关系。所以没报错。</span>        <span class="token class-name">Cat</span> catanimalcat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span> animalcat2<span class="token punctuation">;</span>        catanimalcat<span class="token punctuation">.</span><span class="token function">catchMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 猫正在抓老鼠！！！！</span>        <span class="token comment">// 向下转型有风险吗？</span>        <span class="token class-name">Animal</span> animalbird2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*分析以下程序，编译报错还是运行报错？？？编译器检测到animalbird2这个引用是Animal类型，而Animal和Cat之间存在继承关系，所以可以向下转型。编译没毛病。运行阶段，堆内存实际创建的对象是：Bird对象。在实际运行过程中，拿着Bird对象转换成Cat对象就不行了。因为Bird和Cat之间没有继承关系。运行是出现异常，这个异常和空指针异常一样非常重要，也非常经典：java.lang.ClassCastException：类型转换异常。java.lang.NullPointerException：空指针异常。这个也非常重要。*/</span>        <span class="token comment">//Cat y = (Cat)animalbird2;</span>        <span class="token comment">//y.catchMouse();</span>        <span class="token comment">// 怎么避免ClassCastException异常的发生？？？</span><span class="token comment">/*新的内容，运算符：instanceof （运行阶段动态判断）第一：instanceof可以在运行阶段动态判断引用指向的对象的类型。第二：instanceof的语法：(引用 instanceof 类型)第三：instanceof运算符的运算结果只能是：true/false第四：c是一个引用，c变量保存了内存地址指向了堆中的对象。假设(c instanceof Cat)为true表示:c引用指向的堆内存中的java对象是一个Cat。假设(c instanceof Cat)为false表示:c引用指向的堆内存中的java对象不是一个Cat。要养成一个好习惯：任何时候，任何地点，对类型进行向下转型时，一定要使用instanceof 运算符进行判断。（java规范中要求的。）这样可以很好的避免：ClassCastException*/</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>animalbird2 <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>animalbird2 <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 如果animalbird2是一只Cat</span>            <span class="token class-name">Cat</span> catanimalbird <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span> animalbird2<span class="token punctuation">;</span> <span class="token comment">// 再进行强制类型转换</span>            catanimalbird<span class="token punctuation">.</span><span class="token function">catchMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多态在开发中的作用"><a href="#多态在开发中的作用" class="headerlink" title="多态在开发中的作用"></a>多态在开发中的作用</h3><ol><li><p>多态在开发中的作用是：<br>降低程序的耦合度，提高程序的扩展力。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Master</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span><span class="token class-name">Dog</span> d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span><span class="token class-name">Cat</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以上的代码中表示：Master和Dog以及Cat的关系很紧密（耦合度高）。导致扩展力很差。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Master</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span><span class="token class-name">Pet</span> pet<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pet<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上的代表中表示：Master和Dog以及Cat的关系就脱离了，Master关注的是Pet类。这样Master和Dog以及Cat的耦合度就降低了，提高了软件的扩展性。</p></li><li><p>面向对象的三大特征：<br>封装、继承、多态<br>真的是一环扣一环。<br>有了封装，有了这种整体的概念之后。对象和对象之间产生了继承。有了继承之后，才有了方法的覆盖和多态。</p></li></ol><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>JavaStudy</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaStudy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建主人对象</span>        <span class="token class-name">Master</span> master <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Master</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建宠物对象</span>        <span class="token class-name">Pet</span> petCat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 主人喂</span>        master<span class="token punctuation">.</span><span class="token function">feed</span><span class="token punctuation">(</span>petCat<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Master</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 主人类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Master</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*// 假设主人起初的时候只是喜欢养宠物狗狗// 喂养宠物狗狗public void feed(Dog d)&#123;d.eat();&#125;// 由于新的需求产生，导致我们“不得不”去修改Master这个类的代码public void feed(Cat c)&#123;c.eat();&#125;*/</span><span class="token comment">// 能不能让Master主人这个类以后不再修改了。</span><span class="token comment">// 即使主人又喜欢养其它宠物了，Master也不需要修改。</span><span class="token comment">// 这个时候就需要使用：多态机制。</span><span class="token comment">// 最好不要写具体的宠物类型，这样会影响程序的扩展性。</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">feed</span><span class="token punctuation">(</span><span class="token class-name">Pet</span> pet<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 编译的时候，编译器发现pet是Pet类，会去Pet类中找eat()方法，结果找到了，编译通过</span><span class="token comment">// 运行的时候，底层实际的对象是什么，就自动调用到该实际对象对应的eat()方法上。</span><span class="token comment">// 这就是多态的使用。</span>        pet<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Pet</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 所有宠物的父类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pet</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 吃的行为（这个方法可以不给具体的实现。）</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Cat</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Pet</span><span class="token punctuation">&#123;</span>    <span class="token comment">//重写eat方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cat Eat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法覆盖"><a href="#方法覆盖" class="headerlink" title="方法覆盖"></a>方法覆盖</h3><ol><li><p>私有方法无法覆盖。<br>方法覆盖只是针对于“实例方法”，“静态方法覆盖”没有意义。（这是因为方法覆盖通常和多态联合起来）<br>总结两句话：<br>私有不能覆盖。<br>静态不谈覆盖。</p></li><li><p>什么条件满足之后，会构成方法的覆盖呢？<br>1、发生具有继承关系的两个类之间。<br>2、父类中的方法和子类重写之后的方法：<br>    具有相同的方法名、相同的形式参数列表、相同的返回值类型。</p></li><li><p>在方法覆盖中，关于方法的返回值类型。<br>学习了多态机制之后：“相同的返回值类型”可以修改一下吗？<br>对于返回值类型是基本数据类型来说，必须一致。<br>对于返回值类型是引用数据类型来说，重写之后返回值类型可以变的更小（但意义不大，实际开发中没人这样写。）。</p></li></ol><h4 id="静态方法不存在方法覆盖"><a href="#静态方法不存在方法覆盖" class="headerlink" title="静态方法不存在方法覆盖"></a>静态方法不存在方法覆盖</h4><ol><li><p>方法覆盖需要和多态机制联合起来使用才有意义。    </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animal<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>要的是什么效果？<br>编译的时候move()方法是Animal的。<br>运行的时候自动调用到子类重写move()方法上。</p></li><li><p>静态方法存在方法覆盖吗？<br>多态自然就和对象有关系了。而静态方法的执行不需要对象。所以，一般情况下，我们会说静态方法“不存在”方法覆盖。不探讨静态方法的覆盖。</p></li></ol><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OverrideTest05</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 静态方法可以使用“引用.”来调用吗？可以</span><span class="token comment">// 虽然使用“引用.”来调用，但是和对象无关。</span><span class="token class-name">Animal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//多态</span><span class="token comment">// 静态方法和对象无关。</span><span class="token comment">// 虽然使用“引用.”来调用。但是实际运行的时候还是：Animal.doSome()</span>a<span class="token punctuation">.</span><span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Animal</span><span class="token punctuation">.</span><span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Cat</span><span class="token punctuation">.</span><span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token comment">// 父类的静态方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Animal的doSome方法执行！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token comment">// 尝试在子类当中对父类的静态方法进行重写</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cat的doSome方法执行！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="私有方法不能覆盖"><a href="#私有方法不能覆盖" class="headerlink" title="私有方法不能覆盖"></a>私有方法不能覆盖</h4><p>私有方法不能覆盖。</p><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OverrideTest06</span><span class="token punctuation">&#123;</span><span class="token comment">// 私有方法</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OverrideTest06's private method doSome execute!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 入口</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 多态</span><span class="token class-name">OverrideTest06</span> ot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ot<span class="token punctuation">.</span><span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//OverrideTest06's private method doSome execute!</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">OverrideTest06</span><span class="token punctuation">&#123;</span><span class="token comment">// 尝试重写父类中的doSome()方法</span><span class="token comment">// 访问权限不能更低，可以更高。</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"T's public doSome method execute!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法覆盖时返回值类型"><a href="#方法覆盖时返回值类型" class="headerlink" title="方法覆盖时返回值类型"></a>方法覆盖时返回值类型</h4><p>对于基本数据类型来说，返回值必须一样，一般在写方法覆盖时，直接从父类复制需要重写的方法，这样不会出现问题。</p><h5 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OverrideTest07</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 一般重写的时候都是复制粘贴。不要动。不要改。</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token comment">/*public double sum(int a, int b)&#123;return a + b;&#125;*/</span><span class="token comment">/*public long sum(int a, int b)&#123;return a + b;&#125;*/</span><span class="token comment">/*public int sum(int a, int b)&#123;return a + b;&#125;*/</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token comment">// 重写</span><span class="token comment">// 错误: Cat中的sum(int,int)无法覆盖Animal中的sum(int,int)</span><span class="token comment">/*public int sum(int a, int b)&#123;return a + b;&#125;*/</span><span class="token comment">/*public double sum(int a, int b)&#123;return a + b;&#125;*/</span><span class="token comment">//错误: Cat中的sum(int,int)无法覆盖Animal中的sum(int,int)</span><span class="token comment">/*public long sum(int a, int b)&#123;return a + b;&#125;*/</span><span class="token punctuation">&#125;</span><span class="token comment">// 父类</span><span class="token keyword">class</span> <span class="token class-name">MyClass1</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">Animal</span> <span class="token function">getAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 子类</span><span class="token keyword">class</span> <span class="token class-name">MyClass2</span> <span class="token keyword">extends</span> <span class="token class-name">MyClass1</span><span class="token punctuation">&#123;</span><span class="token comment">// 重写父类的方法</span><span class="token comment">/*public Animal getAnimal()&#123;return null;&#125;*/</span><span class="token comment">// 重写的时候返回值类型由Animal变成了Cat，变小了。（可以，java中允许）</span><span class="token comment">/*public Cat getAnimal()&#123;return null;&#125;*/</span><span class="token comment">// 重写的时候返回值类型由Animal变成了Object。变大了。（不行，java中不允许）</span><span class="token comment">/*public Object getAnimal()&#123;return null;&#125;*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的执行原理</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/fang-fa-zhi-xing-shi-nei-cun-de-bian-hua/java-fang-fa-zhi-xing-guo-cheng-zhong-de-nei-cun-bian-hua/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/fang-fa-zhi-xing-shi-nei-cun-de-bian-hua/java-fang-fa-zhi-xing-guo-cheng-zhong-de-nei-cun-bian-hua/</url>
      
        <content type="html"><![CDATA[<h3 id="java方法执行过程中的内存变化"><a href="#java方法执行过程中的内存变化" class="headerlink" title="java方法执行过程中的内存变化"></a>java方法执行过程中的内存变化</h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaTest</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token function">m1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m1 begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">m2</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m1 end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m2 begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">m3</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m2 end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m3 begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m3 end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="内存图"><a href="#内存图" class="headerlink" title="内存图"></a>内存图</h4><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/fang-fa-zhi-xing-shi-nei-cun-de-bian-hua/java-fang-fa-zhi-xing-guo-cheng-zhong-de-nei-cun-bian-hua/%E6%96%B9%E6%B3%95%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%86%85%E5%AD%98%E5%8F%98%E5%8C%96.png" alt="003-方法执行过程中的内存变化"></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java方法的重写</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/fang-fa-de-chong-xie/fang-fa-de-chong-xie/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/fang-fa-de-chong-xie/fang-fa-de-chong-xie/</url>
      
        <content type="html"><![CDATA[<h3 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h3><h4 id="回顾一下方法重载！！！！"><a href="#回顾一下方法重载！！！！" class="headerlink" title="回顾一下方法重载！！！！"></a>回顾一下方法重载！！！！</h4><ol><li>什么时候考虑使用方法重载overload？<br>当在一个类当中，如果功能相似的话，建议将名字定义的一样，这样代码美观，并且方便编程。</li><li>什么条件满足之后能够构成方法重载overload？<br>​    条件一：在同一个类当中<br>​    条件二：方法名相同<br>​    条件三：参数列表不同（个数、顺序、类型）</li></ol><h4 id="方法覆盖"><a href="#方法覆盖" class="headerlink" title="方法覆盖"></a>方法覆盖</h4><ol><li>方法覆盖又叫做：<br>方法重写（重新编写），英语单词叫做：Override、Overwrite，都可以。<br>比较常见的：方法覆盖、方法重写、override</li><li>什么时候考虑使用方法覆盖？<br>​    父类中的方法无法满足子类的业务需求，子类有必要对继承过来的方法进行覆盖。<br>​    子类有权利对这个方法进行重新编写，有必要进行“方法的覆盖”。</li><li>什么条件满足的时候构成方法覆盖？<br>​    条件一：两个类必须要有继承关系。<br>​    条件二：重写之后的方法和之前的方法具有：<br>​                    相同的返回值类型、<br>​                    相同的方法名、<br>​                    相同的形式参数列表。<br>​    条件三：访问权限不能更低，可以更高。（这个先记住。）<br>​    条件四：重写之后的方法不能比之前的方法抛出更多的异常，可以更少。（这个先记住）</li></ol><h5 id="重要结论："><a href="#重要结论：" class="headerlink" title="重要结论："></a>重要结论：</h5><p>​    当子类对父类继承过来的方法进行“方法覆盖”之后，<br>​    子类对象调用该方法的时候，一定执行覆盖之后的方法。</p><h5 id="这里还有几个注意事项：（与多态语法有关）"><a href="#这里还有几个注意事项：（与多态语法有关）" class="headerlink" title="这里还有几个注意事项：（与多态语法有关）"></a>这里还有几个注意事项：（与多态语法有关）</h5><p>​    注意1：方法覆盖只是针对于方法，和属性无关。<br>​    注意2：私有方法无法覆盖。<br>​    注意3：构造方法不能被继承，所以构造方法也不能被覆盖。<br>​    注意4：方法覆盖只是针对于“实例方法”，“静态方法覆盖”没有意义。</p><h5 id="方法重载和方法覆盖有什么区别？"><a href="#方法重载和方法覆盖有什么区别？" class="headerlink" title="方法重载和方法覆盖有什么区别？"></a>方法重载和方法覆盖有什么区别？</h5><ol><li><p>​    方法重载发生在同一个类当中。</p></li><li><p>​    方法覆盖是发生在具有继承关系的父子类之间。</p></li><li><p>​    方法重载是一个类中，方法名相同，参数列表不同。</p></li><li><p>​    方法覆盖是具有继承关系的父子类，并且重写之后的方法必须和之前的方法一致：</p></li><li><p>​    方法名一致、参数列表一致、返回值类型一致。</p></li></ol><h4 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h4><p>JavaStudy</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaStudy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ChinaPeople</span> chinaPeople <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChinaPeople</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AmericPeople</span> americPeople <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AmericPeople</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chinaPeople<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        americPeople<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Join"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chinaPeople<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        americPeople<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>People</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"会说话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ChinaPeople</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChinaPeople</span> <span class="token keyword">extends</span> <span class="token class-name">People</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> country <span class="token operator">=</span> <span class="token string">"China"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ChinaPeople</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ChinaPeople</span><span class="token punctuation">.</span>country<span class="token operator">+</span><span class="token string">"人"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"会说中文"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AmericPeople</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AmericPeople</span> <span class="token keyword">extends</span> <span class="token class-name">People</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> country <span class="token operator">=</span> <span class="token string">"Americ"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">AmericPeople</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">AmericPeople</span><span class="token punctuation">.</span>country<span class="token operator">+</span><span class="token string">"人"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"speak english"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法的覆盖与方法的重写案例"><a href="#方法的覆盖与方法的重写案例" class="headerlink" title="方法的覆盖与方法的重写案例"></a>方法的覆盖与方法的重写案例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OverrideTest02</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Bird</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Animal sing....</span><span class="token class-name">Cat</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物在移动！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Animal sing...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token comment">// 对move方法进行方法覆盖，方法重写，override</span><span class="token comment">// 最好将父类中的方法原封不动的复制过来。（不建议手动编写）</span><span class="token comment">// 方法覆盖，就是将继承过来的那个方法给覆盖掉了。继承过来的方法没了。</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸟儿在飞翔！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//protected表示受保护的。没有public开放。</span><span class="token comment">// 错误：正在尝试分配更低的访问权限; 以前为public</span><span class="token comment">/*protected void move()&#123;System.out.println("鸟儿在飞翔！！！");&#125;*/</span><span class="token comment">//错误：被覆盖的方法未抛出Exception</span><span class="token comment">/*public void move() throws Exception&#123;System.out.println("鸟儿在飞翔！！！");&#125;*/</span><span class="token comment">// 分析：这个sing()和父类中的sing(int i)有没有构成方法覆盖呢？</span><span class="token comment">// 没有，原因是，这两个方法根本就是两个完全不同的方法。</span><span class="token comment">// 可以说这两个方法构成了方法重载吗？可以。</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Bird sing....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token comment">// 方法重写</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫在走猫步！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="关于Object类中toString-方法的覆盖？"><a href="#关于Object类中toString-方法的覆盖？" class="headerlink" title="关于Object类中toString()方法的覆盖？"></a>关于Object类中toString()方法的覆盖？</h4><ol><li><p>​    toString()方法存在的作用就是：将java对象转换成字符串形式。<br>​    大多数的java类toString()方法都是需要覆盖的。因为Object类中提供的toString()方法输出的是一个java对象的内存地址。</p></li><li><p>​    Object类中toString()方法的默认实现是什么？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"@"</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// toString: 方法名的意思是转换成String</span><span class="token comment">// 含义：调用一个java对象的toString()方法就可以将该java对象转换成字符串的表示形式。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="对toString方法进行重写"><a href="#对toString方法进行重写" class="headerlink" title="对toString方法进行重写"></a>对toString方法进行重写</h6></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaStudy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyDate</span> myDate1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myDate1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MyDate</span> myDate2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyDate</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myDate2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyDate</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> year<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> month<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> day<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyDate</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span><span class="token keyword">int</span> month<span class="token punctuation">,</span><span class="token keyword">int</span> day<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>month <span class="token operator">=</span> month<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>day <span class="token operator">=</span> day<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setYear</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>year<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMonth</span><span class="token punctuation">(</span><span class="token keyword">int</span> month<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>month <span class="token operator">=</span> month<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>month<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDay</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>day <span class="token operator">=</span> day<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>day<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 从Object类中继承过来的那个toString()方法已经无法满足我业务需求了。</span>    <span class="token comment">// 我在子类MyDate中有必要对父类的toString()方法进行覆盖/重写。</span>    <span class="token comment">// 我的业务要求是：调用toString()方法进行字符串转换的时候，</span>    <span class="token comment">// 希望转换的结果是：xxxx年xx月xx日，这种格式。</span>    <span class="token comment">// 重写一定要复制粘贴，不要手动编写，会错的。</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"年"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"月"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"日"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的继承</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/ji-cheng/ji-cheng/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-ji-chu/ji-cheng/ji-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p><strong>使用extends关键字</strong></p><p>语法是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 基类<span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 派生类 <span class="token keyword">extends</span> 基类<span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="什么是继承，有什么用？"><a href="#什么是继承，有什么用？" class="headerlink" title="什么是继承，有什么用？"></a>什么是继承，有什么用？</h4><h5 id="继承的作用："><a href="#继承的作用：" class="headerlink" title="继承的作用："></a>继承的作用：</h5><p>基本作用：子类继承父类，代码可以得到复用。（这个不是重要的作用，是基本作用。）</p><p>主要(重要)作用：因为有了继承关系，才有了后期的方法覆盖和多态机制。</p><h5 id="继承的相关特性"><a href="#继承的相关特性" class="headerlink" title="继承的相关特性"></a>继承的相关特性</h5><ol><li><p>B类继承A类，则称A类为超类(superclass)、父类、基类，B类则称为子类(subclass)、派生类、扩展类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//我们平时聊天说的比较多的是：父类和子类。</span><span class="token comment">//superclass 父类，subclass 子类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>java 中的继承只支持单继承，不支持多继承，C++中支持多继承，这也是 java 体现简单性的一点，换句话说，java 中不允许这样写代码：<code>class B extends A,C&#123; &#125;</code> 这是错误的。</p></li><li><p>虽然 java 中不支持多继承，但有的时候会产生间接继承的效果，例如：class C extends B，class B extends A，也就是说，C 直接继承 B，其实 C 还间接继承 A。</p></li><li><p>java 中规定，子类继承父类，除<strong>构造方法不能继承</strong>之外，剩下都可以继承。但是<strong>私有的属性无法在子类中直接访问</strong>。(父类中private修饰的不能在子类中直接访问。可以通过间接的手段来访问。<strong>使用父类的setter和getter方法</strong>)</p></li><li><p>java 中的类没有显示的继承任何类，则默认继承Object类，Object类是 java 语言提供的根类（老祖宗类），也就是说，一个对象与生俱来就有Object类型中所有的特征。</p></li></ol><h5 id="继承的缺点，提高了程序的耦合性"><a href="#继承的缺点，提高了程序的耦合性" class="headerlink" title="继承的缺点，提高了程序的耦合性"></a>继承的缺点，提高了程序的耦合性</h5><p>继承也存在一些缺点，例如：CreditAccount类继承 Account 类会导致它们之间的耦合度非常高，Account 类发生改变之后会马上影响到 CreditAccount 类</p><h4 id="继承使用的问题"><a href="#继承使用的问题" class="headerlink" title="继承使用的问题"></a>继承使用的问题</h4><ol><li>子类继承父类之后，能使用子类对象调用父类方法吗？<br>可以，因为子类继承了父类之后，这个方法就属于子类了。当然可以使用子类对象来调用。</li><li>在实际开发中，满足什么条件的时候，我可以使用继承呢？<br>凡是采用“is a”能描述的，都可以继承。<br>Cat is a Animal：猫是一个动物<br>Dog is a Animal：狗是一个动物<br>假设以后的开发中有一个A类，有一个B类，A类和B类确实也有重复的代码，那么他们两个之间就可以继承吗？不一定，还是要看一看它们之间是否能够使用is a来描述。</li><li>任何一个类，没有显示继承任何类，默认继承Object，那么Object类当中有哪些方法呢？<br>1：你现在能看懂以下代码了吗？对System.out.println的解释<br>    System.out.println(“Hello World!”);<br>    System.out 中，out后面没有小括号，说明out是变量名。<br>    另外System是一个类名，直接使用类名System.out，说明out是一个静态变量。<br>    System.out 返回一个对象，然后采用“对象.”的方式访问println()方法。<br>​    2：Object类中有一个叫做toString()方法的，我们进行了测试，发现：<br>​        System.out.println(引用);<br>​        当直接输出一个“引用”的时候，println()方法会先自动调用“引用.toString()”，然后输出toString()方法的执行结果。</li><li>子类继承父类之后，能使用子类对象调用父类方法吗？实际上以上的这个问题问的有点蹊跷！！！！！<br>哪里蹊跷？“能使用子类对象调用父类方法”本质上，子类继承父类之后，是将父类继承过来的方法归为自己所有。实际上调用的也不是父类的方法，是他子类自己的方法（因为已经继承过来了就属于自己的。）。</li></ol><h5 id="自己实现一个类似的System-out-println"><a href="#自己实现一个类似的System-out-println" class="headerlink" title="自己实现一个类似的System.out.println();"></a>自己实现一个类似的System.out.println();</h5><p>JavaStudy</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaStudy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 使用两行调用</span>        <span class="token class-name">Test</span> t <span class="token operator">=</span> <span class="token class-name">JavaStudy</span><span class="token punctuation">.</span>test<span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">dosome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用一行调用</span>        <span class="token class-name">JavaStudy</span><span class="token punctuation">.</span>test<span class="token punctuation">.</span><span class="token function">dosome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Test@776ec8df,两个结果</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">JavaStudy</span><span class="token punctuation">.</span>test<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Test@776ec8df</span>        <span class="token comment">/*toString()方法是一个实例方法，需要创建对象才能调用。        * 776ec8df可以“等同”看做对象在堆内存当中的内存地址。        * 实际上是内存地址经过“哈希算法”得出的十六进制结果。        * System.out.println(引用);        * 当直接输出一个“引用”的时候，println()方法会先自动调用“引用.toString()”，然后输出toString()方法的执行结果。        * */</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Test</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dosome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dosome function"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h3><p>JavaStudy</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaStudy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Account</span> account1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        account1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        account1<span class="token punctuation">.</span><span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"的余额是"</span><span class="token operator">+</span>account1<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 123456的余额是500.0</span>        <span class="token class-name">Account</span> account2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token string">"000999"</span><span class="token punctuation">,</span><span class="token number">1314</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"的余额是"</span><span class="token operator">+</span>account2<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 000999的余额是1314.0</span>        <span class="token class-name">CreditAccount</span> creditAccount1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreditAccount</span><span class="token punctuation">(</span><span class="token string">"666777"</span><span class="token punctuation">,</span><span class="token number">521</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>creditAccount1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"的余额是"</span><span class="token operator">+</span>creditAccount1<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"其信用为"</span><span class="token operator">+</span>creditAccount1<span class="token punctuation">.</span><span class="token function">getCredit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 666777的余额是521.0其信用为100.0</span>        <span class="token class-name">CreditAccount</span> creditAccount2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreditAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        creditAccount2<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"555666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        creditAccount2<span class="token punctuation">.</span><span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token number">520</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        creditAccount2<span class="token punctuation">.</span><span class="token function">setCredit</span><span class="token punctuation">(</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>creditAccount2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"的余额是"</span><span class="token operator">+</span>creditAccount2<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"其信用为"</span><span class="token operator">+</span>creditAccount2<span class="token punctuation">.</span><span class="token function">getCredit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 555666的余额是520.0其信用为88.0</span>        creditAccount1<span class="token punctuation">.</span><span class="token function">showAccountId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 666777</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Account</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">,</span><span class="token keyword">double</span> balance<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token operator">=</span>id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token operator">=</span>balance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token operator">=</span>id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token keyword">double</span> balance<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token operator">=</span>balance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CreditAccount</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreditAccount</span> <span class="token keyword">extends</span> <span class="token class-name">Account</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> credit<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CreditAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">CreditAccount</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">,</span><span class="token keyword">double</span> balance<span class="token punctuation">,</span><span class="token keyword">double</span> credit<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setBalance</span><span class="token punctuation">(</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>credit<span class="token operator">=</span>credit<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCredit</span><span class="token punctuation">(</span><span class="token keyword">double</span> credit<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>credit <span class="token operator">=</span> credit<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getCredit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>credit<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showAccountId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 错误: id 在 Account 中是 private 访问控制</span>        <span class="token comment">// System.out.println(id);</span>        <span class="token comment">// 间接访问</span>        <span class="token comment">// System.out.println(getId());</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC基础</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/jdbc/jdbc-ji-chu/jdbc-ji-chu/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/jdbc/jdbc-ji-chu/jdbc-ji-chu/</url>
      
        <content type="html"><![CDATA[<h3 id="JDBC概述"><a href="#JDBC概述" class="headerlink" title="JDBC概述"></a>JDBC概述</h3><ol><li><p>JDBC是什么？</p><p>Java DataBase Connectivity（Java语言连接数据库）</p></li><li><p>JDBC的本质是什么？</p><p>JDBC是SUN公司制定的一套接口（interface）java.sql.*; (这个软件包下有很多接口。)</p></li><li><p>接口都有调用者和实现者。面向接口调用、面向接口写实现类，这都属于面向接口编程。</p></li><li><p>接口的实现类被称为驱动，例如MySQL驱动。</p></li><li><p>为什么要面向接口编程？</p><p>解耦合：降低程序的耦合度，提高程序的扩展力。</p><p>多态机制就是非常典型的：面向抽象编程。（不要面向具体编程）</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 建议这样这样用</span><span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不建议这样用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>JDBC的本质到底是什么？一套接口。</p><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/jdbc/jdbc-ji-chu/jdbc-ji-chu/JDBC%E6%9C%AC%E8%B4%A8.jpg" alt="JDBC本质"></p><h6 id="模拟JDBC本质："><a href="#模拟JDBC本质：" class="headerlink" title="模拟JDBC本质："></a>模拟JDBC本质：</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 接口的调用者</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * Java程序员的角色：     * 不需要关心夹具体是哪个品牌的数据库，只需要面向JDBC接口写代码。     * 面向接口编程，面向抽象编程，不要面向具体编程     * @param args     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">JDBC</span> jdbc1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建对象可以通过反射机制。</span>        <span class="token class-name">Class</span> myClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"MySql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JDBC</span> jdbc2 <span class="token operator">=</span> <span class="token punctuation">(</span>JDBC<span class="token punctuation">)</span> myClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 以下代码都是面向接口调用方法，不需要修改。</span>        jdbc1<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jdbc2<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 接口的制定者</span><span class="token keyword">interface</span> JDBC<span class="token punctuation">&#123;</span>    <span class="token comment">// 连接数据库的方法</span>    <span class="token keyword">void</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 接口的实现者（实现类被称为驱动（MySQL驱动））</span><span class="token keyword">class</span> <span class="token class-name">MySql</span> <span class="token keyword">implements</span> JDBC<span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接数据库成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>JDBC开发前的准备工作，先从官网下载对应的驱动jar包，然后将其配置到环境变量classpath当中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">classpath<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">;</span>JDBC包的路径<span class="token punctuation">(</span>jar包的路径<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>JDBC编程六步（需要背会）</p><ol><li><p>第一步：注册驱动（作用：告诉Java程序，即将要连接的是哪个品牌的数据库）</p></li><li><p>第二步：获取连接（表示JVM的进程和数据库进程之间的通道打开了，这属于进程之间的通信，重量级的，使用完之后一定要关闭通道。）</p></li><li><p>第三步：获取数据库操作对象（专门执行sql语句的对象）</p></li><li><p>第四步：执行SQL语句（DQL DML….）</p></li><li><p>第五步：处理查询结果集（只有当第四步执行的是select语句的时候，才有这第五步处理查询结果集。）</p><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/jdbc/jdbc-ji-chu/jdbc-ji-chu/%E9%81%8D%E5%8E%86%E7%BB%93%E6%9E%9C%E9%9B%86.jpg" alt="遍历结果集"></p></li><li><p>第六步：释放资源（使用完资源之后一定要关闭资源。Java和数据库属于进程间的通信，开启之后一定要关闭。）</p></li><li><p>常用函数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerDriver</span><span class="token punctuation">(</span><span class="token class-name">Driver</span> driver<span class="token punctuation">)</span> <span class="token comment">// 向DriverManager注册给定驱动程序。是DriverManager类的方法</span><span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> user<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token comment">// 试图建立到给定数据库 URL 的连接。</span><span class="token class-name">Statement</span> <span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 创建一个 Statement 对象来将 SQL 语句发送到数据库。</span><span class="token keyword">int</span> <span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span> <span class="token comment">// 执行给定 SQL 语句，该语句可能为 INSERT、UPDATE 或 DELETE 语句，或者不返回任何内容的 SQL 语句（如 SQL DDL 语句）。</span><span class="token class-name">ResultSet</span> <span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span> <span class="token comment">// 执行给定的 SQL 语句，该语句返回单个 ResultSet 对象。 </span><span class="token keyword">boolean</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 将光标从当前位置向前移一行。 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">// JDBC编程六步</span><span class="token comment">// 不建议把连接数据库的信息写死在Java程序中，使用properties配置文件来读取</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Statement</span> statement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 1.注册驱动</span>            <span class="token comment">// 这是注册驱动的第一种写法</span>            <span class="token comment">/*Driver driver = new com.mysql.jdbc.Driver(); // 多态，父类型引用指向子类型对象            DriverManager.registerDriver(driver);*/</span>            <span class="token comment">// 这是注册驱动的第二种写法</span>            <span class="token comment">// 使用资源绑定器绑定属性配置文件</span>            <span class="token class-name">ResourceBundle</span> resourceBundle <span class="token operator">=</span> <span class="token class-name">ResourceBundle</span><span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token string">"jdbc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从properties配置文件中读取</span>            <span class="token comment">// Class.forName("com.mysql.jdbc.Driver");</span>            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>resourceBundle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 2.获取连接</span>            <span class="token comment">/**             * url:统一资源定位符（网络中某一资源的绝对路径）             * 协议：jdbc:mysql://             * IP：localhost             * 端口：3306             * 资源名：pentest             */</span>            connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/pentest"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据库的连接对象="</span> <span class="token operator">+</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 3.获取数据库操作对象(Statement专门执行SQL语句的)</span>            statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 4.执行SQL,JDBC的SQL语句不需要写分号。</span>            <span class="token comment">// String sql = "insert into news(id,title,content) values(3,'Love','I Love You')";</span>            <span class="token comment">// String sql = "delete from news where id = 3";</span>            <span class="token comment">// String sql = "update news set title = 'You',content = 'You And You!!!' where id = 3";</span>            <span class="token comment">// int count = statement.executeUpdate(sql);//专门执行DML语句，返回值是影响数据库中的记录条数。</span>            <span class="token comment">// System.out.println(count == 1 ? "成功" : "失败");</span>            <span class="token comment">// int executeUpdate(insert/delete/update);</span>            <span class="token comment">// ResultSet executeQuery(select);</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from news"</span><span class="token punctuation">;</span>            resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 5.处理查询结果</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 这是数据库列名的名字</span>                <span class="token keyword">int</span> id <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 注意:列的名称不是表中的列的名称，是查询结果集的列的名称。</span>                <span class="token class-name">String</span> title <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> content <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token string">"title="</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token string">"content="</span> <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 6.释放资源</span>            <span class="token comment">// 为了保证资源一定释放，在finally语句块中关闭资源。</span>            <span class="token comment">// 并且要遵循从下到大依次关闭</span>            <span class="token comment">// 分别对其try...catch</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>resultSet <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>statement <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC的事务机制</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/jdbc/jdbc-de-shi-wu-ji-zhi/jdbc-de-shi-wu-ji-zhi/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/jdbc/jdbc-de-shi-wu-ji-zhi/jdbc-de-shi-wu-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="JDBC的事务机制"><a href="#JDBC的事务机制" class="headerlink" title="JDBC的事务机制"></a>JDBC的事务机制</h3><p>JDBC的事务机制：</p><p>JDBC中的事务是自动提交的，什么事自动提交？</p><p>只要执行任意一条DML语句，则自动提交一次，这是JDBC默认的事务行为。</p><p>但是在实际的业务中。通常都是N条DML语句共同联合才能完成的，必须保证</p><p>他们这些DML语句在同一个事务中同时成功或者同时失败。一下程序先验证JDBC的事务是否是自动提交的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 注册驱动</span>            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 获取连接</span>            connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://;localhost/pentest"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"update news set title = ? where id = ?"</span><span class="token punctuation">;</span>            <span class="token comment">// 3.获取预编译的数据库操作对象</span>            preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 给?传值</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"Love"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 执行第一条update语句</span>            <span class="token comment">// 这里执行完执行第一条update语句买就直接提交到数据库了，这样遇到下面的空指针异常的时候整个程序就结束了，对于下面的第二条的SQL语句不能执行，如果这两条的SQL语句是在一起执行才有效果的话，因为出现了空指针异常第二条update语句不会执行，这样对数据库来说是错误的，原因就是JDBC的事务是自动提交的。要解决这种情况就必须修改这种事务的提交方式。不让自动提交。</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// 空指针异常</span>            str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"You"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            count <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 执行第二条update语句</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>preparedStatement <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="将JDBC的事务提交机制修改为手动提交事务"><a href="#将JDBC的事务提交机制修改为手动提交事务" class="headerlink" title="将JDBC的事务提交机制修改为手动提交事务"></a>将JDBC的事务提交机制修改为手动提交事务</h4><p>常用的函数有：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> autoCommit<span class="token punctuation">)</span> <span class="token comment">// 将此连接的自动提交模式设置为手动提交:false</span><span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 使所有上一次提交/回滚后进行的更改成为持久更改，并释放此 Connection 对象当前持有的所有数据库锁。 </span><span class="token keyword">void</span> <span class="token class-name">Connection</span><span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 取消在当前事务中进行的所有更改，并释放此 Connection 对象当前持有的所有数据库锁。 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">// 这是单机事务</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 注册驱动</span>            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 获取连接</span>            connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost/pentest"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将自动提交机制修改为手动提交</span>            connection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//开启事务</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"update t_act set balance = ? where actno = ?"</span><span class="token punctuation">;</span>            <span class="token comment">// 给?传值</span>            preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setDouble</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 给?传值</span>            preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setDouble</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            count <span class="token operator">+=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token string">"转账成功"</span> <span class="token operator">:</span> <span class="token string">"转账失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 程序能够走到此处说明以上程序没有异常，事务结束，手动提交数据。</span>            connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//提交事务</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 回滚事务</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    connection<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>preparedStatement <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就算出现了空指针异常，所有有关数据的操作没有完全执行完毕，数据库不会进行更新数据，这样保证了数据的安全性。出现了异常则会通过rollback()方法的回滚机制，进行回滚，保证数据的安全。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC中解决SQL注入的问题</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/jdbc/preparedstatement-yu-statement/preparedstatement-yu-statement/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/jdbc/preparedstatement-yu-statement/preparedstatement-yu-statement/</url>
      
        <content type="html"><![CDATA[<h3 id="如何SQL注入的问题？"><a href="#如何SQL注入的问题？" class="headerlink" title="如何SQL注入的问题？"></a>如何SQL注入的问题？</h3><p>只要用户提供的信息不参与SQL语句的编译过程，问题就解决了。</p><p>即使用户提供的信息中含有SQL语句的关键字，但是没有参与编译，不起作用。</p><p>要想用户信息不参与SQL语句的编译，那么必须使用java.sql.PreparedStatement</p><p>PreparedStatement接口继承了java.sql.Statement</p><p>PreparedStatement是属于预编译的数据库操作对象。</p><p>PreparedStatement的原理是：预先对SQL语句的框架进行编译，然后再给SQL语句传“值”。</p><p>PreparedStatement与Statement对比？</p><p>PreparedStatement解决了SQL注入的问题，Statement存在SQL注入的问题</p><p>Statement编译一次执行一次，PreparedStatement是编译一次，可执行n次，PreparedStatement效率比较高一些</p><p>PreparedStatement会在编译阶段做类型的安全检查。</p><h6 id="这是使用Statement的代码，存在SQL注入"><a href="#这是使用Statement的代码，存在SQL注入" class="headerlink" title="这是使用Statement的代码，存在SQL注入"></a>这是使用Statement的代码，存在SQL注入</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 初始化界面</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> userLoginInfo <span class="token operator">=</span> <span class="token function">initUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> loginSuccess <span class="token operator">=</span> <span class="token class-name">Login</span><span class="token punctuation">(</span>userLoginInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>loginSuccess <span class="token operator">?</span> <span class="token string">"成功"</span> <span class="token operator">:</span> <span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 用户登录     * @param userLoginInfo 用户登录信息     * @return false表示成功，true表示失败。     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token class-name">Login</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> userLoginInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> loginSuccess <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">// JDBC代码</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Statement</span> statement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 1.注册驱动</span>            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 2.获取连接</span>            connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/pentest"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 3.获取数据库操作对象</span>            statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 4.执行SQL</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from account where rest = '"</span><span class="token operator">+</span>userLoginInfo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"loginName"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"' and own = '"</span><span class="token operator">+</span>userLoginInfo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"loginPwd"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"'"</span><span class="token punctuation">;</span>            resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 5.处理结果集</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                loginSuccess <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 6.释放资源</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>resultSet <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>statement <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> loginSuccess<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 初始化用户界面     * @return 用户输入的用户名和密码等信息。     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">initUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> loginName <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密码："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> loginPwd <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> userLoginInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userLoginInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginName"</span><span class="token punctuation">,</span>loginName<span class="token punctuation">)</span><span class="token punctuation">;</span>        userLoginInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginPwd"</span><span class="token punctuation">,</span>loginPwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userLoginInfo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="这是使用PreparedStatement的代码，解决了SQL注入"><a href="#这是使用PreparedStatement的代码，解决了SQL注入" class="headerlink" title="这是使用PreparedStatement的代码，解决了SQL注入"></a>这是使用PreparedStatement的代码，解决了SQL注入</h6><p>常用函数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PreparedStatement</span> <span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span> <span class="token comment">// 创建一个 PreparedStatement 对象来将参数化的 SQL 语句发送到数据库。 </span><span class="token keyword">void</span> <span class="token function">setString</span><span class="token punctuation">(</span><span class="token keyword">int</span> parameterIndex<span class="token punctuation">,</span> <span class="token class-name">String</span> x<span class="token punctuation">)</span> <span class="token comment">// 将指定参数设置为给定 Java String 值。 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 初始化界面</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> userLoginInfo <span class="token operator">=</span> <span class="token function">initUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> loginSuccess <span class="token operator">=</span> <span class="token class-name">Login</span><span class="token punctuation">(</span>userLoginInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>loginSuccess <span class="token operator">?</span> <span class="token string">"成功"</span> <span class="token operator">:</span> <span class="token string">"失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 用户登录     * @param userLoginInfo 用户登录信息     * @return false表示成功，true表示失败。     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token class-name">Login</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> userLoginInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> loginSuccess <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">// JDBC代码</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 这是使用PreparedStatement（预编译的数据库操作对象）</span>        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 1.注册驱动</span>            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 2.获取连接</span>            connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/pentest"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 3.获取预编译的数据库操作对象</span>            <span class="token comment">// ?是占位符，先写SQL的框架，其中一个?代表一个占位符，一个?将来接收一个“值”,注意：占位符不能使用单引号括起来。</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from account where rest = ? and own = ?"</span><span class="token punctuation">;</span>            <span class="token comment">// String sql = "insert into account(Id,rest,own) values(?,?,?)";</span>            <span class="token comment">// 程序执行到此处，会发送SQL语句框架给DBMS，然后DBMS进行sql语句的预先编译。</span>            preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 给占位符?传值（第一个?下标是1，第二个?下标是2，JDBC中所有的下标从1开始）</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>userLoginInfo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"loginName"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 按照属性进行set,有setInt()</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>userLoginInfo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"loginPwd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 4.执行SQL</span>            resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 5.处理结果集</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                loginSuccess <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 6.释放资源</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>resultSet <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>preparedStatement <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> loginSuccess<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 初始化用户界面     * @return 用户输入的用户名和密码等信息。     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">initUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> loginName <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"密码："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> loginPwd <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> userLoginInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userLoginInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginName"</span><span class="token punctuation">,</span>loginName<span class="token punctuation">)</span><span class="token punctuation">;</span>        userLoginInfo<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginPwd"</span><span class="token punctuation">,</span>loginPwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userLoginInfo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JDBC的封装"><a href="#JDBC的封装" class="headerlink" title="JDBC的封装"></a>JDBC的封装</h3><p>模糊查询的使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">// 模糊查询的使用</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 获取连接</span>            connection <span class="token operator">=</span> <span class="token class-name">DBUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 获取预编译的数据库操作对象</span>            <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from news where title like ?"</span><span class="token punctuation">;</span>            preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"_o%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 释放资源</span>            <span class="token class-name">DBUtil</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span>preparedStatement<span class="token punctuation">,</span>resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">DBUtil</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 工具类中的构造方法都是私有的     * 因为工具类的所有方法都是静态的，不需要new对象，直接采用类名调用。     * 为了防止调用构造方法，将构造方法私有化。     */</span>    <span class="token keyword">private</span> <span class="token class-name">DBUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//静态代码块，在类加载是执行，并且只执行一次</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取数据库连接对象     * @return 连接对象     * @throws SQLException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost/pentest"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 关闭资源     * @param connection 连接对象     * @param statement 数据库操作对象     * @param resultSet 结果集     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection<span class="token punctuation">,</span><span class="token class-name">Statement</span> statement<span class="token punctuation">,</span><span class="token class-name">ResultSet</span> resultSet<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>resultSet <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>statement <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                throwables<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL的悲观锁和乐观锁</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/jdbc/bei-guan-suo-he-le-guan-suo/bei-guan-suo-he-le-guan-suo/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/jdbc/bei-guan-suo-he-le-guan-suo/bei-guan-suo-he-le-guan-suo/</url>
      
        <content type="html"><![CDATA[<h4 id="MySQL的悲观锁和乐观锁"><a href="#MySQL的悲观锁和乐观锁" class="headerlink" title="MySQL的悲观锁和乐观锁"></a>MySQL的悲观锁和乐观锁</h4><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/jdbc/bei-guan-suo-he-le-guan-suo/bei-guan-suo-he-le-guan-suo/%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81%E6%9C%BA%E5%88%B6.jpg" alt="悲观锁和乐观锁机制"></p><p>悲观锁：这个事务不结束，就无法解除对该事务的锁定，别的程序（线程）就无法对该数据库的行级数据进行修改。</p><p>悲观锁也叫，行级锁（for update）。</p><p>乐观锁：拥有一个版本号。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的缓冲流</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/javaio-liu/buffered-huan-chong-liu/bufferedreader/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/javaio-liu/buffered-huan-chong-liu/bufferedreader/</url>
      
        <content type="html"><![CDATA[<h3 id="BufferedReader与BufferedWriter"><a href="#BufferedReader与BufferedWriter" class="headerlink" title="BufferedReader与BufferedWriter"></a>BufferedReader与BufferedWriter</h3><p>当一个流的构造方法中需要一个流的时候，这个被传进来的流叫做：节点流。</p><p>外部负责包装的这个流，叫做：包装流&#x2F;处理流。</p><h4 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h4><p>带有缓冲区的字符输入流。使用这个流的时候不需要自定义char数组，或者说不需要自定义byte数组。自带缓冲。</p><p>BufferedReader：带有缓冲的字符输入流。InputStreamReader：转换流</p><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"D:/myfile.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 需要传入一个Reader类型。</span>        <span class="token comment">// 对当前这个程序来说：FileReader就是一个节点流。BufferedReader就是包装流/处理流。</span>        <span class="token comment">// 读一行</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// br.readLine()方法读取一个文本行，但不带换行符。</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 关闭流</span>        <span class="token comment">// 对于包装流来说，只需要关闭最外层流就行，里面的节点流会自动关闭。（可以看源代码。）</span>        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="字节流使用BufferedReader类需要通过转换流转换"><a href="#字节流使用BufferedReader类需要通过转换流转换" class="headerlink" title="字节流使用BufferedReader类需要通过转换流转换"></a>字节流使用BufferedReader类需要通过转换流转换</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*// 字节流        FileInputStream fis = new FileInputStream("D:/myfile.txt");        // 通过转换流转换（InputStreamReader将字节流转换成字符流。）        // fis是节点流。isr是包装流。        InputStreamReader isr = new InputStreamReader(fis);        // 这个构造方法只能传一个字符流。不能传字节流。要传入字节流需要借助InputStreamReader类去转换        // isr是节点流。br是包装流。        BufferedReader br = new BufferedReader(isr);*/</span>        <span class="token comment">// 合并</span>        <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:/myfile.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a>BufferedWriter</h4><p>BufferedWriter：带有缓冲的字符输出流。OutputStreamWriter：转换流</p><h6 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 带有缓冲区的字符输出流</span>        <span class="token comment">// BufferedWriter bw = new BufferedWriter(new FileWriter("D:/file.txt"));</span>        <span class="token class-name">BufferedWriter</span> bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:/file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 开始写。</span>        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello Word!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 刷新</span>        bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 关闭最外层</span>        bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数据字节输入流</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/javaio-liu/datainputstream-shu-ju-zi-jie-shu-ru-liu/shu-ju-zi-jie-shu-ru-liu/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/javaio-liu/datainputstream-shu-ju-zi-jie-shu-ru-liu/shu-ju-zi-jie-shu-ru-liu/</url>
      
        <content type="html"><![CDATA[<h3 id="数据字节流。"><a href="#数据字节流。" class="headerlink" title="数据字节流。"></a>数据字节流。</h3><p>在IO包中，提供了两个与平台无关的数据操作流：</p><p>通常数据输出流会按照一定的格式将数据输出，再通过数据输入流按照一定的格式将数据读入。读写顺序必须一样。是将数据以及数据的类型一并写入到文件当中的流。</p><h5 id="DataInputStream-数据字节输入流。"><a href="#DataInputStream-数据字节输入流。" class="headerlink" title="DataInputStream:数据字节输入流。"></a>DataInputStream:数据字节输入流。</h5><p>DataOutputStream写的文件，只能使用DataInputStream去读。并且读的时候你需要提前知道写入的顺序。读的顺序需要和写的顺序一致。才可以正常取出数据。DataOutputStream是OutputStream的子类</p><h5 id="DataOutputStream-数据字节输出流。"><a href="#DataOutputStream-数据字节输出流。" class="headerlink" title="DataOutputStream:数据字节输出流。"></a>DataOutputStream:数据字节输出流。</h5><p>这个流可以将数据连同数据的类型一并写入文件。是将数据以及数据的类型一并写入到文件当中的流。</p><p>注意：这个文件不是普通文本文档。（这个文件使用记事本打不开。）</p><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 创建数据专属的字节输出流</span>        <span class="token class-name">DataOutputStream</span> dos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:/data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建数据专属的字节输入流</span>        <span class="token class-name">DataInputStream</span> dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:/data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 写数据</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> bool <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">;</span>        <span class="token comment">// 写</span>        dos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 把数据以及数据的类型一并写入到文件当中。</span>        dos<span class="token punctuation">.</span><span class="token function">writeBoolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeChar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 刷新</span>        dos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 关闭最外层</span>        dos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 开始读</span>        <span class="token keyword">int</span> readNum <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> readBool <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> readCh <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>readNum <span class="token operator">+</span> <span class="token string">"+"</span> <span class="token operator">+</span> readBool <span class="token operator">+</span> <span class="token string">"+"</span> <span class="token operator">+</span> readCh<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的FileInputStream类</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/javaio-liu/fileinputstream/fileinputstream/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/javaio-liu/fileinputstream/fileinputstream/</url>
      
        <content type="html"><![CDATA[<h3 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h3><p>文件字节输入流，万能的，任何类型的文件都可以采用这个流来读。以字节的方式，完成输入的操作，完成读的操作（硬盘—&gt; 内存）</p><p>FileInputStream类的其它常用方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 从此输入流中读取一个数据字节。</span><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">)</span> <span class="token comment">// 从此输入流中将最多 b.length个字节的数据读入一个byte 数组中。</span><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> off<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token comment">// 从此输入流中将最多 len 个字节的数据读入一个 byte 数组中。</span><span class="token keyword">long</span> <span class="token function">skip</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token comment">// 跳过几个字节不读。</span><span class="token keyword">int</span> <span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 返回流当中剩余的没有读到的字节数量</span><span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 关闭此文件输入流并释放与此流有关的所有系统资源。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="一个字节一个字节的读"><a href="#一个字节一个字节的读" class="headerlink" title="一个字节一个字节的读"></a>一个字节一个字节的读</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建文件字节输入流对象</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\Test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 开始读</span>            <span class="token comment">/*int readData = fis.read(); // 这个方法的返回值是：读取到的“字节”本身，读到文件的末尾，再读的时候读取不到任何数据，返回-1.            System.out.println(readData);*/</span>            <span class="token comment">// 使用while循环</span>            <span class="token keyword">int</span> readData <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readData <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>readData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 在finally语句块当中确保流一定关闭。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 避免空指针异常！</span>                <span class="token comment">// 关闭流的前提是：流不是空。流是null的时候没必要关闭。</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="使用数组的方式读"><a href="#使用数组的方式读" class="headerlink" title="使用数组的方式读"></a>使用数组的方式读</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:/Test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 开始读，采用byte数组，一次读取多个字节。最多读取“数组.length”个字节。</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 准备一个2个长度的byte数组，一次最多读取2个字节。</span>            <span class="token keyword">int</span> readCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">// fis.read(bytes)这个方法的返回值是：读取到的字节数量。（不是字节本身）</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readCount <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 1个字节都没有读取到返回-1</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>readCount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第一次读到了2个字节。第二次读到了1个字节。</span>                <span class="token comment">// System.out.println(new String(bytes)); // 将字节数组全部转换成字符串：读到的是ab,cb</span>                <span class="token comment">// 不应该全部都转换，应该是读取了多少个字节，转换多少个。</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> readCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:/Test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总字节数量："</span> <span class="token operator">+</span> fis<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 总字节数量：3</span>            <span class="token comment">// 读1个字节</span>            <span class="token keyword">int</span> readByte <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"剩下多少个字节没有读："</span> <span class="token operator">+</span> fis<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 剩下多少个字节没有读：2</span>            <span class="token comment">// byte[] bytes = new byte[fis.available()]; // 这种方式不太适合太大的文件，因为byte[]数组不能太大。</span>            <span class="token comment">// skip跳过几个字节不读取，这个方法也可能以后会用！</span>            fis<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//99</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的FileOutputStream类</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/javaio-liu/fileoutputstream/fileoutputstream/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/javaio-liu/fileoutputstream/fileoutputstream/</url>
      
        <content type="html"><![CDATA[<h3 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h3><p>文件字节输出流，负责写。从内存到硬盘。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// myfile文件不存在的时候会自动新建！</span>            <span class="token comment">// 这种方式谨慎使用，这种方式会先将原文件清空，然后重新写入。</span>            <span class="token comment">// fos = new FileOutputStream("D:/myfile.txt");</span>            <span class="token comment">// 以追加的方式在文件末尾写入。不会清空原文件内容。</span>            fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:/myfile.txt"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 开始写。</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token comment">// 将byte数组全部写出！</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将byte数组的一部分写出！</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 字符串</span>            <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"我是中国人"</span><span class="token punctuation">;</span>            <span class="token comment">// 将字符串转换成byte数组。</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 写</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 写完之后，最后一定要刷新</span>            fos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文件的的拷贝"><a href="#文件的的拷贝" class="headerlink" title="文件的的拷贝"></a>文件的的拷贝</h4><p>使用FileInputStream + FileOutputStream完成文件的拷贝。拷贝的过程应该是一边读，一边写。使用以上的字节流拷贝文件的时候，文件类型随意，万能的。什么样的文件都能拷贝。</p><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/javaio-liu/fileoutputstream/fileoutputstream/%E6%96%87%E4%BB%B6%E7%9A%84%E5%A4%8D%E5%88%B6%E5%8E%9F%E7%90%86.png" alt="文件的复制原理"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 创建一个输入流对象</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:/myfile.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 创建一个输出流对象</span>            fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:/Test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 最核心的：一边读，一边写</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 1KB（一次最多拷贝1KB。）</span>            <span class="token keyword">int</span> readCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readCount <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>readCount<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 刷新，输出流最后要刷新</span>            fos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的文件字符流</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/javaio-liu/filereader-yu-filewriter/filereader-yu-filewriter/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/javaio-liu/filereader-yu-filewriter/filereader-yu-filewriter/</url>
      
        <content type="html"><![CDATA[<h3 id="FileReader与FileWriter"><a href="#FileReader与FileWriter" class="headerlink" title="FileReader与FileWriter"></a>FileReader与FileWriter</h3><h5 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h5><p>文件字符输入流，只能读取普通文本。读取文本内容时，比较方便，快捷。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 创建文件字符输入流</span>            fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"D:/file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//准备一个char数组</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 往char数组中读</span>            <span class="token comment">/*fr.read(chars);// 按照字符的方式读取            for (char c : chars)&#123;                System.out.println(c);            &#125;*/</span>            <span class="token comment">// 循环读取</span>            <span class="token keyword">int</span> readCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readCount <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> readCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h5><p>文件字符输出流。写。只能输出普通文本。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 创建文件字符输出流对象</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"D:/file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 开始写。</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'我'</span><span class="token punctuation">,</span><span class="token char">'是'</span><span class="token punctuation">,</span><span class="token char">'中'</span><span class="token punctuation">,</span><span class="token char">'国'</span><span class="token punctuation">,</span><span class="token char">'人'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 写出一个换行符。</span>            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 刷新</span>            fw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fw <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文件的拷贝"><a href="#文件的拷贝" class="headerlink" title="文件的拷贝"></a>文件的拷贝</h4><p>使用FileReader，FileWriter进行拷贝的话，只能拷贝“普通文本”文件。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 读</span>            fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"D:/file.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 写</span>            fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"D:/myfile.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 一边读一边写：</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> readCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readCount <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>readCount<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 刷新</span>            fw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fw <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的File类</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/javaio-liu/file-lei/file-lei/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/javaio-liu/file-lei/file-lei/</url>
      
        <content type="html"><![CDATA[<h3 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h3><ol><li><p>File类和四大家族没有关系，所以File类不能完成文件的读和写。</p></li><li><p>简述File类的作用：</p><ol><li>一个File对象而可以代表一个文件或目录，File可以实现获取文件和目录属性等功能，可以实现对文件和目录的创建，删除等功能。</li><li>它不允许访问文件内容。File类主要用于命名文件、查询文件属性和处理文件目录。</li><li>File 类不具有从文件读取信息和向文件写入信息的功能，它仅描述文件本身的属性。</li><li>File类主要是JAVA为文件这块的操作(如删除、新增等)而设计的相关类。</li><li>File类的包名是java.io，其实现了Serializable, Comparable两大接口以便于其对象可序列化和比较</li></ol></li><li><p>File对象代表什么？</p><ol><li>文件和目录路径名的抽象表示形式。</li><li>C:\Drivers 这是一个File对象</li><li>C:\Drivers\Readme.txt 也是File对象。</li><li>一个File对象有可能对应的是目录，也可能是文件。File只是一个路径名的抽象表示形式。</li></ol></li><li><p>File类中常用的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 可以创建多重目录吗？</span><span class="token keyword">boolean</span> <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 创建此抽象路径名指定的目录。</span><span class="token class-name">String</span> <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取文件的父路径,如果此路径名没有指定父目录，则返回 null。</span><span class="token class-name">String</span> <span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 返回路径名的绝对路径</span><span class="token class-name">File</span> <span class="token function">getAbsoluteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 返回路径名的绝对路径名形式。</span><span class="token keyword">boolean</span> <span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 测试此抽象路径名表示的文件或目录是否存在。</span><span class="token keyword">boolean</span> <span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 如果文件或者目录不存在以文件的形式创建。</span><span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 返回文件或目录的名称。</span><span class="token keyword">boolean</span> <span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 判断是否是一个目录</span><span class="token keyword">boolean</span> <span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 判断是否是一个文件</span><span class="token keyword">long</span> <span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取文件最后一次修改时间，这个毫秒是从1970年到现在的总毫秒数。</span><span class="token keyword">long</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取文件大小，大小是字节。</span><span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取当前目录下所有的子文件。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建一个File对象</span>        <span class="token comment">// File file = new File("D:/myfile");</span>        <span class="token comment">// 判断是否存在！</span>        <span class="token comment">// System.out.println(file.exists());// 不存在返回false</span>        <span class="token comment">// 如果D:/myfile不存在，则以文件的形式创建出来</span>        <span class="token comment">/*if(!file.exists()) &#123;            // 以文件形式新建            file.createNewFile();        &#125;*/</span>        <span class="token comment">// 如果D:\file不存在，则以目录的形式创建出来</span>        <span class="token comment">/*if(!file.exists()) &#123;            // 以目录的形式新建。            file.mkdir();        &#125;*/</span>        <span class="token comment">// 可以创建多重目录吗？</span>        <span class="token comment">// File file = new File("D:/myfile/wwwroot/");</span>        <span class="token comment">/*if(!file.exists()) &#123;            // 多重目录的形式新建。            file.mkdirs();        &#125;*/</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/var/www/html/myfile.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取文件的父路径</span>        <span class="token class-name">String</span> parentPath <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parentPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// D:\var\www\html</span>        <span class="token class-name">File</span> parentFile <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绝对路径："</span> <span class="token operator">+</span> parentFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取绝对路径：D:\var\www\html</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\var\\www\\html\\myfile.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取文件名</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件名："</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 文件名：myfile.txt</span>        <span class="token comment">// 判断是否是一个目录</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>        <span class="token comment">// 判断是否是一个文件</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>        <span class="token comment">// 获取文件最后一次修改时间</span>        <span class="token keyword">long</span> createDate <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这个毫秒是从1970年到现在的总毫秒数。</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>createDate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss SSS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> newDate <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newDate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取文件大小</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件大小是:"</span><span class="token operator">+</span>file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 文件大小是:0字节</span>        <span class="token comment">// File[] listFiles()</span>        <span class="token comment">// 获取当前目录下所有的子文件。</span>        <span class="token class-name">File</span> dirFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dirFile<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> f<span class="token operator">:</span>files<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="目录的拷贝"><a href="#目录的拷贝" class="headerlink" title="目录的拷贝"></a>目录的拷贝</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">// 拷贝目录</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 拷贝源</span>        <span class="token class-name">File</span> srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\course\\02-JavaSE\\document"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 拷贝目标</span>        <span class="token class-name">File</span> destFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\a\\b\\c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用方法拷贝</span>        <span class="token function">copyDir</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">,</span> destFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 拷贝目录     * @param srcFile 拷贝源     * @param destFile 拷贝目标     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyDir</span><span class="token punctuation">(</span><span class="token class-name">File</span> srcFile<span class="token punctuation">,</span> <span class="token class-name">File</span> destFile<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// srcFile如果是一个文件的话，递归结束。</span>            <span class="token comment">// 是文件的时候需要拷贝。</span>            <span class="token comment">// ....一边读一边写。</span>            <span class="token class-name">FileInputStream</span> in <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name">FileOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 读这个文件</span>                in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 写到这个文件中</span>                <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token punctuation">(</span>destFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">)</span> <span class="token operator">?</span> destFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> destFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\\"</span><span class="token punctuation">)</span>  <span class="token operator">+</span> srcFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 一边读一边写</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 一次复制1MB</span>                <span class="token keyword">int</span> readCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>readCount <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> readCount<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>out <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>in <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 获取源下面的子目录</span>        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> srcFile<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">File</span> file <span class="token operator">:</span> files<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 获取所有文件的（包括目录和文件）绝对路径</span>            <span class="token comment">// System.out.println(file.getAbsolutePath());</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 新建对应的目录</span>                <span class="token comment">//System.out.println(file.getAbsolutePath());</span>                <span class="token class-name">String</span> srcDir <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> destDir <span class="token operator">=</span> <span class="token punctuation">(</span>destFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">)</span> <span class="token operator">?</span> destFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> destFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\\"</span><span class="token punctuation">)</span>  <span class="token operator">+</span> srcDir<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">File</span> newFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>destDir<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>newFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    newFile<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 递归调用</span>            <span class="token function">copyDir</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> destFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的IO流</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/javaio-liu/io-liu-gai-shu/io-liu-gai-shu/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/javaio-liu/io-liu-gai-shu/io-liu-gai-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="IO流概述"><a href="#IO流概述" class="headerlink" title="IO流概述"></a>IO流概述</h3><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/javaio-liu/io-liu-gai-shu/io-liu-gai-shu/%E4%BB%80%E4%B9%88%E6%98%AFIO.png" alt="什么是IO"></p><ol><li><p>IO流，什么是IO？</p><ol><li>I : Input，O : Output。通过IO可以完成硬盘文件的读和写。</li></ol></li><li><p>IO流的分类？</p><ol><li><p>一种方式是按照流的方向进行分类：</p><p>以内存作为参照物，往内存中去，叫做输入(Input)。或者叫做读(Read)。从内存中出来，叫做输出(Output)。或者叫做写(Write)。</p></li><li><p>另一种方式是按照读取数据方式不同进行分类：</p><ol><li>有的流是按照字节的方式读取数据，一次读取1个字节byte，等同于一次读取8个二进制位。这种流是万能的，什么类型的文件都可以读取。包括：文本文件，图片，声音文件，视频文件等….</li><li>有的流是按照字符的方式读取数据的，一次读取一个字符，这种流是为了方便读取普通文本文件而存在的，这种流不能读取：图片、声音、视频等文件。只能读取纯文本文件，连word文件都无法读取。</li></ol></li></ol></li><li><p>字母在windows系统中占用1个字节。汉字在Windows系统中占用2个字节。Java中char在2个字节。java采用unicode，2个字节（16位）来表示一个字符。</p></li><li><p>流的分类：输入流、输出流，字节流、字符流</p><ol><li>注意：在java中只要“类名”以Stream结尾的都是字节流。以“Reader&#x2F;Writer”结尾的都是字符流。</li></ol></li><li><p>java中所有的流都是在：java.io.*;下。</p></li><li><p>java IO流的四大家族：</p><ol><li><p>四大家族的首领：四大家族的首领都是抽象类。(abstract class)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>InputStream</span> <span class="token comment">// 字节输入流</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>OutputStream</span> <span class="token comment">// 字节输出流</span>    <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Reader</span> <span class="token comment">// 字符输入流</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Writer</span> <span class="token comment">// 字符输出流</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>所有的流都实现了：</p><ol><li>java.io.Closeable接口，都是可关闭的，都有close()方法。流毕竟是一个管道，这个是内存和硬盘之间的通道，用完之后一定要关闭，不然会耗费(占用)很多资源。养成好习惯，<strong>用完流一定要关闭</strong>。</li></ol></li><li><p>所有的输出流都实现了：</p><ol><li>java.io.Flushable接口，都是可刷新的，都有flush()方法。养成一个好习惯，输出流在最终输出之后，一定要记得flush()，刷新一下。这个刷新表示将通道&#x2F;管道当中剩余未输出的数据强行输出完（清空管道！）刷新的作用就是清空管道。注意：<strong>如果没有flush()可能会导致丢失数据。</strong></li></ol></li></ol></li><li><p>java.io包下主要的流有16个，6大类：</p><ol><li><p>文件专属：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>FileInputStream</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>FileOutputStream</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>FileReader</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>FileWriter</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>转换流：（将字节流转换成字符流）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>InputStreamReader</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>OutputStreamWriter</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>缓冲流专属：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>BufferedReader</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>BufferedWriter</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>BufferedInputStream</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>BufferedOutputStream</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>数据流专属：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>DataInputStream</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>DataOutputStream</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>标准输出流：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>PrintWriter</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>PrintStream</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>对象专属流：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectInputStream</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectOutputStream</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol></li><li><p>参与序列化的类型必须实现java.io.Serializable接口。并且建议将序列化版本号手动的写出来。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">100L</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>IO + Properties联合使用。</p><ol><li>O流：文件的读和写。</li><li>Properties:是一个Map集合，key和value都是String类型。</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java序列化与反序列化</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/javaio-liu/xu-lie-hua-yu-fan-xu-lie-hua/xu-lie-hua-yu-fan-xu-lie-hua/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/javaio-liu/xu-lie-hua-yu-fan-xu-lie-hua/xu-lie-hua-yu-fan-xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<h3 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h3><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/javaio-liu/xu-lie-hua-yu-fan-xu-lie-hua/xu-lie-hua-yu-fan-xu-lie-hua/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96.png" alt="对象的序列化和反序列化"></p><ol><li><p>Java的接口分为标志接口和普通接口。Serializable接口就是一个标志接口。</p></li><li><p>把对象转换为字节序列的过程称为对象的序列化。</p></li><li><p>把字节序列恢复为对象的过程称为对象的反序列化。</p></li><li><p>对象序列化的作用：</p><ol><li>把对象的字节序列永久地保存到硬盘上，通常存放在一个文件中；</li><li>在网络上传送对象的字节序列。</li></ol></li><li><p>序列化过程中出现java.io.NotSerializableException;异常，则说明，该类不支持序列化，该类需要实现Serializable接口，这样该类的对象才支持序列化！！！</p></li><li><p>参与序列化和反序列化的对象，必须实现Serializable接口。</p></li><li><p>注意：通过源代码发现，Serializable接口只是一个标志接口：</p><ol><li>&#96;&#96;&#96;java<br>public interface Serializable {} &#x2F;&#x2F; 这个接口当中什么代码都没有。<pre class="line-numbers language-none"><code class="language-none">   2. 那么它起到一个什么作用呢？      1. 起到标识的作用，标志的作用，java虚拟机看到这个类实现了这个接口，可能会对这个类进行特殊待遇。Serializable这个标志接口是给java虚拟机参考的，java虚拟机看到这个接口之后，会为该类自动生成一个序列化版本号。8. 序列化版本号的作用？用来区分类的。9. java语言中是采用什么机制来区分类的？   1. 第一：首先通过类名进行比对，如果类名不一样，肯定不是同一个类。   2. 第二：如果类名一样，再怎么进行类的区别？靠序列化版本号进行区分。   3. 不同的人编写了同一个类，但“这两个类确实不是同一个类”。这个时候序列化版本就起上作用了。对于java虚拟机来说，java虚拟机是可以区分开这两个类的，因为这两个类都实现了Serializable接口，都有默认的序列化版本号，他们的序列化版本号不一样。所以区分开了。（这是自动生成序列化版本号的好处）10. 自动生成序列化版本号的缺陷？   1. 这种自动生成的序列化版本号缺点是：      一旦代码确定之后，不能进行后续的修改，因为只要修改，必然会重新编译，此时会生成全新的序列化版本号，这个时候java虚拟机会认为这是一个全新的类。（这样就不好了！）所以我们要自己指定序列化版本号。11. 凡是一个类实现了Serializable接口，建议给该类提供一个固定不变的序列化版本号。这样，以后这个类即使代码修改了，但是版本号不变，java虚拟机会认为是同一个类。12. 一次序列化多个对象呢？可以，可以将对象放到集合当中，序列化集合。13. 提示：参与序列化的ArrayList集合以及集合中的元素User都需要实现 java.io.Serializable接口。14. 序列化必须在同一个包下，切必须有序列化版本号。15. 在变量前面加上transient关键字表示游离的，不参与序列化。该变量不参与序列化操作！##### 代码示例###### 序列化代码&#96;&#96;&#96;javaimport java.io.*;import java.util.*;public class Test &#123;    public static void main(String[] args) throws Exception &#123;        List&lt;Student&gt; list &#x3D; new ArrayList&lt;&gt;();        &#x2F;&#x2F; 序列化流        ObjectOutputStream oos &#x3D; new ObjectOutputStream(new FileOutputStream(&quot;D:&#x2F;Test&quot;));        &#x2F;&#x2F; 创建java对象        Student student1 &#x3D; new Student(18,&quot;张三&quot;);        Student student2 &#x3D; new Student(21,&quot;李四&quot;);        &#x2F;&#x2F; 使用list集合序列化多个对象        list.add(new Student(20,&quot;王五&quot;));        list.add(new Student(16,&quot;赵六&quot;));        &#x2F;&#x2F; 序列化单一对象        &#x2F;&#x2F; oos.writeObject(student1);        &#x2F;&#x2F; oos.writeObject(student2);        &#x2F;&#x2F; 序列化一个集合，这个集合对象中放了很多其他对象。        oos.writeObject(list);        &#x2F;&#x2F; 刷新        oos.flush();        &#x2F;&#x2F; 关闭        oos.close();    &#125;&#125;&#x2F;&#x2F; 不实现这个接口抛出java.io.NotSerializableException异常class Student implements Serializable&#123;    &#x2F;&#x2F; Java虚拟机看到Serializable接口之后，会自动生成一个序列化版本号。    &#x2F;&#x2F; 这里没有手动写出来，java虚拟机会默认提供这个序列化版本号。    &#x2F;&#x2F; 建议将序列化版本号手动的写出来。不建议自动生成    private int age;    private String name;    public Student(int age, String name) &#123;        this.age &#x3D; age;        this.name &#x3D; name;    &#125;    @Override    public String toString() &#123;        return &quot;Student&#123;&quot; +&quot;age&#x3D;&quot; + age + &quot;, name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; + &#39;&#125;&#39;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><h6 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Study</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\Test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 反序列化集合</span>        <span class="token comment">// Object obj = ois.readObject();</span>        <span class="token comment">// System.out.println(obj instanceof Student); // true</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> lists <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> lists<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 反序列化单一对象。</span>        <span class="token comment">/*for (int i = 0; i &lt;= 2 ; i++)&#123;            Object obj = ois.readObject();            System.out.println(obj);        &#125;*/</span>        ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="序列化版本号"><a href="#序列化版本号" class="headerlink" title="序列化版本号"></a>序列化版本号</h4><ol><li>修改类的代码，在代码执行的时候不需要修改调用者的代码。</li><li>serialVersionUID的作用<ol><li>serialVersionUID: 字面意思上是序列化的版本号，凡是实现Serializable接口的类都有一个表示序列化版本标识符的静态变量</li><li>增强类的兼容性</li></ol></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 序列化流</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:/Test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建java对象</span>        <span class="token class-name">Student</span> student1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> student2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用list集合序列化多个对象</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">"赵六"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 序列化单一对象</span>        <span class="token comment">// oos.writeObject(student1);</span>        <span class="token comment">// oos.writeObject(student2);</span>        <span class="token comment">// 序列化一个集合，这个集合对象中放了很多其他对象。</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 刷新</span>        oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 关闭</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 不实现这个接口抛出java.io.NotSerializableException异常</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">&#123;</span>    <span class="token comment">// Java虚拟机看到Serializable接口之后，会自动生成一个序列化版本号。</span>    <span class="token comment">// 这里没有手动写出来，java虚拟机会默认提供这个序列化版本号。</span>    <span class="token comment">// 建议将序列化版本号手动的写出来。不建议自动生成</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">100L</span><span class="token punctuation">;</span> <span class="token comment">// java虚拟机识别一个类的时候先通过类名，如果类名一致，再通过序列化版本号。</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">// private transient String name; // transient关键字表示游离的，不参与序列化。name不参与序列化操作！</span>    <span class="token comment">// 过了很久，Student这个类源代码改动了。</span>    <span class="token comment">// 源代码改动之后，需要重新编译，编译之后生成了全新的字节码文件。</span>    <span class="token comment">// 并且class文件再次运行的时候，java虚拟机生成的序列化版本号也会发生相应的改变。</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token comment">//this.name = name;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*@Override    public String toString() &#123;        return "Student&#123;" +"age=" + age + ", name='" + name + '\'' + '&#125;';    &#125;*/</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Student&#123;"</span> <span class="token operator">+</span> <span class="token string">"age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="反序列化-1"><a href="#反序列化-1" class="headerlink" title="反序列化"></a>反序列化</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Study</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\Test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 反序列化集合</span>        <span class="token comment">// Object obj = ois.readObject();</span>        <span class="token comment">// System.out.println(obj instanceof Student); // true</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> lists <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> lists<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 反序列化单一对象。</span>        <span class="token comment">/*for (int i = 0; i &lt;= 2 ; i++)&#123;            Object obj = ois.readObject();            System.out.println(obj);        &#125;*/</span>        ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java标注字节输出流</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/javaio-liu/biao-zhun-de-zi-jie-shu-chu-liu/biao-zhun-de-zi-jie-shu-chu-liu/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/javaio-liu/biao-zhun-de-zi-jie-shu-chu-liu/biao-zhun-de-zi-jie-shu-chu-liu/</url>
      
        <content type="html"><![CDATA[<h3 id="PrintStream：标准的字节输出流"><a href="#PrintStream：标准的字节输出流" class="headerlink" title="PrintStream：标准的字节输出流"></a>PrintStream：标准的字节输出流</h3><p>java.io.PrintStream：标准的字节输出流。默认输出到控制台。</p><p>标准输出流不需要手动close()关闭。</p><p>标准输出流可以改变输出的方向，向不同的地方进行输出。例如文件中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 联合起来写</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 分开写</span>        <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintStream</span> printStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:/myfile.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 修改输出方向，将输出方向修改到"log"文件。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>printStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 再输出</span>        printStream<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello Word!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="日志工具的示例"><a href="#日志工具的示例" class="headerlink" title="日志工具的示例"></a>日志工具的示例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"调用了System类的gc()方法，建议启动垃圾回收"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Log</span><span class="token punctuation">&#123;</span>    <span class="token comment">//记录日志的方法。</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 指向一个日志文件</span>        <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:/log.txt"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 改变输出方向</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 日期当前时间</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss SSS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> newDate <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newDate <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的二维数组</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-shu-zu/java-er-wei-shu-zu/java-er-wei-shu-zu/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-shu-zu/java-er-wei-shu-zu/java-er-wei-shu-zu/</url>
      
        <content type="html"><![CDATA[<h3 id="Java二维数组"><a href="#Java二维数组" class="headerlink" title="Java二维数组"></a>Java二维数组</h3><ol><li><p>二维数组其实是一个特殊的一维数组，特殊在这个一维数组当中的每一个元素是一个一维数组。</p></li><li><p>三维数组是什么？<br>三维数组是一个特殊的二维数组，特殊在这个二维数组中每一个元素是一个一维数组。</p></li><li><p>二维数组静态初始化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span>二维数组中的一维数组的下标<span class="token punctuation">]</span><span class="token punctuation">[</span>一维数组的下标<span class="token punctuation">]</span>对于array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span>来说，其中array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>是一个整体。<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span>是前面array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>执行结束的结果然后再下标<span class="token number">100.</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>：表示第<span class="token number">1</span>个一维数组中的第<span class="token number">1</span>个元素。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 静态初始化二维数组,里面的是3个一维数组。</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArrayStatic <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>intArrayStatic<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3</span>        <span class="token function">arrayPrint</span><span class="token punctuation">(</span>intArrayStatic<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>intArrayStatic<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5</span>        <span class="token comment">// 动态初始化二维数组。</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArrayDynamic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">arrayPrint</span><span class="token punctuation">(</span>intArrayDynamic<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 可以这样写。也是动态初始化</span>        <span class="token function">arrayPrint</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 没有这种语法</span>        <span class="token comment">// arrayPrint(&#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;,&#123;7,8,9&#125;&#125;);</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">arrayPrint</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArray<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 遍历二维数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> intArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> intArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 负责遍历一维数组</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// System.out.print(intArray[i][j]+",");</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Object类型的数组"><a href="#Object类型的数组" class="headerlink" title="Object类型的数组"></a>Object类型的数组</h4><p>Object[]可以装任何引用数据类型的数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 注意:"abc" 这是一个字符串对象，字符串在java中有优待，不需要new也是一个对象。</span>        <span class="token comment">// "abc" 字符串也是java对象，属于String类型。</span>        <span class="token comment">// Object[] 这是一个万能的口袋，这个口袋中可以装任何引用数据类型的数据。</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Myclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">arrayPrint</span><span class="token punctuation">(</span>objs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">arrayPrint</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> objs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>objs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Myclass</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的数组</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-shu-zu/java-shu-zu/java-shu-zu/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-shu-zu/java-shu-zu/java-shu-zu/</url>
      
        <content type="html"><![CDATA[<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ol><li><p>Java语言中的数组是一种引用数据类型。不属于基本数据类型。数组的父类是Object。</p></li><li><p>数组实际上是一个容器，可以同时容纳多个元素。（数组是一个数据的集合。）</p></li><li><p>数组：字面意思是“一组数据”</p></li><li><p>数组当中可以存储“基本数据类型”的数据，也可以存储“引用数据类型”的数据。</p></li><li><p>数组因为是引用类型，所以数组对象是堆内存当中。（数组是存储在堆当中的）</p></li><li><p>数组当中如果存储的是“java对象”的话，实际上存储的是对象的“引用（内存地址）”，数组中不能直接存储java对象。</p></li><li><p>数组一旦创建，在java中规定，长度不可变。（数组长度不可变）</p></li><li><p>数组的分类：一维数组、二维数组、三维数组、多维数组…（一维数组较多，二维数组偶尔使用！）</p></li><li><p>所有的数组对象都有length属性(java自带的)，用来获取数组中元素的个数。</p></li><li><p>java中的数组要求数组中元素的类型统一。比如int类型数组只能存储int类型，引用类型数组只能存储引用类型。</p></li><li><p>数组在内存方面存储的时候，数组中的元素内存地址(存储的每一个元素都是有规则的挨着排列的)是连续的。内存地址连续。这是数组存储元素的特点（特色）。数组实际上是一种简单的数据结构。</p></li><li><p>所有的数组都是拿数组的第一个元素作为整个数组对象的内存地址。（数组中首元素的内存地址作为整个数组对象的内存地址。）</p></li><li><p>数组中每一个元素都是有下标的，下标从0开始，以1递增。最后一个元素的下标是：length-1，下标非常重要，因为我们对数组中元素进行“存取”的时候，都需要通过下标来进行。</p></li><li><p>数组这种数据结构的优点和缺点是什么？<br>优点：查询&#x2F;查找&#x2F;检索某个下标上的元素时效率极高。可以说是查询效率最高的一个数据结构。<br>为什么检索效率高？<br>    第一：每一个元素的内存地址在空间存储上是连续的。<br>    第二：每一个元素类型相同，所以占用空间大小一样。<br>    第三：知道第一个元素内存地址，知道每一个元素占用空间的大小，又知道下标，所以通过一个数学表达式就可以计算出某个下标上元素的内存地址。直接通过内存地址定位元素，所以数组的检索效率是最高的。数组中存储100个元素，或者存储100万个元素，在元素查询&#x2F;检索方面，效率是相同的，因为数组中元素查找的时候不会一个一个找，是通过数学表达式计算出来的。（算出一个内存地址，直接定位的。）<br>缺点：<br>    第一：由于为了保证数组中每个元素的内存地址连续，所以在数组上随机删除或者增加元素的时候，效率较低，因为随机增删元素会涉及到后面元素统一向前或者向后位移的操作。<br>    第二：数组不能存储大数据量，为什么？<br>        因为很难在内存空间上找到一块特别大的连续的内存空间。<br>注意：对于数组中最后一个元素的增删，是没有效率影响的。</p></li><li><p>怎么声明&#x2F;定义一个一维数组？<br>语法格式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1<span class="token punctuation">;</span><span class="token comment">//数据类型[] 数组名字;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>怎么初始化一个一维数组呢？<br>包括两种方式：静态初始化一维数组，动态初始化一维数组。<br>    静态初始化语法格式：        </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2100</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        动态初始化语法格式：        </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 这里的5表示数组的元素个数。初始化一个5个长度的int类型数组，每个元素默认值0</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 初始化6个长度的String类型数组，每个元素默认值null。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>什么时候采用静态初始化方式，什么时候使用动态初始化方式呢？<br>当你创建数组的时候，确定数组中存储哪些具体的元素时，采用静态初始化方式。<br>当你创建数组的时候，不确定将来数组中存储哪些数据，你可以采用动态初始化的方式，预先分配内存空间。</p></li></ol><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-shu-zu/java-shu-zu/java-shu-zu/%E6%95%B0%E7%BB%84%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="数组内存图"></p><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-shu-zu/java-shu-zu/java-shu-zu/%E6%95%B0%E7%BB%84%E7%9A%84%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84.png" alt="数组的内存结构"></p><p>![数组的内存结构 (2)](.&#x2F;数组的内存结构 (2).png)</p><h4 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperStudy</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// main方法的编写方式，还可以采用C++的语法格式哦！</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 声明一个int类型的数组，使用静态初始化的方式</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">521</span><span class="token punctuation">,</span><span class="token number">520</span><span class="token punctuation">,</span><span class="token number">1314</span><span class="token punctuation">,</span><span class="token number">999</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 这是C++风格，不建议java中使用。</span>        <span class="token keyword">int</span> array2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1314</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 所有的数组对象都有length属性</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组中元素的个数"</span> <span class="token operator">+</span> array1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 数组中元素的个数4</span>        <span class="token comment">// System.out.println(array1[6]); //ArrayIndexOutOfBoundsException（比较著名的异常。数组越界异常）</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 给动态初始化的数组赋值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array3<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            array3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 循环遍历数组的每一个元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array3<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Object[] objs中有"</span><span class="token operator">+</span>objs<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token string">"个元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Object[] objs中有3个元素</span>        <span class="token comment">// 由于动态初始化没有赋初值,所以为null</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> objs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>objs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printArray</span><span class="token punctuation">(</span>array2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 与匿名内部类的语法相同,这种适用于动态初始化但是没有赋初值的数组。没有名字</span>        <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// printArray(&#123;1,2,3&#125;);这种事不正确的</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组每一个元素分别是"</span><span class="token operator">+</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="main方法中的String-args"><a href="#main方法中的String-args" class="headerlink" title="main方法中的String[] args"></a>main方法中的String[] args</h4><p>是用来接受用户输入的数据的数组。</p><h5 id="代码实例-1"><a href="#代码实例-1" class="headerlink" title="代码实例"></a>代码实例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*1、main方法上面的“String[] args”有什么用？    分析一下：谁负责调用main方法（JVM）    JVM调用main方法的时候，会自动传一个String数组过来。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperStudy</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这个方法程序员负责写出来，JVM负责调用。JVM调用的时候一定会传一个String数组过来。</span>    <span class="token comment">// 例如:java SuperStudy abc def xyz</span>    <span class="token comment">// 那么这个时候JVM会自动将“abc def xyz”通过空格的方式进行分离，分离完成之后，自动放到“String[] args”数组当中。</span>    <span class="token comment">// 所以main方法上面的String[] args数组主要是用来接收用户输入参数的。</span>    <span class="token comment">// 把abc def xyz 转换成字符串数组：&#123;"abc","def","xyz"&#125;。</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// JVM默认传递过来的这个数组对象的长度？默认0</span>        <span class="token comment">// 通过测试得出：args不是null。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [Ljava.lang.String;@119d7047数组对象</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0</span>        <span class="token comment">// 以下这2行代码表示的含义：数组对象创建了，但是数组中没有任何数据。</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 静态初始化数组，里面没东西。</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户输入的数据是:"</span><span class="token operator">+</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 判断两个字符串是否相等，需要使用equals方法。</span>        <span class="token comment">// if(username.equals("admin") &amp;&amp; password.equals("123"))&#123;</span>        <span class="token comment">// 这样编写是不是可以避免空指针异常。</span>        <span class="token comment">// 采用以下编码风格，及时args[0]和args[1]都是null，也不会出现空指针异常。</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"123456"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录成功，欢迎["</span> <span class="token operator">+</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"]回来"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="一维数组的深入"><a href="#一维数组的深入" class="headerlink" title="一维数组的深入"></a>一维数组的深入</h4><p>数组中存储的类型为：引用数据类型</p><p>对于数组来说，实际上只能存储java对象的“内存地址”。数组中存储的每个元素是“引用”。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SuperStudy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建一个Animal类型的数组</span>        <span class="token class-name">Animal</span> animal1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Animal</span> animal2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Animal</span><span class="token punctuation">[</span><span class="token punctuation">]</span> animals <span class="token operator">=</span> <span class="token punctuation">&#123;</span>animal1<span class="token punctuation">,</span> animal2<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> animals<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/*            Animal animal = animals[i];            animal.move();             */</span>            <span class="token comment">// 代码合并</span>            animals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 创建一个Animal类型的数组，数组当中存储Cat和Bird</span>        <span class="token class-name">Animal</span><span class="token punctuation">[</span><span class="token punctuation">]</span> animals3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> animals3<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 这个取出来的可能是Cat，也可能是Bird，不过肯定是一个Animal</span>            <span class="token comment">// 如果调用的方法是父类中存在的方法不需要向下转型。直接使用父类型引用调用即可。</span>            animals3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 调用子对象特有方法的话，需要向下转型！！！</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>animals3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span>animals3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                cat<span class="token punctuation">.</span><span class="token function">catchMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>animals3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Bird</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">Bird</span> bird <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Bird</span><span class="token punctuation">)</span> animals3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                bird<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Animal move..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cat在走"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">catchMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cat catch Mouse"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Bird Fly!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸟儿在唱歌"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的数组的拷贝</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-shu-zu/java-shu-zu-de-kao-bei/java-shu-zu-de-kao-bei/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-shu-zu/java-shu-zu-de-kao-bei/java-shu-zu-de-kao-bei/</url>
      
        <content type="html"><![CDATA[<h3 id="Java数组的拷贝"><a href="#Java数组的拷贝" class="headerlink" title="Java数组的拷贝"></a>Java数组的拷贝</h3><ol><li>在java开发中，数组长度一旦确定不可变，那么数组满了怎么办？<br>数组满了，需要扩容。</li><li>java中对数组的扩容是：<br>先新建一个大容量的数组，然后将小容量数组中的数据一个一个拷贝到大数组当中。</li><li>结论：<br>数组扩容效率较低。因为涉及到拷贝的问题。所以在以后的开发中请注意：尽可能少的进行数组的拷贝。<br>可以在创建数组对象的时候预估计以下多长合适，最好预估准确，这样可以减少数组的扩容次数。提高效率。</li><li>拷贝引用的时候拷贝的是内存的地址。</li></ol><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 拷贝源（从这个数组中拷贝）</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> src <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1314</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 拷贝目标（拷贝到这个目标数组上）</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newSrc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//System.arraycopy(拷贝源,拷贝源下标,目标数组,目标数组拷贝的下标,拷贝的长度);</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>newSrc<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>src<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">copyPrint</span><span class="token punctuation">(</span>newSrc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyPrint</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newSrc<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newSrc<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newSrc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-shu-zu/java-shu-zu-de-kao-bei/java-shu-zu-de-kao-bei/%E6%95%B0%E7%BB%84%E6%8B%B7%E8%B4%9D%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="数组拷贝内存图"></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的数组的练习</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-shu-zu/java-shu-zu-de-lian-xi/java-shu-zu-de-lian-xi/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-shu-zu/java-shu-zu-de-lian-xi/java-shu-zu-de-lian-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="Java数组的练习"><a href="#Java数组的练习" class="headerlink" title="Java数组的练习"></a>Java数组的练习</h3><h4 id="使用一维数组，模拟栈数据结构。"><a href="#使用一维数组，模拟栈数据结构。" class="headerlink" title="使用一维数组，模拟栈数据结构。"></a>使用一维数组，模拟栈数据结构。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyStack</span> myStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyStack</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 为什么选择Object类型数组？因为这个栈可以存储java中的任何引用类型的数据,因为所有类的父类是Object。</span>    <span class="token comment">// 包括String也可以存储进去。因为String父类也是Object。</span>    <span class="token comment">// 一维数组动态初始化,默认初始化容量是10.</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 栈帧，永远指向栈顶部元素</span>    <span class="token comment">// 那么这个默认初始值应该是多少。注意：最初的栈是空的，一个元素都没有。</span>    <span class="token comment">// private int index = 0; // 如果index采用0，表示栈帧指向了顶部元素的上方。</span>    <span class="token comment">// private int index = -1; // 如果index采用-1，表示栈帧指向了顶部元素。</span>    <span class="token comment">// 给index初始化</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elements<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"压栈失败，栈已满！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 程序能够走到这里，说明栈没满</span>        <span class="token comment">// 向栈中加1个元素，栈帧向上移动一个位置。</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elements<span class="token punctuation">[</span><span class="token operator">++</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>        <span class="token comment">// 在声明一次:所有的System.out.println()方法执行时，如果输出引用的话，自动调用引用的toString()方法。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"压栈"</span> <span class="token operator">+</span> obj <span class="token operator">+</span> <span class="token string">"元素成功，栈帧指向"</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"弹栈失败，栈已空！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 程序能够执行到此处说明栈没有空。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"弹栈"</span> <span class="token operator">+</span> elements<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"元素成功，"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 栈帧向下移动一位。</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"栈帧指向"</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> elements<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实现一个简单的酒店管理系统"><a href="#实现一个简单的酒店管理系统" class="headerlink" title="实现一个简单的酒店管理系统"></a>实现一个简单的酒店管理系统</h4><p>Room</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Room</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> no<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> status<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Room</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Room</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">,</span> <span class="token class-name">String</span> type<span class="token punctuation">,</span> <span class="token keyword">boolean</span> status<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>no<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> status<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> status<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"["</span><span class="token operator">+</span><span class="token string">"房间号"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span><span class="token string">"房间类型"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span><span class="token string">"状态"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">"空闲"</span><span class="token operator">:</span><span class="token string">"占用"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Hotel</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hotel</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 酒店对象,酒店中有二维数组,二维数组模拟大厦。</span>    <span class="token keyword">private</span> <span class="token class-name">Room</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rooms<span class="token punctuation">;</span>    <span class="token comment">// 盖楼通过构造方法来盖楼。</span>    <span class="token keyword">public</span> <span class="token class-name">Hotel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 动态初始化</span>        rooms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Room</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 创建12个Room对象，放到数组当中。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rooms<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rooms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 一层</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    rooms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Room</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"单人间"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 二层</span>                    rooms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Room</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"标准间"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 三层</span>                    rooms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Room</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"总统套房"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printRoomStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rooms<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rooms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Room</span> room <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rooms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>room<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token keyword">int</span> roomNo<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Room</span> room <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rooms<span class="token punctuation">[</span>roomNo <span class="token operator">/</span> <span class="token number">100</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>roomNo <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 修改为占用。</span>        room<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>roomNo <span class="token operator">+</span> <span class="token string">"已订房！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> roomNo<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Room</span> room <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rooms<span class="token punctuation">[</span>roomNo <span class="token operator">/</span> <span class="token number">100</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>roomNo <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 修改为空闲。</span>        room<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>roomNo <span class="token operator">+</span> <span class="token string">"已退房！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Test</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"功能编号对应的功能：[1]表示查看房间列表。[2]表示订房。[3]表示退房。[0]表示退出系统。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Hotel</span> hotel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hotel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入功能编号："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> input <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>input <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                hotel<span class="token punctuation">.</span><span class="token function">printRoomStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>input <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入订房编号："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> roomId <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                hotel<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span>roomId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>input <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入退房编号："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> roomId <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                hotel<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>roomId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>input <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"再见，欢迎下次再来！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入功能编号有误，请重新输入！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的反射机制</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-fan-she-ji-zhi/java-fan-she-ji-zhi/java-fan-she-ji-zhi/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-fan-she-ji-zhi/java-fan-she-ji-zhi/java-fan-she-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h3><ol><li><p>反射机制有什么用？</p><p>通过java语言中的反射机制可以操作字节码文件。（可以读和修改字节码文件。）通过反射机制可以操作代码片段。（class文件。）可以让程序更加灵活。</p></li><li><p>反射机制的相关类在哪个包下？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>反射机制相关的重要的类有哪些？</p><ol><li>java.lang.Class：代表整个字节码，代表一个类型，代表整个类。</li><li>java.lang.reflect.Method：代表字节码中的方法字节码。代表类中的方法。</li><li>java.lang.reflect.Constructor：代表字节码中的构造方法字节码。代表类中的构造方法</li><li>java.lang.reflect.Field：代表字节码中的属性字节码。代表类中的成员变量（静态变量+实例变量）。</li></ol><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span>    <span class="token comment">// Field</span>    <span class="token keyword">int</span> no<span class="token punctuation">;</span>    <span class="token comment">// Constructor</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// Method</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNo</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 整个类属于java.lang.Class</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在java中获取Class的三种方式？</p><p>要操作一个类的字节码，需要首先获取到这个类的字节码</p><ol><li><p>第一种：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> myClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"完整类名带包名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*** Class.forName()* 1、静态方法* 2、方法的参数是一个字符串。* 3、字符串需要的是一个完整类名。* 4、完整类名必须带有包名。java.lang包也不能省略。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第二种：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> myClass <span class="token operator">=</span> 对象<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>第三种：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> myClass1 <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token class-name">Class</span> myClass2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token class-name">Class</span> myClass3 <span class="token operator">=</span> 任何类型<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取Class字节码的第一种方式。</span>        <span class="token class-name">Class</span> myClass1 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// myClass1代表String.class文件，或者说myClasss1代表String类型。</span>        <span class="token class-name">Class</span> myCLass2 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.System"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// // myClass2代表System类型</span>        <span class="token comment">// 获取Class字节码的第二种方式。</span>        <span class="token comment">// java中任何一个对象都有一个方法：getClass()</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> classStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// classStr代表String.class字节码文件，classStr代表String类型。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classStr <span class="token operator">==</span> myClass1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true (==判断的是对象的内存地址。两个变量中保存的内存地址都是一样的，都指向方法区中的字节码文件。)</span>        <span class="token comment">// 获取Class字节码的第三种方式。java语言中任何一种类型，包括基本数据类型，它都有.class属性。</span>        <span class="token class-name">Class</span> myStr <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">// myStr代表String类型</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myStr <span class="token operator">==</span> classStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-fan-she-ji-zhi/java-fan-she-ji-zhi/java-fan-she-ji-zhi/%E5%AD%97%E8%8A%82%E7%A0%81%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="字节码内存图"></p><ol start="5"><li><p>获取了Class之后，可以调用无参数构造方法来实例化对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// myClass代表的就是日期Date类型</span><span class="token class-name">Class</span> myClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.util.Date"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实例化一个Date日期类型的对象</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> myClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一定要注意：</p><p>newInstance()底层调用的是该类型的无参数构造方法。如果没有这个无参数构造方法会出现”实例化”异常。</p></li></ol><h6 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*获取到Class，能干什么?    通过Class的newInstance()方法来实例化对象。    注意：newInstance()方法内部实际上调用了无参数构造方法，必须保证无参构造存在才可以。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 这是不使用反射机制，创建对象</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// User@776ec8df</span>        <span class="token comment">// 下面这段代码是以反射机制的方式创建对象。</span>        <span class="token comment">// 通过反射机制，获取Class，通过Class来实例化对象</span>        <span class="token class-name">Class</span> userClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// userClass代表User类型。</span>        <span class="token comment">// newInstance() 这个方法会调用User这个类的无参数构造方法，完成对象的创建。</span>        <span class="token comment">// 重点是：newInstance()调用的是无参构造，必须保证无参构造是存在的！</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> userClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// User@4eec7777</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li><p>反射机制的优点：反射机制十分的灵活</p><p>java代码写一遍，再不改变java源代码的基础之上，可以做到不同对象的实例化。非常之灵活。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 这种方式代码就写死了。只能创建一个User类型的对象</span>        <span class="token comment">// User user = new User();</span>        <span class="token comment">// 以下代码是灵活的，代码不需要改动，可以修改配置文件，配置文件修改之后，可以创建出不同的实例对象。</span>        <span class="token comment">// 通过IO流读取userinfo.properties文件</span>        <span class="token class-name">FileReader</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src/userinfo.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建属性类对象Map</span>        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// key value都是String</span>        <span class="token comment">// 加载</span>        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fileReader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 关闭流</span>        fileReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 通过key获取value</span>        <span class="token class-name">String</span> className <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"classname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 通过反射机制实例化对象</span>        <span class="token class-name">Class</span> myClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> myClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果你只想让一个类的“静态代码块”执行的话，你可以怎么做？Class.forName()发生了什么？</p><p>记住，重点：如果你只是希望一个类的静态代码块执行，其它代码一律不执行，你可以使用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"完整类名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个方法的执行会导致类加载，类加载时，静态代码块执行。</p><p>这样类就加载，类加载的时候，静态代码块执行！在这里，对该方法的返回值不感兴趣，主要是为了使用“类加载”这个动作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">// Class.forName()这个方法的执行会导致：类加载。</span>        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"MyClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 静态代码块在类加载时执行，并且只执行一次。</span><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态代码块执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>反射机制的重点内容</p><ol><li>通过反射机制访问对象的某个属性。java.lang.reflect.Field</li><li>通过反射机制调用对象的某个方法。</li><li>通过反射机制调用某个构造方法实例化对象。</li><li>通过反射机制获取父类以及父类型接口。</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的反射机制之Constructor类</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-fan-she-ji-zhi/fan-she-constructor-lei-de-xue-xi/fan-she-constructor-lei-de-xue-xi/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-fan-she-ji-zhi/fan-she-constructor-lei-de-xue-xi/fan-she-constructor-lei-de-xue-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="反射Constructor类的学习"><a href="#反射Constructor类的学习" class="headerlink" title="反射Constructor类的学习"></a>反射Constructor类的学习</h3><p>常用方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 返回 Constructor 对象的一个数组，这些对象反映此 Class 对象表示的类声明的所有构造方法。</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span> <span class="token comment">// 返回一个 Constructor 对象，该对象反映此 Class 对象所表示的类或接口的指定构造方法。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> myClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>myClass<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" class "</span><span class="token operator">+</span>myClass<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&#123;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Constructor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructors <span class="token operator">=</span> myClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Constructor</span> constructor<span class="token operator">:</span>constructors<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>constructor<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>constructor<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span>  constructor<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span> parameterType <span class="token operator">:</span> parameterTypes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>parameterType<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>parameterTypes<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                stringBuilder<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">")&#123;&#125;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="反射机制调用构造方法实例化java对象。"><a href="#反射机制调用构造方法实例化java对象。" class="headerlink" title="反射机制调用构造方法实例化java对象。"></a>反射机制调用构造方法实例化java对象。</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 不使用反射机制怎么创建对象</span>        <span class="token class-name">User</span> user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用反射机制怎么创建对象呢？</span>        <span class="token class-name">Class</span> myClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用无参数构造方法</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> myClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用有参数的构造方法怎么办？</span>        <span class="token comment">// 第一步：先获取到这个有参数的构造方法</span>        <span class="token class-name">Constructor</span> constructor1 <span class="token operator">=</span> myClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 第二步：调用构造方法new对象</span>        <span class="token class-name">Object</span> newObj1 <span class="token operator">=</span> constructor1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newObj1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取无参数构造方法</span>        <span class="token class-name">Constructor</span> constructor2 <span class="token operator">=</span> myClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> newObj2 <span class="token operator">=</span> constructor2<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newObj2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取这个类的父类，已经实现了哪些接口？"><a href="#获取这个类的父类，已经实现了哪些接口？" class="headerlink" title="获取这个类的父类，已经实现了哪些接口？"></a>获取这个类的父类，已经实现了哪些接口？</h3><p>主要方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取父类。</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 确定此对象所表示的类或接口实现的接口。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">// String举例</span>        <span class="token class-name">Class</span> strClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取String的父类</span>        <span class="token class-name">Class</span> superClass <span class="token operator">=</span> strClass<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>superClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// java.lang.Object</span>        <span class="token comment">// 获取String类实现的所有接口（一个类可以实现多个接口。）</span>        <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> strClass<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span> inter <span class="token operator">:</span> interfaces<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inter<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的反射机制的Field类</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-fan-she-ji-zhi/fan-she-field-lei-de-xue-xi/fan-she-field-lei-de-xue-xi/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-fan-she-ji-zhi/fan-she-field-lei-de-xue-xi/fan-she-field-lei-de-xue-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="反射Field类的学习"><a href="#反射Field类的学习" class="headerlink" title="反射Field类的学习"></a>反射Field类的学习</h3><h5 id="反射属性Field"><a href="#反射属性Field" class="headerlink" title="反射属性Field"></a>反射属性Field</h5><p>Field翻译为字段，其实就是属性&#x2F;成员，每一个属性相当于一个Field对象。</p><p>Field的常用方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取属性的修饰符列表，但是返回的是一个整数，需要使用Modifier类的toString方法进行转化。</span><span class="token class-name">String</span> <span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 返回源代码中给出的底层类的简称。</span><span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取所有的Field</span><span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取类中所有的public修饰的Field</span><span class="token class-name">Field</span> <span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token comment">// 返回一个 Field 对象，该对象反映此 Class 对象所表示的类或接口的指定已声明字段。</span><span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取全类名</span><span class="token class-name">String</span> <span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取简类名</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取属性的类型</span><span class="token keyword">void</span> <span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> flag<span class="token punctuation">)</span> <span class="token comment">// 将此对象的 accessible 标志设置为指示的布尔值，修改对象的属性的访问控制权限。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Modifier类的常用方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">int</span> mod<span class="token punctuation">)</span> <span class="token comment">// 将getModifiers方法返回的数字转化为相对应的字符串。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span> myClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> className <span class="token operator">=</span> myClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"完整类名："</span> <span class="token operator">+</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 完整类名：java.lang.String</span>        <span class="token class-name">String</span> simpleName <span class="token operator">=</span> myClass<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"简类名："</span> <span class="token operator">+</span> simpleName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 简类名：String</span>        <span class="token comment">// 获取类中所有的public修饰的Field</span>        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> myClass<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fields<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 测试数组中只有2个元素</span>        <span class="token comment">// 取出这个Field</span>        <span class="token class-name">Field</span> field <span class="token operator">=</span> fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> fieldName <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取所有的Field</span>        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fs <span class="token operator">=</span> myClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> f <span class="token operator">:</span> fs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 获取属性的修饰符列表</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回的修饰符是一个数字，每个数字是修饰符的代号！！！</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 可以将这个“代号”数字转换成“字符串”吗？</span>            <span class="token class-name">String</span> modifierString <span class="token operator">=</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>modifierString<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 获取属性的类型</span>            <span class="token class-name">Class</span> fieldType <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> fieldTypeSimpleName <span class="token operator">=</span> fieldType<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fieldTypeSimpleName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 获取属性的名字</span>            <span class="token class-name">String</span> fn <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="通过反射机制，反编译一个类的属性Field"><a href="#通过反射机制，反编译一个类的属性Field" class="headerlink" title="通过反射机制，反编译一个类的属性Field"></a>通过反射机制，反编译一个类的属性Field</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">// 通过反射机制，反编译一个类的属性Field</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 创建这个是为了拼接字符串。</span>        <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> myClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>myClass<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" class "</span><span class="token operator">+</span>myClass<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&#123;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> myClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field<span class="token operator">:</span>fields<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>myClass<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="通过反射机制访问一个java对象的属性"><a href="#通过反射机制访问一个java对象的属性" class="headerlink" title="通过反射机制访问一个java对象的属性"></a>通过反射机制访问一个java对象的属性</h5><p>给属性赋值set，获取属性的值get。</p><p>给对象属性赋值的三要素：</p><ol><li>赋值的对象</li><li>对象的属性</li><li>要赋的值</li></ol><p>读对象属性的二要素：</p><ol><li>获取对象</li><li>使用该对象获取值</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 不使用反射机制，怎么去访问一个对象的属性呢？</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 给属性赋值</span>        user<span class="token punctuation">.</span>no <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">//三要素：给s对象的no属性赋值123，要素1：对象user，要素2：no属性，要素3：1111</span>        <span class="token comment">// 读属性值</span>        <span class="token comment">// 两个要素：获取user对象的no属性的值。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用反射机制，怎么去访问一个对象的属性。（set get）</span>        <span class="token class-name">Class</span> myClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> myClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// obj就是User对象。（底层调用无参数构造方法）</span>        <span class="token comment">// 获取no属性（根据属性的名称来获取Field）</span>        <span class="token class-name">Field</span> noFiled <span class="token operator">=</span> myClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 给obj对象(Student对象)的no属性赋值</span>        <span class="token comment">/*        虽然使用了反射机制，但是三要素还是缺一不可：            要素1：obj对象            要素2：no属性            要素3：666值        注意：反射机制让代码复杂了，但是为了一个“灵活”，这也是值得的。         */</span>        noFiled<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 读取属性的值</span>        <span class="token comment">// 两个要素：获取obj对象的no属性的值。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>noFiled<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 可以访问私有的属性吗？</span>        <span class="token class-name">Field</span> nameField <span class="token operator">=</span> myClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 打破封装（反射机制的缺点：打破封装，可能会给不法分子留下机会！！！）</span>        <span class="token comment">// 这样设置完之后，在外部也是可以访问private的。</span>        nameField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 给name属性赋值</span>        nameField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"jackson"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取name属性的值</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nameField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的反射机制的Method类</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-fan-she-ji-zhi/fan-she-method-lei-de-xue-xi/fan-she-method-lei-de-xue-xi/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-fan-she-ji-zhi/fan-she-method-lei-de-xue-xi/fan-she-method-lei-de-xue-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="反射Method类的学习"><a href="#反射Method类的学习" class="headerlink" title="反射Method类的学习"></a>反射Method类的学习</h3><p>Java中依靠方法名和参数列表，来区分方法。</p><p>Method类常用的方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Method</span> <span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取所有的方法，其中：包括公共、保护、默认（包）访问和私有方法，返回 Method 对象的一个数组，但不包括继承的方法。</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 得到Method的返回值类型。</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 返回Method的形参，是一个数组</span><span class="token class-name">Method</span> <span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span> <span class="token comment">// 返回一个 Method 对象，一个方法对象。</span><span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token comment">// 对带有指定参数的指定对象调用由此 Method 对象表示的底层方法。传入参数调用方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取类</span>        <span class="token class-name">Class</span> myClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取所有的Method（包括私有的！）</span>        <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> myClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>methods<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>        <span class="token comment">// 遍历Method</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token operator">:</span>methods<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 获取修饰符列表</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 获取方法的返回值类型</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 获取方法名</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 方法的修饰符列表（一个方法的参数可能会有多个。）</span>            <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span> pt<span class="token operator">:</span>parameterTypes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pt<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="反编译一个类的方法"><a href="#反编译一个类的方法" class="headerlink" title="反编译一个类的方法"></a>反编译一个类的方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Modifier</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> myClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>myClass<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" class "</span><span class="token operator">+</span>myClass<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&#123;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> myClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token operator">:</span>methods<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>myClass<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 参数列表</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span> pt<span class="token operator">:</span>parameterTypes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>pt<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>parameterTypes<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// 删除指定下标位置上的字符</span>                stringBuilder<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">")&#123;&#125;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过反射机制调用一个对象的方法？"><a href="#通过反射机制调用一个对象的方法？" class="headerlink" title="通过反射机制调用一个对象的方法？"></a>通过反射机制调用一个对象的方法？</h3><p>反射机制，让代码很具有通用性，可变化的内容都是写到配置文件当中，将来修改配置文件之后，创建的对象不一样了，调用的方法也不同了，java代码不需要做任何改动。这就是反射机制的魅力。</p><p>调用方法的四要素：</p><ol><li>相应的对象</li><li>相应对象的方法</li><li>方法传入的实参列表</li><li>方法的返回值</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 不使用反射机制，怎么调用方法</span>        <span class="token comment">// 创建对象</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用方法</span>        <span class="token comment">/*        要素分析：            要素1：对象user            要素2：login方法名            要素3：实参列表            要素4：返回值         */</span>        <span class="token keyword">boolean</span> loginSuccess <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>loginSuccess <span class="token operator">?</span> <span class="token string">"登录成功"</span> <span class="token operator">:</span> <span class="token string">"登录失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用反射机制来调用一个对象的方法该怎么做？</span>        <span class="token class-name">Class</span> userClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建对象</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> userClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取Method(方法)</span>        <span class="token class-name">Method</span> loginMethod <span class="token operator">=</span> userClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用方法</span>        <span class="token comment">// 调用方法有几个要素？ 也需要4要素。</span>        <span class="token comment">// 反射机制中最最最最最重要的一个方法，必须记住。</span>        <span class="token comment">/*        四要素：        loginMethod方法        obj对象        "admin","123" 实参        retValue 返回值         */</span>        <span class="token class-name">Object</span> retValue <span class="token operator">=</span> loginMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>retValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何创建线程</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/chuang-jian-xian-cheng-de-san-chong-fang-shi/chuang-jian-xian-cheng-de-san-chong-fang-shi/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/chuang-jian-xian-cheng-de-san-chong-fang-shi/chuang-jian-xian-cheng-de-san-chong-fang-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="创建线程的三种方式"><a href="#创建线程的三种方式" class="headerlink" title="创建线程的三种方式"></a>创建线程的三种方式</h3><h3 id="创建线程的主要两种方式"><a href="#创建线程的主要两种方式" class="headerlink" title="创建线程的主要两种方式"></a>创建线程的主要两种方式</h3><ol><li>实现线程的第一种方式：编写一个类，直接继承java.lang.Thread，重写run方法。</li><li>实现线程的第二种方式：编写一个类实现java.lang.Runnable接口。实现run方法。</li><li>怎么创建线程对象？ new就行了。怎么启动线程呢？ 调用线程对象的start()方法。</li><li>注意：第二种方式创建的类不是一个线程类，是一个可运行的类。需要使用Thread类将其转换为一个线程类。</li><li>注意：亘古不变的道理：方法体当中的代码永远都是自上而下的顺序依次逐行执行的。</li><li>以下程序的输出结果有这样的特点：有先有后。有多有少。<ol><li>因为这是程序中的线程对CPU的占先权来决定的。（时间片与最先执行的权利）</li></ol></li><li>一个程序最先运行至少有两个线程，一个是主线程即main方法，另一个则是JVM的垃圾回收器的线程GC。</li><li>1个线程。（因为程序只有1个栈。）一个栈中，自上而下的顺序依次逐行执行！</li><li>第二种方式实现接口比较常用，因为一个类实现了接口，它还可以去继承其它的类，更灵活。</li></ol><h5 id="第一种方式：java-lang-Thread，重写run方法"><a href="#第一种方式：java-lang-Thread，重写run方法" class="headerlink" title="第一种方式：java.lang.Thread，重写run方法"></a>第一种方式：java.lang.Thread，重写run方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 这里是main方法，这里的代码属于主线程，在主栈中运行。</span>        <span class="token comment">// 新建一个分支线程对象</span>        <span class="token class-name">MyThread</span> myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 启动线程</span>        <span class="token comment">// myThread.run(); // 不会启动线程，不会分配新的分支栈。（这种方式就是单线程。）</span>        <span class="token comment">// start()方法的作用是：启动一个分支线程，在JVM中开辟一个新的栈空间，这段代码任务完成之后，瞬间就结束了。</span>        <span class="token comment">// 这段代码的任务只是为了开启一个新的栈空间，只要新的栈空间开出来，start()方法就结束了。线程就启动成功了。</span>        <span class="token comment">// 启动成功的线程会自动调用run方法，并且run方法在分支栈的栈底部（压栈）。</span>        <span class="token comment">// run方法在分支栈的栈底部，main方法在主栈的栈底部。run和main是平级的。</span>        myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这里的代码还是运行在主线程中。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程--->"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 编写程序，这段程序运行在分支线程中（分支栈）。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"分支线程--->"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="调用类的run方法"><a href="#调用类的run方法" class="headerlink" title="调用类的run方法"></a>调用类的run方法</h6><p>不会启动线程，不会分配新的分支栈。（这种方式就是单线程。）</p><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/chuang-jian-xian-cheng-de-san-chong-fang-shi/chuang-jian-xian-cheng-de-san-chong-fang-shi/%E7%BA%BF%E7%A8%8B%E7%9A%84run.png" alt="线程的run"></p><h6 id="调用线程的start方法启动线程"><a href="#调用线程的start方法启动线程" class="headerlink" title="调用线程的start方法启动线程"></a>调用线程的start方法启动线程</h6><p>启动一个分支线程，在JVM中开辟一个新的栈空间，这段代码任务完成之后，瞬间就结束了。这段代码的任务只是为了开启一个新的栈空间，只要新的栈空间开出来，start()方法就结束了。线程就启动成功了。启动成功的线程会自动调用run方法，并且run方法在分支栈的栈底部（压栈）。run方法在分支栈的栈底部，main方法在主栈的栈底部。run和main是平级的。</p><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/chuang-jian-xian-cheng-de-san-chong-fang-shi/chuang-jian-xian-cheng-de-san-chong-fang-shi/%E7%BA%BF%E7%A8%8B%E7%9A%84start.png" alt="线程的start"></p><h5 id="实现线程的第二种方式：编写一个类实现java-lang-Runnable接口。实现run方法"><a href="#实现线程的第二种方式：编写一个类实现java-lang-Runnable接口。实现run方法" class="headerlink" title="实现线程的第二种方式：编写一个类实现java.lang.Runnable接口。实现run方法"></a>实现线程的第二种方式：编写一个类实现java.lang.Runnable接口。实现run方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建一个可运行的对象</span>        <span class="token comment">// MyRunnable myRunnable = new MyRunnable();</span>        <span class="token comment">// 将可运行的对象封装成一个线程对象</span>        <span class="token comment">// Thread thread = new Thread(myRunnable);</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 合并代码</span>        <span class="token comment">// 启动线程</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程--->"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 这并不是一个线程类，是一个可运行的类。它还不是一个线程。</span><span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"分支线程--->"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="采用匿名内部类的方式"><a href="#采用匿名内部类的方式" class="headerlink" title="采用匿名内部类的方式"></a>采用匿名内部类的方式</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建线程对象，采用匿名内部类方式。</span>        <span class="token comment">// 这是通过一个没有名字的类，new出来的对象。</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"分支线程--->"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 启动线程</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程--->"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现线程的第三种方式"><a href="#实现线程的第三种方式" class="headerlink" title="实现线程的第三种方式"></a>实现线程的第三种方式</h3><p>实现线程的第三种方式：FutureTask方式，实现Callable接口。这种方式实现的线程可以获取线程的返回值。之前的那两种方式是无法获取线程返回值的，因为run方法返回void。</p><p>思考：</p><p>系统委派一个线程去执行一个任务，该线程执行完任务之后，可能会有一个执行结果，我们怎么能拿到这个执行结果呢？<br>使用第三种方式：FutureTask方式，实现Callable接口方式。</p><p>这种方式的优点：可以获取到线程的执行结果。</p><p>这种方式的缺点：效率比较低，在获取t线程执行结果的时候，当前线程受阻塞，效率较低。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutionException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">FutureTask</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 第一步：创建一个“未来任务类”对象。</span>        <span class="token comment">// 参数非常重要，需要给一个Callable接口实现类对象。\</span>        <span class="token class-name">FutureTask</span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span> <span class="token comment">// call()方法就相当于run方法。只不过这个有返回值</span>                <span class="token comment">// 线程执行一个任务，执行之后可能会有一个执行结果</span>                <span class="token comment">// 模拟执行</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"call method begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"call method end!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token comment">//自动装箱(300结果变成Integer)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建线程对象</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 启动线程</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这里是main方法，这是在主线程中。</span>        <span class="token comment">// 在主线程中，怎么获取thread线程的返回结果？</span>        <span class="token comment">// get()方法的执行会导致“当前线程阻塞”</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程执行结果:"</span> <span class="token operator">+</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// main方法这里的程序要想执行必须等待get()方法的结束</span>        <span class="token comment">// 而get()方法可能需要很久。因为get()方法是为了拿另一个线程的执行结果</span>        <span class="token comment">// 另一个线程执行是需要时间的。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/duo-xian-cheng-gai-shu/duo-xian-cheng-gai-shu/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/duo-xian-cheng-gai-shu/duo-xian-cheng-gai-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="多线程概述"><a href="#多线程概述" class="headerlink" title="多线程概述"></a>多线程概述</h3><ol><li><p>什么是进程？什么是线程？</p><ol><li>进程是一个应用程序（1个进程是一个软件）。线程是一个进程中的执行场景&#x2F;执行单元。一个进程可以启动多个线程。</li></ol></li><li><p>对于java程序来说，当在DOS命令窗口中输入：java HelloWorld 回车之后。会先启动JVM，而JVM就是一个进程。JVM再启动一个主线程调用main方法。同时再启动一个垃圾回收线程负责看护，回收垃圾。最起码，现在的java程序中至少有两个线程并发，一个是垃圾回收线程，一个是执行main方法的主线程。</p></li><li><p>进程和线程是什么关系？举个例子</p><ol><li>进程可以看做是现实生活当中的公司。线程可以看做是公司当中的某个员工。</li><li>火车站，可以看做是一个进程。火车站中的每一个售票窗口可以看做是一个线程。我在窗口1购票，你可以在窗口2购票，你不需要等我，我也不需要等你。所以多线程并发可以提高效率。</li></ol></li><li><p>注意：进程A和进程B的内存独立不共享。</p><p>英雄联盟是一个进程，微信是一个进程。这两个进程是独立的，不共享资源。</p></li><li><p>线程A和线程B呢？</p><ol><li>在java语言中：线程A和线程B，堆内存和方法区内存共享。但是栈内存独立，一个线程一个栈。假设启动10个线程，会有10个栈空间，每个栈和每个栈之间，互不干扰，各自执行各自的，这就是多线程并发。多线程并发可以提高效率。</li></ol></li><li><p>java中之所以有多线程机制，目的就是为了提高程序的处理效率。</p></li><li><p>main方法结束后程序可能也不会结束：</p><ol><li>使用了多线程机制之后，main方法结束，是不是有可能程序也不会结束。main方法结束只是主线程结束了，主栈空了，其它的栈(线程)可能还在压栈弹栈。</li></ol></li><li><p>对于单核的CPU来说，真的可以做到真正的多线程并发吗？</p><ol><li>对于多核的CPU电脑来说，真正的多线程并发是没问题的。4核CPU表示同一个时间点上，可以真正的有4个进程并发执行。</li><li>单核的CPU表示只有一个大脑：<ol><li>不能够做到真正的多线程并发，但是可以做到给人一种“多线程并发”的感觉。</li><li>对于单核的CPU来说，在某一个时间点上实际上只能处理一件事情，但是由于CPU的处理速度极快，多个线程之间频繁切换执行，跟人来的感觉是：多个事情同时在做！！！线程A：播放音乐，线程B：运行游戏，线程A和线程B频繁切换执行，人类会感觉音乐一直在播放，游戏一直在运行，给我们的感觉是同时并发的。</li></ol></li></ol></li><li><p>什么是真正的多线程并发？</p><ol><li>t1线程执行t1的。t2线程执行t2的。t1不会影响t2，t2也不会影响t1。这叫做真正的多线程并发。</li></ol></li><li><p>一个线程一个栈。</p></li></ol><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/duo-xian-cheng-gai-shu/duo-xian-cheng-gai-shu/%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E4%B8%80%E4%B8%AA%E6%A0%88.png" alt="一个线程一个栈"></p><h5 id="判断一下代码有多少个线程？1个线程"><a href="#判断一下代码有多少个线程？1个线程" class="headerlink" title="判断一下代码有多少个线程？1个线程"></a>判断一下代码有多少个线程？1个线程</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*分析以下程序，有几个线程，除垃圾回收线程之外。有几个线程？    1个线程。（因为程序只有1个栈。）    一个栈中，自上而下的顺序依次逐行执行！ */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m1 begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m1 over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m2 begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m2 over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m3 execute!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/duo-xian-cheng-gai-shu/duo-xian-cheng-gai-shu/%E5%88%A4%E6%96%AD%E6%9C%89%E5%A4%9A%E5%B0%91%E4%B8%AA%E7%BA%BF%E7%A8%8B.png" alt="判断有多少个线程"></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java守护线程</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/shou-hu-xian-cheng/shou-hu-xian-cheng/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/shou-hu-xian-cheng/shou-hu-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><ol><li><p>java语言中线程分为两大类：</p><ol><li>一类是：用户线程</li><li>一类是：守护线程（后台线程）其中具有代表性的就是：垃圾回收线程（守护线程）。</li></ol></li><li><p>守护线程的特点：</p><p>一般守护线程是一个死循环，所有的用户线程只要结束，守护线程自动结束。</p></li><li><p>注意：主线程main方法是一个用户线程。</p></li><li><p>当用户线程结束，守护线程自动终止。</p></li><li><p>守护线程用在什么地方呢？</p><p>例如：每天00:00的时候系统数据自动备份。这个需要使用到定时器，并且我们可以将定时器设置为守护线程。一直在那里看着，没到00:00的时候就备份一次。所有的用户线程如果结束了，守护线程自动退出，没有必要进行数据备份了。</p></li><li><p>锁在目前知识范围内知道有两种：一种是排他锁，另一种是互斥锁。</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WardDataThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"MyThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 启动线程之前，将线程设置为守护线程,当主线程结束时，守护线程自动结束。</span>        <span class="token comment">// 若不设置的话则主线程结束，那个不是守护线程，分支线程则继续执行。</span>        thread<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--->"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">WardDataThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 即使是死循环，但由于该线程是守护者，当用户线程结束，守护线程自动终止。</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--->"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的定时器思想</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/ding-shi-qi/ding-shi-qi/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/ding-shi-qi/ding-shi-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><ol><li>定时器的作用：间隔特定的时间，执行特定的程序。</li><li>在java中可以采用多种方式实现定时器：<ol><li>可以使用sleep方法，睡眠，设置睡眠时间，没到这个时间点醒来，执行任务。这种方式是最原始的定时器。</li><li>在java的类库中已经写好了一个定时器：java.util.Timer，可以直接拿来用。</li></ol></li></ol><p>Timer类的常用方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 创建一个新计时器。</span><span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> isDaemon<span class="token punctuation">)</span> <span class="token comment">// 创建一个新计时器，可以指定其相关的线程作为守护程序运行。</span><span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token comment">// 创建一个新计时器，其相关的线程具有指定的名称。</span><span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isDaemon<span class="token punctuation">)</span> <span class="token comment">// 创建一个新计时器，其相关的线程具有指定的名称，并且可以指定作为守护程序运行。</span><span class="token keyword">void</span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token class-name">TimerTask</span> task<span class="token punctuation">,</span> <span class="token keyword">long</span> delay<span class="token punctuation">,</span> <span class="token keyword">long</span> period<span class="token punctuation">)</span> <span class="token comment">// 安排指定的任务从指定的延迟后开始进行重复的固定延迟执行。schedule(定时任务, 第一次执行时间, 间隔多久执行一次);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">// 使用定时器指定定时任务。</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 创建定时器对象</span>        <span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Timer timer = new Timer(true); // 守护线程的方式</span>        <span class="token comment">// 指定定时任务</span>        <span class="token comment">// timer.schedule(定时任务, 第一次执行时间, 间隔多久执行一次);</span>        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> firstTime <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2020-03-14 09:30:30"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 也可以使用匿名内部类方式</span>        timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> firstTime<span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 编写一个定时任务类</span><span class="token comment">// 假设这是一个记录日志的定时任务</span><span class="token keyword">class</span> <span class="token class-name">MyTimer</span> <span class="token keyword">extends</span> <span class="token class-name">TimerTask</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 编写你需要执行的任务就行了。</span>        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH-mm-ss SSS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> strTime <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sdf <span class="token operator">+</span> <span class="token string">":成功完成了一次数据备份！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的线程安全问题分析</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/bing-fa-de-an-quan-wen-ti-gai-shu/bing-fa-de-an-quan-wen-ti-gai-shu/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/bing-fa-de-an-quan-wen-ti-gai-shu/bing-fa-de-an-quan-wen-ti-gai-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="并发的安全问题概述"><a href="#并发的安全问题概述" class="headerlink" title="并发的安全问题概述"></a>并发的安全问题概述</h3><ol><li><p>什么时候数据在多线程并发的环境下会存在安全问题呢？</p><ol><li>三个条件：<ol><li>条件1：多线程并发。</li><li>条件2：有共享数据。</li><li>条件3：共享数据有修改的行为。</li><li>满足以上3个条件之后，就会存在线程安全问题。</li></ol></li></ol></li><li><p>怎么解决线程安全问题呢？</p><ol><li>当多线程并发的环境下，有共享数据，并且这个数据还会被修改，此时就存在线程安全问题，怎么解决这个问题？<ol><li>线程排队执行。（不能并发）。用排队执行解决线程安全问题。这种机制被称为：<strong>线程同步机制。</strong></li><li>专业术语叫做：线程同步，实际上就是线程不能并发了，线程必须排队执行。</li></ol></li><li>怎么解决线程安全问题呀？使用“线程同步机制”。</li></ol></li><li><p>线程同步就是线程排队了，线程排队了就会牺牲一部分效率，没办法，数据安全第一位，只有数据安全了，我们才可以谈效率。数据不安全，没有效率的事儿。</p></li><li><p>说到线程同步这块，涉及到这两个专业术语：</p><ol><li><p>异步编程模型：</p><p>线程t1和线程t2，各自执行各自的，t1不管t2，t2不管t1，谁也不需要等谁，这种编程模型叫做：异步编程模型。其实就是：多线程并发（效率较高。）<strong>异步就是并发。</strong></p></li><li><p>同步编程模型：</p><p>线程t1和线程t2，在线程t1执行的时候，必须等待t2线程执行结束，或者说在t2线程执行的时候，必须等待t1线程执行结束，两个线程之间发生了等待关系，这就是同步编程模型。效率较低。线程排队执行。<strong>同步就是排队。</strong></p></li></ol></li><li><p><strong>Java中的三大变量与线程的问题？</strong></p><ol><li><p>成员变量：</p><ol><li>实例变量：在堆中。</li><li>静态变量：在方法区。</li></ol></li><li><p>局部变量：在栈中。</p></li><li><p>以上三大变量中：</p><p>局部变量永远都不会存在线程安全问题。因为局部变量不共享。<strong>（一个线程一个栈。）</strong>局部变量在栈中。所以局部变量永远都不会共享。</p><p>实例变量在堆中，堆只有1个。静态变量在方法区中，方法区只有1个。堆和方法区都是多线程共享的，所以可能存在线程安全问题。</p></li><li><p>局部变量+常量：不会有线程安全问题。</p></li><li><p>成员变量：可能会有线程安全问题。</p></li></ol></li><li><p>局部变量对于线程安全的类与线程不安全的类如何选择：</p><ol><li><p>对于StringBuilder和StringBuffer类：</p><p>建议使用：StringBuilder。因为局部变量不存在线程安全问题。选择StringBuilder。StringBuffer效率比较低。</p></li><li><p>ArrayList是非线程安全的。</p></li><li><p>Vector是线程安全的。</p></li><li><p>HashMap与HashSet是非线程安全的。</p></li><li><p>Hashtable是线程安全的。</p></li></ol></li><li><p>以后开发中应该怎么解决线程安全问题？</p><ol><li><p>是一上来就选择线程同步吗？使用synchronized吗？</p><p>不是，synchronized会让程序的执行效率降低，用户体验不好。系统的用户吞吐量降低。用户体验差。在不得已的情况下再选择线程同步机制。</p></li><li><p>解决方案：</p><ol><li>第一种方案：尽量使用局部变量代替“实例变量和静态变量”。</li><li>第二种方案：如果必须是实例变量，那么可以考虑创建多个对象，这样实例变量的内存就不共享了。（一个线程对应1个对象，100个线程对应100个对象，对象不共享，就没有数据安全问题了。）</li><li>第三种方案：如果不能使用局部变量，对象也不能创建多个，这个时候就只能选择synchronized了。线程同步机制。</li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/sheng-chan-zhe-he-xiao-fei-zhe-mo-shi/sheng-chan-zhe-he-xiao-fei-zhe-mo-shi/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/sheng-chan-zhe-he-xiao-fei-zhe-mo-shi/sheng-chan-zhe-he-xiao-fei-zhe-mo-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="Object类中的wait和notify方法。"><a href="#Object类中的wait和notify方法。" class="headerlink" title="Object类中的wait和notify方法。"></a>Object类中的wait和notify方法。</h3><p>关于Object类中的wait和notify方法。（生产者和消费者模式！）</p><ol><li><p>第一：wait和notify方法不是线程对象的方法，是java中任何一个java对象都有的方法，因为这两个方式是Object类中自带的。wait方法和notify方法不是通过线程对象调用，不是这样的：thread.wait()，也不是这样的：thread.notify()..不对。</p></li><li><p>第二：wait()方法作用？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>表示：</p><p>让正在o对象上活动的线程进入等待状态，无期限等待，直到被唤醒为止。obj.wait();方法的调用，会让“当前线程（正在obj对象上活动的线程）”进入等待状态。</p></li><li><p>第三：notify()方法作用？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>表示：</p><p>唤醒正在obj对象上等待的线程。</p></li><li><p>还有一个notifyAll()方法：这个方法是唤醒obj对象上处于等待的所有线程。</p></li></ol><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/sheng-chan-zhe-he-xiao-fei-zhe-mo-shi/sheng-chan-zhe-he-xiao-fei-zhe-mo-shi/wait%E5%92%8Cnotify%E6%96%B9%E6%B3%95%E7%9A%84%E7%90%86%E8%A7%A3.png" alt="wait和notify方法的理解"></p><h3 id="生产者和消费者模式"><a href="#生产者和消费者模式" class="headerlink" title="生产者和消费者模式"></a>生产者和消费者模式</h3><p>使用wait方法和notify方法实现“生产者和消费者模式”</p><ol><li><p>什么是“生产者和消费者模式”？</p><p>生产线程负责生产，消费线程负责消费。生产线程和消费线程要达到均衡。这是一种特殊的业务需求，在这种特殊的情况下需要使用wait方法和notify方法。</p></li><li><p>wait和notify方法不是线程对象的方法，是普通java对象都有的方法。</p></li><li><p>wait方法和notify方法建立在线程同步的基础之上。因为多线程要同时操作一个仓库。有线程安全问题。</p></li><li><p>wait方法作用：obj.wait()让正在obj对象上活动的线程thread进入等待状态，并且释放掉thread线程之前占有的obj对象的锁。</p></li><li><p>notify方法作用：obj.notify()让正在obj对象上等待的线程唤醒，只是通知，不会释放obj对象上之前占有的锁。</p></li><li><p>主要方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 在其他线程调用此对象的 notify() 方法或 notifyAll() 方法前，导致当前线程等待。</span><span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 唤醒在此对象监视器上等待的单个线程。</span><span class="token keyword">void</span> <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 唤醒在此对象监视器上等待的所有线程。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/sheng-chan-zhe-he-xiao-fei-zhe-mo-shi/sheng-chan-zhe-he-xiao-fei-zhe-mo-shi/%E7%94%9F%E4%BA%A7%E8%80%85%E5%92%8C%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F.png" alt="生产者和消费者模式"></p><p>模拟这样一个需求：</p><p>仓库我们采用List集合。List集合中假设只能存储1个元素。1个元素就表示仓库满了。如果List集合中元素个数是0，就表示仓库空了。保证List集合中永远都是最多存储1个元素。必须做到这种效果：生产1个消费1个。</p><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建1个仓库对象，共享的。</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建两个线程对象</span>        <span class="token comment">// 生产者线程</span>        <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 消费者线程</span>        <span class="token class-name">Thread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"生产者线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"消费者线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 生产线程</span><span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 仓库</span>    <span class="token keyword">private</span> <span class="token class-name">List</span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token class-name">List</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 一直生产（使用死循环来模拟一直生产）</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 给仓库对象list加锁。</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 大于0，说明仓库中已经有1个元素了。</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// 当前线程进入等待状态，并且释放Producer之前占有的list集合的锁。</span>                        list<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 程序能够执行到这里说明仓库是空的，可以生产</span>                <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--->"</span> <span class="token operator">+</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 唤醒消费者进行消费</span>                list<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 唤醒在此对象监视器上等待的所有线程。</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 消费线程</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 仓库</span>    <span class="token keyword">private</span> <span class="token class-name">List</span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token class-name">List</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 一直消费</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 仓库已经空了。</span>                    <span class="token comment">// 消费者线程等待，释放掉list集合的锁</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        list<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 程序能够执行到此处说明仓库中有数据，进行消费。</span>                <span class="token class-name">Object</span> obj <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"------>"</span> <span class="token operator">+</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 唤醒生产者生产。</span>                list<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 唤醒在此对象监视器上等待的所有线程。</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java死锁</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/si-suo/si-suo/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/si-suo/si-suo/</url>
      
        <content type="html"><![CDATA[<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p><img src="/./006-%E6%AD%BB%E9%94%81.png" alt="006-死锁"></p><h6 id="自己实现的死锁的代码"><a href="#自己实现的死锁的代码" class="headerlink" title="自己实现的死锁的代码"></a>自己实现的死锁的代码</h6><p>千万不要再程序中这样写，这样很难调试。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// myThread1和myThread2两个线程共享obj1,obj2</span>        <span class="token class-name">Thread</span> myThread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread1</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> myThread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread2</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"myThread1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"myThread2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyThread1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> obj1<span class="token punctuation">;</span>    <span class="token class-name">Object</span> obj2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyThread1</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj1<span class="token punctuation">,</span> <span class="token class-name">Object</span> obj2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj1 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj2 <span class="token operator">=</span> obj2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyThread2</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> obj1<span class="token punctuation">;</span>    <span class="token class-name">Object</span> obj2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyThread2</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj1<span class="token punctuation">,</span> <span class="token class-name">Object</span> obj2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj1 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj2 <span class="token operator">=</span> obj2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线程同步机制</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/xian-cheng-tong-bu-ji-zhi-synchronized/xian-cheng-tong-bu-ji-zhi-synchronized/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/xian-cheng-tong-bu-ji-zhi-synchronized/xian-cheng-tong-bu-ji-zhi-synchronized/</url>
      
        <content type="html"><![CDATA[<h3 id="线程同步机制synchronized"><a href="#线程同步机制synchronized" class="headerlink" title="线程同步机制synchronized"></a>线程同步机制synchronized</h3><ol><li><p>如果有一部分代码必须是线程排队的，不能并发。一个线程把这里的代码全部执行结束之后，另一个线程才能进来。需要使用线程同步机制</p></li><li><p>线程同步机制的语法是：</p><ol><li><p>使用同步代码块的方式，这种方式比较灵活。修饰一个代码块，被修饰的代码块称为同步语句块，其作用的范围是大括号{}括起来的代码，作用的对象是调用这个代码块的对象；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>线程共享对象<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 线程同步代码块。</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在实例方法上使用synchronized，例如：</p><ol><li>synchronized出现在实例方法上，一定锁的是this。 没得挑。只能是this。不能是其他的对象了。所以这种方式不灵活。</li><li>缺点：synchronized出现在实例方法上，表示整个方法体都需要同步，可能会无故扩大同步的范围，导致程序的执行效率降低。所以这种方式不常用。</li><li>synchronized使用在实例方法上有什么优点？代码写的少了。节俭了。</li><li>如果共享的对象就是this，并且需要同步的代码块是整个方法体，建议使用这种方式。</li><li>这种方式表示共享对象一定是this，并且同步代码块是整个方法体。但是扩大了线程同步机制的范围。</li><li>修饰一个方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象；</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在静态方法上使用synchronized</p><p>修改一个静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象； </p><p>静态方法是类方法，表示找类锁。类锁永远只有1把。就算创建了100个对象，那类锁也只有一把。</p></li><li><p>修饰一个类，其作用的范围是synchronized后面括号括起来的部分，作用主的对象是这个类的所有对象。</p></li></ol></li><li><p><strong>多个线程共享同一个对象。</strong></p></li><li><p>对象锁：1个对象1把锁，100个对象100把锁。</p><p>类锁：100个对象，也可能只是1把类锁。</p></li><li><p>synchronized的重点：synchronized后面小括号中传的这个“数据”是相当关键的。这个数据必须是多线程共享的数据。才能达到多线程排队。</p></li><li><p>()中数据写什么？那要看你想让哪些线程同步。假设t1、t2、t3、t4、t5，有5个线程，你只希望t1 t2 t3排队，t4 t5不需要排队。怎么办？你一定要在()中写一个t1 t2 t3共享的对象（传入同一个对象）。而这个对象对于t4 t5来说不是共享的。多线程共享的那个对象就行（字符串常量池中的字符串所有对象都共享）所有的线程对象都使用一个字符串对象锁。</p></li><li><p>共享的数据：每一个对象都有的数据，唯一的数据。一个对象一个的数据。多线程共享的那个对象就行</p></li><li><p>在java语言中，任何一个对象都有“一把锁”，其实这把锁就是标记。（只是把它叫做锁。）100个对象，100把锁。1个对象1把锁。</p></li></ol><h4 id="不使用线程同步机制所引发的安全问题"><a href="#不使用线程同步机制所引发的安全问题" class="headerlink" title="不使用线程同步机制所引发的安全问题"></a>不使用线程同步机制所引发的安全问题</h4><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/xian-cheng-tong-bu-ji-zhi-synchronized/xian-cheng-tong-bu-ji-zhi-synchronized/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%AF%B9%E5%90%8C%E4%B8%80%E4%B8%AA%E8%B4%A6%E6%88%B7%E8%BF%9B%E8%A1%8C%E5%8F%96%E6%AC%BE.png" alt="多线程并发对同一个账户进行取款"></p><p>并发造成的安全问题代码，以下代码出现了对数据更新错误的问题。这是由于对数据更新不及时所造成的的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建账户对象（只创建1个）</span>        <span class="token class-name">Account</span> account <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token string">"account-001"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建两个线程</span>        <span class="token class-name">AccountThread</span> accountThread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccountThread</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AccountThread</span> accountThread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccountThread</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置name</span>        accountThread1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"accountThread1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accountThread2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"accountThread2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 启动线程取款</span>        accountThread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accountThread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 不使用线程同步机制，多线程对同一个账户进行取款，出现线程安全问题。</span><span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 账号</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> actno<span class="token punctuation">;</span>    <span class="token comment">// 余额</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span> <span class="token comment">// 实例变量。</span>    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token class-name">String</span> actno<span class="token punctuation">,</span> <span class="token keyword">double</span> balance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>actno <span class="token operator">=</span> actno<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//取款的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// accountThread1和accountThread2并发这个方法。（accountThread1和accountThread2是两个栈。两个栈操作堆中同一个对象。）</span>        <span class="token comment">// 取款之前的余额</span>        <span class="token keyword">double</span> before <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token punctuation">;</span>        <span class="token comment">// 取款之后的余额</span>        <span class="token keyword">double</span> after <span class="token operator">=</span> before <span class="token operator">-</span> money<span class="token punctuation">;</span>        <span class="token comment">// 在这里模拟一下网络延迟，100%会出现问题</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 更新余额</span>        <span class="token comment">// 思考：accountThread1执行到这里了，但还没有来得及执行这行代码，accountThread2线程进来withdraw方法了。此时一定出问题。</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> after<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">AccountThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 两个线程必须共享同一个账户对象。</span>    <span class="token keyword">private</span> <span class="token class-name">Account</span> account<span class="token punctuation">;</span>    <span class="token comment">// 通过构造方法传递过来账户对象</span>    <span class="token keyword">public</span> <span class="token class-name">AccountThread</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>account <span class="token operator">=</span> account<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// run方法的执行表示取款操作。</span>        <span class="token comment">// 假设取款50</span>        <span class="token keyword">double</span> money <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token comment">// 取款</span>        <span class="token comment">// 多线程并发执行这个方法。</span>        account<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"对"</span> <span class="token operator">+</span> account<span class="token punctuation">.</span>actno <span class="token operator">+</span> <span class="token string">"取款"</span> <span class="token operator">+</span> money <span class="token operator">+</span> <span class="token string">"成功，余额"</span> <span class="token operator">+</span> account<span class="token punctuation">.</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="锁的执行原理："><a href="#锁的执行原理：" class="headerlink" title="锁的执行原理："></a>锁的执行原理：</h4><ol><li>​    假设t1和t2线程并发，开始执行同步代码块代码的时候，肯定有一个先一个后。假设t1先执行了，遇到了synchronized，这个时候自动找“后面共享对象”的对象锁，找到之后，并占有这把锁，然后执行同步代码块中的程序，在程序执行过程中一直都是占有这把锁的。直到同步代码块代码结束，这把锁才会释放。</li><li>​    假设t1已经占有这把锁，此时t2也遇到synchronized关键字，也会去占有后面共享对象的这把锁，结果这把锁被t1占有，t2只能在同步代码块外面等待t1的结束，直到t1把同步代码块执行结束了，t1会归还这把锁，此时t2终于等到这把锁，然后t2占有这把锁之后，进入同步代码块执行程序。</li><li>​    这样就达到了线程排队执行。</li><li>​    这里需要注意的是：这个共享对象一定要选好了。这个共享对象一定是你需要排队，执行的这些线程对象所共享的。</li></ol><h4 id="使用线程同步机制，解决线程安全问题。"><a href="#使用线程同步机制，解决线程安全问题。" class="headerlink" title="使用线程同步机制，解决线程安全问题。"></a>使用线程同步机制，解决线程安全问题。</h4><p>synchronized使用了三种方式去实现线程安全问题。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建账户对象（只创建1个）</span>        <span class="token class-name">Account</span> account1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token string">"account-001"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Account</span> account2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token string">"account-002"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建两个线程，多个线程共享同一个对象，一个对象一把锁。</span>        <span class="token class-name">AccountThread</span> accountThread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccountThread</span><span class="token punctuation">(</span>account1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AccountThread</span> accountThread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccountThread</span><span class="token punctuation">(</span>account1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 另一个对象另一把锁，不需要等待。</span>        <span class="token class-name">AccountThread</span> accountThread3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccountThread</span><span class="token punctuation">(</span>account2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置name</span>        accountThread1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"accountThread1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accountThread2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"accountThread2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accountThread3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"accountThread3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 启动线程取款</span>        accountThread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accountThread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accountThread3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 不使用线程同步机制，多线程对同一个账户进行取款，出现线程安全问题。</span><span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 账号</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> actno<span class="token punctuation">;</span>    <span class="token comment">// 余额</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span> <span class="token comment">// 实例变量。</span>    <span class="token comment">//对象</span>    <span class="token class-name">Object</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 实例变量。（Account对象是多线程共享的，Account对象中的实例变量obj也是共享的。）</span>    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token class-name">String</span> actno<span class="token punctuation">,</span> <span class="token keyword">double</span> balance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>actno <span class="token operator">=</span> actno<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//取款的方法</span><span class="token comment">/*    public void withdraw(double money)&#123;        // 这个对象不是共享的，obj2是局部变量，不是共享对象。两个线程不共享这个对象。        Object obj2 = new Object();// 第二个线程过来还会new一个新的对象，所以线程1和线程2，new的obj2不是同一个对象，两个线程都拿到锁了        // synchronized (obj1) &#123;        // synchronized (obj2) &#123;        // synchronized ("def") &#123; // 对象只有一个在字符串常量池中,如果这样写的话所有的线程都会同步。        // synchronized (null) &#123; // 报错：空指针异常。        // synchronized (this) &#123;            // accountThread1和accountThread2并发这个方法。（accountThread1和accountThread2是两个栈。两个栈操作堆中同一个对象。）            // 取款之前的余额            double before = this.balance;            // 取款之后的余额            double after = before - money;            // 在这里模拟一下网络延迟，100%会出现问题            try &#123;                Thread.sleep(1000);            &#125; catch (InterruptedException e) &#123;                e.printStackTrace();            &#125;            // 更新余额            // 思考：accountThread1执行到这里了，但还没有来得及执行这行代码，accountThread2线程进来withdraw方法了。此时一定出问题。            this.balance = after;        // &#125;    &#125;*/</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> before <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token punctuation">;</span>        <span class="token keyword">double</span> after <span class="token operator">=</span> before <span class="token operator">-</span> money<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> after<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">AccountThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 两个线程必须共享同一个账户对象。</span>    <span class="token keyword">private</span> <span class="token class-name">Account</span> account<span class="token punctuation">;</span>    <span class="token comment">// 通过构造方法传递过来账户对象</span>    <span class="token keyword">public</span> <span class="token class-name">AccountThread</span><span class="token punctuation">(</span><span class="token class-name">Account</span> account<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>account <span class="token operator">=</span> account<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// run方法的执行表示取款操作。</span>        <span class="token comment">// 假设取款50</span>        <span class="token keyword">double</span> money <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token comment">// 取款</span>        <span class="token comment">// 多线程并发执行这个方法。</span>        <span class="token comment">// synchronized (this) &#123; // 这里的this是AccountThread对象，这个对象不共享！</span>        <span class="token comment">// synchronized (account) &#123; // 这种方式也可以，只不过扩大了同步的范围，效率更低了。</span>        account<span class="token punctuation">.</span><span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// &#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"对"</span> <span class="token operator">+</span> account<span class="token punctuation">.</span>actno <span class="token operator">+</span> <span class="token string">"取款"</span> <span class="token operator">+</span> money <span class="token operator">+</span> <span class="token string">"成功，余额"</span> <span class="token operator">+</span> account<span class="token punctuation">.</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/xian-cheng-tong-bu-ji-zhi-synchronized/xian-cheng-tong-bu-ji-zhi-synchronized/%E9%94%81.jpg" alt="锁"></p><h3 id="synchronized面试题"><a href="#synchronized面试题" class="headerlink" title="synchronized面试题"></a>synchronized面试题</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * 如果使用两个对象使用两个不同的线程的话         * doOther方法执行的时候需要等待doSome方法的结束吗？         * 不需要，因为MyClass对象是两个，两把锁。         */</span>        <span class="token class-name">MyClass</span> myClass1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MyClass</span> myClass2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>myClass1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>myClass2<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"myThread1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"myThread2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这个睡眠的作用是：为了保证t1线程先执行。</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">MyClass</span> myClass<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token class-name">MyClass</span> myClass<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>myClass <span class="token operator">=</span> myClass<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"myThread1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            myClass<span class="token punctuation">.</span><span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"myThread2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            myClass<span class="token punctuation">.</span><span class="token function">doOther</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doSome begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doSome over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 1.如果doOther方法不使用synchronized修饰的话     *   doOther方法执行的时候需要等待doSome方法的结束吗？     *   不需要，因为doOther()方法没有synchronized     * 2.如果doOther方法使用synchronized修饰的话     *   doOther方法执行的时候需要等待doSome方法的结束吗？需要     * 3.如果在两个方法上都加上static关键字     *   doOther方法执行的时候需要等待doSome方法的结束吗？     *   需要，因为静态方法是类锁，不管创建了几个对象，类锁只有1把。     */</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doOther</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doOther begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doOther over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线程生命周期</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/xian-cheng-sheng-ming-zhou-qi/xian-cheng-sheng-ming-zhou-qi/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/xian-cheng-sheng-ming-zhou-qi/xian-cheng-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h3><ol><li>关于线程对象的生命周期？有五种状态。分别是：<ol><li>新建状态</li><li>就绪状态</li><li>运行状态</li><li>阻塞状态</li><li>死亡状态</li></ol></li></ol><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/xian-cheng-sheng-ming-zhou-qi/xian-cheng-sheng-ming-zhou-qi/%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="线程生命周期"></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 操作系统的线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线程的常用方法</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/xian-cheng-de-chang-yong-fang-fa/xian-cheng-de-chang-yong-fang-fa/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/xian-cheng-de-chang-yong-fang-fa/xian-cheng-de-chang-yong-fang-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="线程的常用方法"><a href="#线程的常用方法" class="headerlink" title="线程的常用方法"></a>线程的常用方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">Thread</span> <span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 返回对当前正在执行的线程对象的引用。</span><span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 返回该线程的名称。</span><span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token comment">// 改变线程名称，使之与参数 name 相同。</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">)</span> <span class="token comment">//静态方法,参数是毫秒,让当前线程进入休眠，进入“阻塞状态”，放弃占有CPU时间片，让给其它线程使用。</span><span class="token keyword">void</span> <span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 中断线程。</span><span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 杀死一个线程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>当线程没有设置名字的时候，默认的名字有什么规律？<ol><li>Thread-0</li><li>Thread-1</li><li>Thread-2</li></ol></li></ol><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> doName <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>doName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// main</span>        <span class="token comment">// currentThread就是当前线程对象</span>        <span class="token comment">// 这个代码出现在main方法当中，所以当前线程就是主线程。</span>        <span class="token class-name">Thread</span> currentThread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>currentThread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建线程对象</span>        <span class="token class-name">MyThread</span> myThread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取线程的名字</span>        <span class="token class-name">String</span> tName1 <span class="token operator">=</span> myThread1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tName1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Thread-0</span>        <span class="token class-name">MyThread</span> myThread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置线程的名字</span>        myThread2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"tName2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取线程的名字</span>        <span class="token class-name">String</span> tName2 <span class="token operator">=</span> myThread2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tName2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// tName2</span>        <span class="token comment">// 启动线程</span>        myThread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// currentThread就是当前线程对象。当前线程是谁呢？</span>            <span class="token comment">// 当t1线程执行run方法，那么这个当前线程就是t1</span>            <span class="token comment">// 当t2线程执行run方法，那么这个当前线程就是t2</span>            <span class="token class-name">Thread</span> currentThread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>currentThread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-->"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="线程的睡眠"><a href="#线程的睡眠" class="headerlink" title="线程的睡眠"></a>线程的睡眠</h4><h5 id="sleep方法"><a href="#sleep方法" class="headerlink" title="sleep方法"></a>sleep方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">)</span> <span class="token comment">// 静态方法,参数是毫秒</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>作用：<ol><li><strong>让当前线程进入休眠，进入“阻塞状态”</strong>，放弃占有CPU时间片，让给其它线程使用。</li><li>这行代码出现在A线程中，A线程就会进入休眠。</li><li>这行代码出现在B线程中，B线程就会进入休眠。</li></ol></li><li>Thread.sleep()方法，可以做到这种效果：间隔特定的时间，去执行一段特定的代码，每隔多久执行一次。</li><li>用对象调用sleep方法：即对象名.sleep()还是会转化为Thread.sleep()方法，仍然让当前线程进入休眠。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 让当前线程进入休眠，睡眠1秒</span>        <span class="token comment">// 当前线程是主线程！！！</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--->"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 睡眠1秒</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 创建线程对象</span>        <span class="token class-name">Thread</span> myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"myThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用sleep方法</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 问题：这行代码会让线程myThread进入休眠状态吗？</span>            myThread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 在执行的时候还是会转换成：Thread.sleep(1000 * 5);</span>            <span class="token comment">// 这行代码的作用是：让当前线程进入休眠，也就是说main线程进入休眠。</span>            <span class="token comment">// 这样代码出现在main方法中，main线程睡眠。</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello Word!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--->"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="终止线程的睡眠-打断线程"><a href="#终止线程的睡眠-打断线程" class="headerlink" title="终止线程的睡眠(打断线程)"></a>终止线程的睡眠(打断线程)</h5><ol><li>调用interrupt()方法。</li><li>sleep睡眠太久了，如果希望半道上醒来，你应该怎么办？也就是说怎么叫醒一个正在睡眠的线程？？使用异常处理。<ol><li>注意：这个不是终断线程的执行，是终止线程的睡眠。</li></ol></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"MyRunnableThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 希望5秒之后，t线程醒来（5秒之后主线程手里的活儿干完了。）</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 终断t线程的睡眠（这种终断睡眠的方式依靠了java的异常处理机制。）</span>        thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 干扰，一盆冷水过去！</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 重点：run()当中的异常不能throws，只能try catch</span>    <span class="token comment">// 因为run()方法在父类中没有抛出任何异常，子类不能比父类抛出更多的异常。</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"------>"</span> <span class="token operator">+</span> <span class="token string">"begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 睡眠1年</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 打印异常信息</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 1年之后才会执行这里</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"------>"</span> <span class="token operator">+</span> <span class="token string">"end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="终止线程"><a href="#终止线程" class="headerlink" title="终止线程"></a>终止线程</h4><p>在java中怎么强行终止一个线程的执行。使用stop方法。</p><p>这种方式存在很大的缺点：容易丢失数据。因为这种方式是直接将线程杀死了，线程没有保存的数据将会丢失。不建议使用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"MyRunnableThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 模拟5秒</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 5秒之后强行终止t线程</span>        thread<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 已过时（不建议使用。）</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"------>"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="改进办法"><a href="#改进办法" class="headerlink" title="改进办法"></a>改进办法</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyRunnable</span> myRunnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myRunnable<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"MyRunnableThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 模拟5秒</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 5秒之后强行终止t线程</span>        <span class="token comment">// thread.stop(); // 已过时（不建议使用。）</span>        <span class="token comment">// 终止线程</span>        <span class="token comment">// 你想要什么时候终止t的执行，那么你把标记修改为false，就结束了。</span>        myRunnable<span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 打一个布尔标记</span>    <span class="token keyword">boolean</span> run <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"------>"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// return就结束了，你在结束之前还有什么没保存的。在这里可以保存呀。</span>                <span class="token comment">// save....</span>                <span class="token comment">//终止当前线程</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线程调度</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/xian-cheng-de-diao-du/xian-cheng-de-diao-du/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-duo-xian-cheng/xian-cheng-de-diao-du/xian-cheng-de-diao-du/</url>
      
        <content type="html"><![CDATA[<h3 id="线程的调度"><a href="#线程的调度" class="headerlink" title="线程的调度"></a>线程的调度</h3><ol><li><p>常见的线程调度模型有哪些？</p><ol><li>抢占式调度模型：<ol><li>那个线程的优先级比较高，抢到的CPU时间片的概率就高一些&#x2F;多一些。java采用的就是抢占式调度模型。</li></ol></li><li>均分式调度模型：<ol><li>平均分配CPU时间片。每个线程占有的CPU时间片时间长度一样。平均分配，一切平等。有一些编程语言，线程调度模型采用的是这种方式。</li></ol></li></ol></li><li><p>java中提供了哪些方法是和线程调度有关系的呢？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token keyword">int</span> newPriority<span class="token punctuation">)</span> <span class="token comment">// 设置线程的优先级，是实例方法</span><span class="token keyword">int</span> <span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取线程优先级。是实例方法</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 暂停当前正在执行的线程对象，执行其他线程。是静态方法</span><span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 等待该线程终止。是实例方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>线程的优先级</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token keyword">int</span> newPriority<span class="token punctuation">)</span> <span class="token comment">// 设置线程的优先级，是实例方法</span><span class="token keyword">int</span> <span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取线程优先级。是实例方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>最低优先级1</li><li>默认优先级是5</li><li>最高优先级10</li><li>优先级比较高的获取CPU时间片可能会多一些。（但也不完全是，大概率是多的。）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 设置主线程的优先级为1</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最高优先级"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span>MAX_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最高优先级10</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最低优先级"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span>MIN_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最低优先级1</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"默认优先级"</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span>NORM_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 默认优先级5</span>        <span class="token comment">// 获取当前线程对象，获取当前线程的优先级</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"线程的默认优先级是："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// main线程的默认优先级是：1</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"MyRunnableThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 优先级较高的，只是抢到的CPU时间片相对多一些。</span>        <span class="token comment">// 大概率方向更偏向于优先级比较高的。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"------>"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取线程优先级</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"线程的默认优先级："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// MyRunnableThread线程的默认优先级：1</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"------>"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>让位方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 暂停当前正在执行的线程对象，执行其他线程。是静态方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>暂停当前正在执行的线程对象，并执行其他线程</li><li>yield()方法不是阻塞方法。让当前线程让位，让给其它线程使用。</li><li>yield()方法的执行会让当前线程从“运行状态”回到“就绪状态”。</li><li>注意：在回到就绪之后，有可能还会再次抢到。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*让位，当前线程暂停，回到就绪状态，让给其它线程。静态方法：Thread.yield(); */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"MyRunnableThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"------>"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//每100个让位一次。</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当前线程暂停一下，让给主线程。</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"------>"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>合并线程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 等待该线程终止。是实例方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>线程合并，并不是将分支线程的栈销毁掉，而是栈的阻塞原理。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"MyRunnableThread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 合并线程</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// thread合并到当前线程中，当前线程受阻塞，thread线程执行直到结束。</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"------>"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的异常处理机制</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-yi-chang/java-de-yi-chang-chu-li-ji-zhi/java-de-yi-chang/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-yi-chang/java-de-yi-chang-chu-li-ji-zhi/java-de-yi-chang/</url>
      
        <content type="html"><![CDATA[<h3 id="Java的异常"><a href="#Java的异常" class="headerlink" title="Java的异常"></a>Java的异常</h3><h5 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h5><ol><li>java中异常的作用是：增强程序健壮性。</li><li>什么是异常：程序执行过程中的不正常情况。</li><li>java中异常以类和对象的形式存在。<strong>每当出现异常的时候都需要new异常对象。</strong>每一个异常类都可以创建异常对象。</li><li>Object类：Object下有Throwable（可抛出的）</li><li>Throwable下有两个分支：Error（不可处理，直接退出JVM）和Exception（可处理的）</li><li>Exception下有两个分支：<br>1. Exception的直接子类：编译时异常（要求程序员在编写程序阶段必须预先对这些异常进行处理，如果不处理编译器报错，因此得名编译时异常。）。<br>2. RuntimeException：运行时异常。（在编写程序阶段程序员可以预先处理，也可以不管，都行。）</li><li>编译时异常和运行时异常，都是发生在运行阶段。编译阶段异常是不会发生的。<ol><li>编译时异常因为什么而得名？<br>    因为编译时异常必须在编译(编写)阶段预先处理，如果不处理编译器报错，因此得名。所有异常都是在运行阶段发生的。因为只有程序运行阶段才可以new对象。因为异常的发生就是new异常对象。</li></ol></li></ol><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-yi-chang/java-de-yi-chang-chu-li-ji-zhi/java-de-yi-chang/%E5%BC%82%E5%B8%B8.jpg" alt="异常"></p><ol start="4"><li><p>编译时异常和运行时异常的区别？</p><ol><li>编译时异常一般发生的概率比较高。对于一些发生概率较高的异常，需要在运行之前对其进行预处理。</li><li>运行时异常一般发生的概率比较低。</li></ol></li><li><p>编译时异常还有其他名字：</p><ol><li>受检异常：CheckedException</li><li>受控异常</li></ol></li><li><p>运行时异常还有其它名字：</p><ol><li>未受检异常：UnCheckedException</li><li>非受控异常、</li></ol></li><li><p><strong>所有异常都是发生在运行阶段的。</strong></p></li><li><p>Java语言中对异常的处理包括两种方式：</p><ol><li>第一种方式：在方法声明的位置上，使用throws关键字，抛给上一级。谁调用我，我就抛给谁。抛给上一级。</li><li>第二种方式：使用try..catch语句进行异常的捕捉。这件事发生了，谁也不知道，因为我给抓住了。</li></ol><p>异常发生之后，如果我选择了上抛，抛给了我的调用者，调用者需要对这个异常继续处理，那么调用者处理这个异常同样有两种处理方式。</p></li><li><p>注意：Java中异常发生之后如果一直上抛，最终抛给了main方法，main方法继续向上抛，抛给了调用者JVM，JVM知道这个异常发生，只有一个结果。终止java程序的执行。</p></li><li><p>在catch中可以使用|来代替或运算，来表示多个异常。</p></li><li><p>总结异常中的关键字：</p><ol><li>异常捕捉：<ol><li>try</li><li>catch</li><li>finally</li></ol></li><li>throws 在方法声明位置上使用，表示上报异常信息给调用者。<br>throw 手动抛出异常！</li></ol></li></ol><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/**         * 程序执行到此处发生了ArithmeticException异常，         * 底层new了一个ArithmeticException异常对象，         * 然后抛出了，由于是main方法调用了100 / 0，         * 所以这个异常ArithmeticException抛给了main方法，         * main方法没有处理，将这个异常自动抛给了JVM。         * JVM最终终止程序的执行。         * ArithmeticException 继承 RuntimeException，属于运行时异常。         * 在编写程序阶段不需要对这种异常进行预先的处理。         */</span>        <span class="token comment">// 实际上JVM在执行到此处的时候，会new异常对象：new ArithmeticException("/ by zero");</span>        <span class="token comment">// 并且JVM将new的异常对象抛出，打印输出信息到控制台了。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这里的HelloWorld没有输出，没有执行。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 通过“异常类”实例化“异常对象”</span>        <span class="token class-name">NumberFormatException</span> nfe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">"数字格式化异常！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// java.lang.NumberFormatException: 数字格式化异常！</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nfe<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="异常处理的两种方式"><a href="#异常处理的两种方式" class="headerlink" title="异常处理的两种方式"></a>异常处理的两种方式</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 以下代码报错的原因是什么？</span>    <span class="token comment">/**     * 因为doSome()方法声明位置上使用了：throws ClassNotFoundException     * 而ClassNotFoundException是编译时异常。必须编写代码时处理，没有处理编译器报错。     * @param args     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// main方法中调用doSome()方法</span>        <span class="token comment">// 因为doSome()方法声明位置上有：throws ClassNotFoundException</span>        <span class="token comment">// 我们在调用doSome()方法的时候必须对这种异常进行预先的处理。</span>        <span class="token comment">// 如果不处理，编译器就报错。</span>        <span class="token comment">// 编译器报错信息： Unhandled exception: java.lang.ClassNotFoundException</span>        <span class="token comment">// doSome();</span>        <span class="token comment">// 第一种处理方式：在方法声明的位置上继续使用：throws，来完成异常的继续上抛。抛给调用者，调用者来处理。</span>        <span class="token comment">// 上抛类似于推卸责任。（继续把异常传递给调用者。）</span>        <span class="token comment">/*        public static void main(String[] args) throws ClassNotFoundException &#123;            doSome();        &#125;        */</span>        <span class="token comment">// 第二种处理方式：try..catch进行捕捉。</span>        <span class="token comment">// 这个异常不会上报，自己把这个事儿处理了。</span>        <span class="token comment">// 异常抛到此处为止，不再上抛了。</span>        <span class="token comment">// 捕捉等于把异常拦下了，异常真正的解决了。（调用者是不知道的。）</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * doSome方法在方法声明的位置上使用了：throws ClassNotFoundException     * 这个代码表示doSome()方法在执行过程中，有可能会出现ClassNotFoundException异常。     * 叫做类没找到异常。这个异常直接父类是：Exception，所以ClassNotFoundException属于编译时异常。     * @throws ClassNotFoundException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doSome!!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="throws抛出异常的学习"><a href="#throws抛出异常的学习" class="headerlink" title="throws抛出异常的学习"></a>throws抛出异常的学习</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span><span class="token punctuation">;</span><span class="token comment">/*注意：    只要异常没有捕捉，采用上报的方式，此方法的后续代码不会执行。    另外需要注意，try语句块中的某一行出现异常，该行后面的代码不会执行。    try..catch捕捉异常之后，后续代码可以执行。在以后的开发中，处理编译时异常，应该上报还是捕捉呢，怎么选？如果希望调用者来处理，选择throws上报。其它情况使用捕捉的方式。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 一般不建议在main方法上使用throws，因为这个异常如果真正的发生了，一定会抛给JVM。JVM只有终止。</span>    <span class="token comment">// 异常处理机制的作用就是增强程序的健壮性。怎么能做到，异常发生了也不影响程序的执行。所以</span>    <span class="token comment">// 一般main方法中的异常建议使用try..catch进行捕捉。main就不要继续上抛了。</span>    <span class="token comment">/*    public static void main(String[] args) throws FileNotFoundException &#123;        System.out.println("main begin");        m1();        System.out.println("main over");    &#125;     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 100 / 0这是算术异常，这个异常是运行时异常，你在编译阶段，可以处理，也可以不处理。编译器不管。</span>        <span class="token comment">// System.out.println(100 / 0); // 不处理编译器也不管</span>        <span class="token comment">// 你处理也可以。</span>        <span class="token comment">/*        try &#123;            System.out.println(100 / 0);        &#125; catch(ArithmeticException e)&#123;            System.out.println("算术异常了！！！！");        &#125;        */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// try尝试</span>            <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 以上代码出现异常，直接进入catch语句块中执行。</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// catch后面的好像一个方法的形参。</span>            <span class="token comment">// 这个分支中可以使用e引用，e引用保存的内存地址是那个new出来异常对象的内存地址。</span>            <span class="token comment">// catch是捕捉异常之后走的分支。</span>            <span class="token comment">// 在catch分支中干什么？处理异常。</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件不存在，可能路径错误，也可能该文件被删除了！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//java.io.FileNotFoundException: D:\course\01-课\学习方法.txt (系统找不到指定的路径。)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// try..catch把异常抓住之后，这里的代码会继续执行。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m1 begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 以上代码出异常，这里是无法执行的。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m1 over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 抛别的不行，抛ClassCastException说明你还是没有对FileNotFoundException进行处理</span>    <span class="token comment">// private static void m2() throws ClassCastException&#123;</span>    <span class="token comment">// 抛FileNotFoundException的父对象IOException，这样是可以的。因为IOException包括FileNotFoundException</span>    <span class="token comment">// private static void m2() throws IOException &#123;</span>    <span class="token comment">// 这样也可以，因为Exception包括所有的异常。</span>    <span class="token comment">// private static void m2() throws Exception&#123;</span>    <span class="token comment">// throws后面也可以写多个异常，可以使用逗号隔开。</span>    <span class="token comment">// private static void m2() throws ClassCastException, FileNotFoundException&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m2 begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 编译器报错原因是：m3()方法声明位置上有：throws FileNotFoundException</span>        <span class="token comment">// 我们在这里调用m3()没有对异常进行预处理，所以编译报错。</span>        <span class="token comment">// m3();</span>        <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 以上如果出现异常，这里是无法执行的！</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m2 over"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建一个输入流对象，该流指向一个文件。</span>        <span class="token comment">/*        编译报错的原因是什么？            第一：这里调用了一个构造方法：FileInputStream(String name)            第二：这个构造方法的声明位置上有：throws FileNotFoundException            第三：通过类的继承结构看到：FileNotFoundException父类是IOException，IOException的父类是Exception，            最终得知，FileNotFoundException是编译时异常。            错误原因？编译时异常要求程序员编写程序阶段必须对它进行处理，不处理编译器就报错。         */</span>        <span class="token comment">//new FileInputStream("D:\\123.txt");</span>        <span class="token comment">// 我们采用第一种处理方式：在方法声明的位置上使用throws继续上抛。</span>        <span class="token comment">// 一个方法体当中的代码出现异常之后，如果上报的话，此方法结束。</span>        <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\123.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"如果以上代码出异常，这里会执行吗?不会！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="try-catch的学习"><a href="#try-catch的学习" class="headerlink" title="try..catch的学习"></a>try..catch的学习</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span><span class="token punctuation">;</span><span class="token comment">/*深入try..catch    1、catch后面的小括号中的类型可以是具体的异常类型，也可以是该异常类型的父类型。    2、catch可以写多个。建议catch的时候，精确的一个一个处理。这样有利于程序的调试。    3、catch写多个的时候，从上到下，必须遵守从小到大。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*    public static void main(String[] args) throws Exception, FileNotFoundException, NullPointerException &#123;    &#125;    public static void main(String[] args) throws Exception &#123;    &#125;*/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//编译报错</span>        <span class="token comment">/*try &#123;            FileInputStream fis = new FileInputStream("D:\\123.txt");        &#125; catch(NullPointerException e) &#123;        &#125;*/</span>        <span class="token comment">/*        try &#123;            FileInputStream fis = new FileInputStream("D:\\123.txt");            System.out.println("以上出现异常，这里无法执行！");        &#125; catch(FileNotFoundException e) &#123;            System.out.println("文件不存在！");        &#125;        // 这里会执行        System.out.println("hello world!");*/</span>        <span class="token comment">/*try &#123;            FileInputStream fis = new FileInputStream("D:\\123.txt");        &#125; catch(IOException e) &#123; // 多态：IOException e = new FileNotFoundException();            System.out.println("文件不存在！");        &#125;*/</span>        <span class="token comment">/*try &#123;            FileInputStream fis = new FileInputStream("D:\\123.txt");        &#125; catch(Exception e) &#123; // 多态：Exception e = new FileNotFoundException();            System.out.println("文件不存在！");        &#125;*/</span>        <span class="token comment">/*try &#123;            // 创建输入流            FileInputStream fis = new FileInputStream("D:\\123.txt");            // 读文件            fis.read();        &#125; catch(Exception e) &#123; // 所有的异常都走这个分支。            System.out.println("文件不存在！");        &#125;*/</span>        <span class="token comment">/*try &#123;            //创建输入流            FileInputStream fis = new FileInputStream("D:\\123.txt");            //读文件            fis.read();        &#125; catch(FileNotFoundException e) &#123;            System.out.println("文件不存在！");        &#125; catch(IOException e)&#123;            System.out.println("读文件报错了！");        &#125;*/</span>        <span class="token comment">// 编译报错。FileNotFoundException应该比IOException先处理</span>        <span class="token comment">/*        try &#123;            //创建输入流            FileInputStream fis = new FileInputStream("D:\\123.txt");            //读文件            fis.read();        &#125; catch(IOException e)&#123;            System.out.println("读文件报错了！");        &#125; catch(FileNotFoundException e) &#123;            System.out.println("文件不存在！");        &#125;         */</span>        <span class="token comment">// JDK8的新特性！</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//创建输入流</span>            <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\123.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 进行数学运算</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这个异常是运行时异常，编写程序时可以处理，也可以不处理。</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> <span class="token operator">|</span> <span class="token class-name">ArithmeticException</span> <span class="token operator">|</span> <span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件不存在？数学异常？空指针异常？都有可能！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java捕获异常</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-yi-chang/try..catch-zhong-de-finally-zi-ju/try..catch-zhong-de-finally-zi-ju/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-yi-chang/try..catch-zhong-de-finally-zi-ju/try..catch-zhong-de-finally-zi-ju/</url>
      
        <content type="html"><![CDATA[<h3 id="try-catch中的finally子句"><a href="#try-catch中的finally子句" class="headerlink" title="try..catch中的finally子句"></a>try..catch中的finally子句</h3><ol><li><p>在finally子句中的代码是最后执行的，并且是<strong>一定会执行的</strong>，即使try语句块中的代码出现了异常。</p></li><li><p>finally子句必须和try一起出现，不能单独编写。</p></li><li><p>finally语句通常使用在哪些情况下呢？</p><ol><li><p>通常在finally语句块中完成资源的释放&#x2F;关闭。因为finally中的代码比较有保障。即使try语句块中的代码出现异常，finally中代码也会正常执行。</p></li><li><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// 声明位置放到try外面。这样在finally中才能用。</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 创建输入流对象</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\123.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 开始读文件....</span>            fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token comment">// 这里一定会出现空指针异常！NullPointerException</span>            s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 出异常后后面的代码不会被执行。</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello Word!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 流使用完需要关闭，因为流是占用资源的。</span>            <span class="token comment">// 即使以上程序出现异常，流也必须要关闭！</span>            <span class="token comment">// 放在这里有可能流关不了。</span>            <span class="token comment">// fis.close();</span>            fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 流的关闭放在这里比较保险。</span>            <span class="token comment">// finally中的代码是一定会执行的。</span>            <span class="token comment">// 即使try中出现了异常！</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 避免空指针异常！</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// close()方法有异常，采用捕捉的方式。</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>try和finally，没有catch可以吗？</p><ol><li><p>可以。try不能单独使用。try finally可以联合使用。</p></li><li><p>要是finally中的语句不执行，必须退出JVM。</p></li><li><p>代码示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 以下代码的执行顺序：     * 先执行try...     * 再执行finally...     * 最后执行 return（return语句只要执行方法必然结束。）     * @param args     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello try"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 退出JVM之后，finally语句中的代码就不执行了！</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// finally中的语句会执行。能执行到。</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello finally"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 这里不能写语句，因为这个代码是无法执行到的。因为return的原因。</span>        <span class="token comment">// System.out.println("Hello Word");</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><h4 id="finally经典题目"><a href="#finally经典题目" class="headerlink" title="finally经典题目"></a>finally经典题目</h4><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    java语法规则（有一些规则是不能破坏的，一旦这么说了，就必须这么做！）：        java中有一条这样的规则：            方法体中的代码必须遵循自上而下顺序依次逐行执行（亘古不变的语法！）        java中海油一条语法规则：            return语句一旦执行，整个方法必须结束（亘古不变的语法！）     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 这行代码出现在int i = 100;的下面，所以最终结果必须是返回100</span>            <span class="token comment">// return语句还必须保证是最后执行的。一旦执行，整个方法结束。</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="final-finally-finalize有什么区别？"><a href="#final-finally-finalize有什么区别？" class="headerlink" title="final finally finalize有什么区别？"></a>final finally finalize有什么区别？</h4><h6 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a>final 关键字</h6><ol><li>final修饰的类无法继承。</li><li>final修饰的方法无法覆盖。</li><li>final修饰的变量不能重新赋值。</li></ol><h6 id="finally-关键字"><a href="#finally-关键字" class="headerlink" title="finally 关键字"></a>finally 关键字</h6><ol><li>和try一起联合使用。</li><li>finally语句块中的代码是必须执行的。</li></ol><h6 id="finalize-标识符"><a href="#finalize-标识符" class="headerlink" title="finalize 标识符"></a>finalize 标识符</h6><ol><li>是一个Object类中的方法名。</li><li>这个方法是由垃圾回收器GC负责调用的。</li></ol><h6 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// final是一个关键字。表示最终的。不变的。</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token comment">// i = 200;错误</span>        <span class="token comment">// finally也是一个关键字，和try联合使用，使用在异常处理机制中</span>        <span class="token comment">// 在fianlly语句块中的代码是一定会执行的。</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finally...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// finalize()是Object类中的一个方法。作为方法名出现。</span>        <span class="token comment">// 所以finalize是标识符。</span>        <span class="token comment">// finalize()方法是JVM的GC垃圾回收器负责调用。</span>        <span class="token class-name">Object</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// final修饰的类无法继承</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 常量。</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> MATH_PI <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// final修饰的方法无法覆盖</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java异常对象的两个方法</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-yi-chang/yi-chang-dui-xiang-liang-ge-fei-chang-chong-yao-de-fang-fa/yi-chang-dui-xiang-liang-ge-fei-chang-chong-yao-de-fang-fa/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-yi-chang/yi-chang-dui-xiang-liang-ge-fei-chang-chong-yao-de-fang-fa/yi-chang-dui-xiang-liang-ge-fei-chang-chong-yao-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="异常对象两个非常重要的方法"><a href="#异常对象两个非常重要的方法" class="headerlink" title="异常对象两个非常重要的方法"></a>异常对象两个非常重要的方法</h3><ol><li><p>获取异常简单的描述信息：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> msg <span class="token operator">=</span> exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>打印异常追踪的堆栈信息：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 一般都是使用这个。exception为异常对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>异常信息追踪信息，从上往下一行一行看。</p></li></ol><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 这里只是为了测试getMessage()方法和printStackTrace()方法。</span>        <span class="token comment">// 这里只是new了异常对象，但是没有将异常对象抛出。JVM会认为这是一个普通的java对象。</span>        <span class="token class-name">NullPointerException</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"空指针异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取异常简单描述信息：这个信息实际上就是构造方法上面String参数。</span>        <span class="token class-name">String</span> msg <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//空指针异常</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 打印异常堆栈信息</span>        <span class="token comment">// java后台打印异常堆栈追踪信息的时候，采用了异步线程的方式打印的。</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的方法的覆盖与异常机制</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-yi-chang/fang-fa-fu-gai-yu-yi-chang/fang-fa-fu-gai-yu-yi-chang/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-yi-chang/fang-fa-fu-gai-yu-yi-chang/fang-fa-fu-gai-yu-yi-chang/</url>
      
        <content type="html"><![CDATA[<h3 id="方法覆盖与异常"><a href="#方法覆盖与异常" class="headerlink" title="方法覆盖与异常"></a>方法覆盖与异常</h3><p>重写之后的方法不能比重写之前的方法抛出更多（更宽泛）的异常，可以更少。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doOther</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 编译正常。</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 编译报错。</span>    <span class="token comment">/*public void doSome() throws Exception&#123;    &#125;*/</span>    <span class="token comment">// 编译正常。</span>    <span class="token comment">/*public void doOther() &#123;    &#125;*/</span>    <span class="token comment">// 编译正常。</span>    <span class="token comment">/*public void doOther() throws Exception&#123;    &#125;*/</span>    <span class="token comment">// 编译正常。</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doOther</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的自定义异常</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-yi-chang/zi-ding-yi-yi-chang/zi-ding-yi-yi-chang/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-de-yi-chang/zi-ding-yi-yi-chang/zi-ding-yi-yi-chang/</url>
      
        <content type="html"><![CDATA[<h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><ol><li><p>Java中怎么自定义异常呢？</p><ol><li><p>两步：</p><ol><li>第一步：编写一个类继承Exception或者RuntimeException.</li><li>第二步：提供两个构造方法，一个无参数的，一个带有String参数的。</li></ol></li><li><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建异常对象（只new了异常对象，并没有手动抛出）</span>        <span class="token class-name">MyException</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token string">"用户名不能为空！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 打印异常堆栈信息</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取异常简单描述信息</span>        <span class="token class-name">String</span> msg <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*class MyException extends RuntimeException&#123; // 运行时异常&#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="数组示例"><a href="#数组示例" class="headerlink" title="数组示例"></a>数组示例</h4><p>使用异常模拟栈的操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyStack</span> myStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            myStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MyStackOperationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            myStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MyStackOperationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MyStackOperationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyStack</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 为什么选择Object类型数组？因为这个栈可以存储java中的任何引用类型的数据,因为所有类的父类是Object。</span>    <span class="token comment">// 包括String也可以存储进去。因为String父类也是Object。</span>    <span class="token comment">// 一维数组动态初始化,默认初始化容量是10.</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 栈帧，永远指向栈顶部元素</span>    <span class="token comment">// 那么这个默认初始值应该是多少。注意：最初的栈是空的，一个元素都没有。</span>    <span class="token comment">// private int index = 0; // 如果index采用0，表示栈帧指向了顶部元素的上方。</span>    <span class="token comment">// private int index = -1; // 如果index采用-1，表示栈帧指向了顶部元素。</span>    <span class="token comment">// 给index初始化</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MyStackOperationException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elements<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// System.out.println("压栈失败，栈已满！");</span>            <span class="token comment">// return;</span>            <span class="token comment">// 创建异常对象</span>            <span class="token comment">//MyStackOperationException e = new MyStackOperationException("压栈失败，栈已满！");</span>            <span class="token comment">// 手动将异常抛出去！</span>            <span class="token comment">//throw e; //这里捕捉没有意义，自己new一个异常，自己捉，没有意义。栈已满这个信息你需要传递出去。</span>            <span class="token comment">// 合并（手动抛出异常！）</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyStackOperationException</span><span class="token punctuation">(</span><span class="token string">"压栈失败，栈已满！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 程序能够走到这里，说明栈没满</span>        <span class="token comment">// 向栈中加1个元素，栈帧向上移动一个位置。</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elements<span class="token punctuation">[</span><span class="token operator">++</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>        <span class="token comment">// 在声明一次:所有的System.out.println()方法执行时，如果输出引用的话，自动调用引用的toString()方法。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"压栈"</span> <span class="token operator">+</span> obj <span class="token operator">+</span> <span class="token string">"元素成功，栈帧指向"</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MyStackOperationException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// System.out.println("弹栈失败，栈已空！");</span>            <span class="token comment">// return null;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyStackOperationException</span><span class="token punctuation">(</span><span class="token string">"弹栈失败，栈已空！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 程序能够执行到此处说明栈没有空。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"弹栈"</span> <span class="token operator">+</span> elements<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"元素成功，"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 栈帧向下移动一位。</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"栈帧指向"</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> elements<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 栈操作异常：自定义异常！ */</span><span class="token keyword">class</span> <span class="token class-name">MyStackOperationException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span> <span class="token comment">// 编译时异常！</span>    <span class="token keyword">public</span> <span class="token class-name">MyStackOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyStackOperationException</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="异常的代码示例"><a href="#异常的代码示例" class="headerlink" title="异常的代码示例"></a>异常的代码示例</h6><p>类在强制类型转换过程中，如果是类转换成接口类型。那么类和接口之间不需要存在继承关系，也可以转换，java语法中允许。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 构建一个军队</span>        <span class="token class-name">Army</span> army <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Army</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 军队只有4个武器。</span>        <span class="token comment">// 创建武器对象</span>        <span class="token class-name">Tank</span> tank1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Tank</span> tank2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 添加武器</span>            army<span class="token punctuation">.</span><span class="token function">addWeapon</span><span class="token punctuation">(</span>tank1<span class="token punctuation">)</span><span class="token punctuation">;</span>            army<span class="token punctuation">.</span><span class="token function">addWeapon</span><span class="token punctuation">(</span>tank2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AddWeaponException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 让所有可移动的移动</span>        army<span class="token punctuation">.</span><span class="token function">attackAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 让所有可攻击的攻击</span>        army<span class="token punctuation">.</span><span class="token function">moveAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这是new一个异常对象。没有手动抛异常，它就是一个普通的java类。</span>        <span class="token comment">// 就像User类一样。没有区别。</span>        <span class="token comment">/* AddWeaponException e = new AddWeaponException("武器数量已达到上限！");        System.out.println(e.getMessage()); */</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 所有武器的父类</span><span class="token keyword">class</span> <span class="token class-name">Weapon</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 可移动的接口</span><span class="token keyword">interface</span> <span class="token class-name">Moveable</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 移动行为</span>    <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//可射击的</span><span class="token keyword">interface</span> <span class="token class-name">Shootable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 射击行为</span>    <span class="token keyword">void</span> <span class="token function">shoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 添加武器异常。</span><span class="token keyword">class</span> <span class="token class-name">AddWeaponException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">AddWeaponException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">AddWeaponException</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//坦克是一个武器，可移动，可攻击。</span><span class="token keyword">class</span> <span class="token class-name">Tank</span> <span class="token keyword">extends</span> <span class="token class-name">Weapon</span> <span class="token keyword">implements</span> <span class="token class-name">Moveable</span><span class="token punctuation">,</span><span class="token class-name">Shootable</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"坦克移动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"坦克开炮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Army</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 武器数组</span>    <span class="token keyword">private</span> <span class="token class-name">Weapon</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weapons<span class="token punctuation">;</span>    <span class="token comment">/**     * 创建军队的构造方法。     * @param count 武器数量     */</span>    <span class="token keyword">public</span> <span class="token class-name">Army</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 动态初始化数组中每一个元素默认值是null。</span>        <span class="token comment">// 武器数组是有了，但是武器数组中没有放武器。</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weapons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Weapon</span><span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addWeapon</span><span class="token punctuation">(</span><span class="token class-name">Weapon</span> weapon<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AddWeaponException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>weapons<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>weapons<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                weapons<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> weapon<span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>weapon <span class="token operator">+</span> <span class="token string">"：武器添加成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 程序如果执行到此处说明，武器没有添加成功</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AddWeaponException</span><span class="token punctuation">(</span><span class="token string">"武器数量已达到上限！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 所有可攻击的武器攻击。     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attackAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>weapons<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>weapons<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Shootable</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">Shootable</span> shootable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Shootable</span><span class="token punctuation">)</span> weapons<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                shootable<span class="token punctuation">.</span><span class="token function">shoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 所有可移动的武器移动     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">moveAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>weapons<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>weapons<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Moveable</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">Moveable</span> moveable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Moveable</span><span class="token punctuation">)</span> weapons<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                moveable<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的ArrayList集合</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/arraylist-ji-he/arraylist-ji-he/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/arraylist-ji-he/arraylist-ji-he/</url>
      
        <content type="html"><![CDATA[<h3 id="ArrayList集合"><a href="#ArrayList集合" class="headerlink" title="ArrayList集合"></a>ArrayList集合</h3><ol><li><p>默认初始化容量10（底层先创建了一个长度为0的数组，当添加第一个元素的时候，初始化容量10。）</p></li><li><p>集合底层是一个Object[]数组。</p></li><li><p>构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 默认构造函数，使用初始容量10构造一个空列表(无参数构造)</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 带初始容量参数的构造函数。（用户自己指定容量）</span><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> c<span class="token punctuation">)</span><span class="token comment">// 构造包含指定collection元素的列表，这些元素利用该集合的迭代器按顺序返回如果指定的集合为null，则抛出throws NullPointerException。 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 默认初始化容量10</span>        <span class="token class-name">List</span> myList1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 指定初始化容量100</span>        <span class="token class-name">List</span> myList2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建一个HashSet集合</span>        <span class="token class-name">Collection</span> collection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加元素到Set集合</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">900</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 通过这个构造方法就可以将HashSet集合转换成List集合。</span>        <span class="token class-name">List</span> myList3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> myList3<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myList3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>ArrayList集合的扩容：增长到原容量的1.5倍。</p></li><li><p>ArrayList集合底层是数组，怎么优化？</p><ol><li>尽可能少的扩容。因为数组扩容效率比较低，建议在使用ArrayList集合的时候预估计元素的个数，给定一个初始化容量。</li></ol></li><li><p>数组优点：</p><ol><li>检索效率比较高。（每个元素占用空间大小相同，内存地址是连续的，知道首元素内存地址，然后知道下标，通过数学表达式计算出元素的内存地址，所以检索效率最高。）向数组末尾添加元素，效率很高，不受影响。</li></ol></li><li><p>数组缺点：</p><ol><li>随机增删元素效率比较低。</li><li>另外数组无法存储大数据量。（很难找到一块非常巨大的连续的内存空间。）</li></ol></li><li><p>哪个集合最多？</p><ol><li>ArrayList集合。因为往数组末尾添加元素，效率不受影响。另外，在检索&#x2F;查找某个元素的操作比较多。</li></ol></li><li><p>ArrayList集合是非线程安全的。（不是线程安全的集合。）</p></li></ol><h6 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 默认初始化容量是10</span>        <span class="token comment">// 数组的长度是10</span>        <span class="token class-name">List</span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 集合的size()方法是获取当前集合中元素的个数。不是获取集合的容量。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>        <span class="token comment">// 指定初始化容量</span>        <span class="token comment">// 数组的长度是20</span>        <span class="token class-name">List</span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 集合的size()方法是获取当前集合中元素的个数。不是获取集合的容量。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 10个元素。</span>        <span class="token comment">// 再加一个元素</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        int newCapacity = ArraysSupport.newLength(oldCapacity,minCapacity - oldCapacity,oldCapacity >> 1);         */</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11个元素。</span>        <span class="token comment">// 100 二进制转换成10进制： 00000100右移一位 00000010 （2）  【4 / 2】</span>        <span class="token comment">// 原先是4、现在增长：2，增长之后是6，增长之后的容量是之前容量的：1.5倍。</span>        <span class="token comment">// 6是4的1.5倍</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="位的运算"><a href="#位的运算" class="headerlink" title="位的运算"></a>位的运算</h4><p>位运算符 &gt;&gt;，乘除2的n次方。左除右乘。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// >> 1 二进制右移1位。</span>        <span class="token comment">// >> 2 二进制右移2位。</span>        <span class="token comment">// 10的二进制位是：00001010  【10】</span>        <span class="token comment">// 10的二进制右移1位是：00000101  【5】</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 右移1位就是除以2</span>        <span class="token comment">// 二进制位左移1位</span>        <span class="token comment">// 10的二进制位是：00001010  【10】</span>        <span class="token comment">// 10的二进制左移1位：00010100 【20】</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的Collections集合工具类</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/collections-ji-he-gong-ju-lei/collections-ji-he-gong-ju-lei/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/collections-ji-he-gong-ju-lei/collections-ji-he-gong-ju-lei/</url>
      
        <content type="html"><![CDATA[<h3 id="Collections集合工具类"><a href="#Collections集合工具类" class="headerlink" title="Collections集合工具类"></a>Collections集合工具类</h3><p>java.util.Collection 集合接口</p><p>java.util.Collections 集合工具类，方便集合的操作。</p><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 变成线程安全的</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对list进行排序，前提是必须实现compareTo方法。（要求集合中元素实现Comparable接口。）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ArrayList集合不是线程安全的。</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 变成线程安全的</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aba"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/**             * aba             * abb             * abc             */</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 自定义类型的排序</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">User</span> user <span class="token operator">:</span> userList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/**             * User&#123;age=50&#125;             * User&#123;age=100&#125;             */</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 对Set集合怎么排序呢?</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"sort"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"king"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将Set集合转换成List集合</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stringList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>stringList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span> stringList<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/**             * king             * sort             */</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 这种方式也可以排序。</span>        <span class="token comment">// Collections.sort(list集合, 比较器对象);</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"User&#123;"</span> <span class="token operator">+</span><span class="token string">"age="</span> <span class="token operator">+</span> age <span class="token operator">+</span><span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">-</span> user<span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的HashSet集合</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/hashset-ji-he/hashset-ji-he/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/hashset-ji-he/hashset-ji-he/</url>
      
        <content type="html"><![CDATA[<h3 id="HashSet集合"><a href="#HashSet集合" class="headerlink" title="HashSet集合"></a>HashSet集合</h3><ol><li>HashSet集合：<ol><li>无序不可重复。<ol><li>无序：存储时顺序和取出的顺序不同。</li><li>不可重复。</li><li>放到HashSet集合中的元素实际上是放到HashMap集合的key部分了。</li></ol></li></ol></li></ol><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stringSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加元素</span>        stringSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token operator">:</span>stringSet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/*Word            Hello            def*/</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的HashTable集合</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/hashtable-yu-hashmap-de-qu-bie/hashtable-yu-hashmap-de-qu-bie/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/hashtable-yu-hashmap-de-qu-bie/hashtable-yu-hashmap-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<h3 id="Hashtable与HashMap的区别"><a href="#Hashtable与HashMap的区别" class="headerlink" title="Hashtable与HashMap的区别"></a>Hashtable与HashMap的区别</h3><ol><li>Hashtable的key可以为null吗？<ol><li>Hashtable的key和value都是不能为null的。HashMap集合的key和value都是可以为null的。</li></ol></li><li>Hashtable方法都带有synchronized：线程安全的。线程安全有其它的方案，这个Hashtable对线程的处理导致效率较低，使用较少了。</li><li>Hashtable和HashMap一样，底层都是哈希表数据结构。Hashtable的初始化容量是11，默认加载因子是：0.75f，Hashtable的扩容是：原容量 * 2 + 1</li><li>HashMap和Hashtable的区别。<ol><li>HashMap：<ol><li>初始化容量16，扩容2倍。非线程安全，key和value可以为null。</li></ol></li><li>Hashtable：<ol><li>初始化容量11，扩容2倍+1，线程安全，key和value都不能是null。</li></ol></li></ol></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// map.put(null,123); // java.lang.NullPointerException异常</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// // java.lang.NullPointerException异常</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的Collection接口</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/collection-jie-kou/collection-jie-kou/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/collection-jie-kou/collection-jie-kou/</url>
      
        <content type="html"><![CDATA[<h3 id="集合的Collection接口"><a href="#集合的Collection接口" class="headerlink" title="集合的Collection接口"></a>集合的Collection接口</h3><h4 id="关于java-util-Collection接口中常用的方法。"><a href="#关于java-util-Collection接口中常用的方法。" class="headerlink" title="关于java.util.Collection接口中常用的方法。"></a>关于java.util.Collection接口中常用的方法。</h4><ol><li><p>Collection中能存放什么元素？<br>没有使用“泛型”，Collection中可以存储Object的所有子类型。使用了“泛型”，Collection中只能存储某个具体的类型。Collection中什么都能存，只要是Object的子类型就行。（集合中不能直接存储基本数据类型，也不能存java对象，只是存储java对象的内存地址。）</p></li><li><p>Collection中的常用方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Object</span> e<span class="token punctuation">)</span> <span class="token comment">// 向集合中添加元素</span><span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取集合中元素的个数</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 清空集合</span><span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token comment">// 判断当前集合中是否包含元素o，包含返回true，不包含返回false</span><span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token comment">// 删除集合中的某个元素。</span><span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 判断该集合中元素的个数是否为0</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 调用这个方法可以把集合转换成数组。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>存放在一个集合中的类型，一定要重写equals方法。</strong></p></li></ol><h5 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 创建一个集合对象</span>        <span class="token comment">// Collection collection = new Collection();// 接口是抽象的，无法实例化。</span>        <span class="token comment">// 多态</span>        <span class="token class-name">Collection</span> collection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 测试Collection接口中的常用方法</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1314</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 自动装箱(java5的新特性。),实际上是放进去了一个对象的内存地址。Integer x = new Integer(1314);</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取集合中元素的个数</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合中元素个数是："</span> <span class="token operator">+</span> collection<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 集合中元素个数是：3</span>        <span class="token comment">// 清空集合</span>        collection<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合中元素个数是："</span> <span class="token operator">+</span> collection<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 集合中元素个数是：0</span>        <span class="token comment">// 再向集合中添加元素</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "Hello"对象的内存地址放到了集合当中。</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 判断集合中是否包含"def"</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span>  collection<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>        <span class="token comment">// 删除集合中某个元素</span>        collection<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合中元素个数是："</span> <span class="token operator">+</span> collection<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 集合中元素个数是：2</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>        <span class="token comment">// 判断集合是否为空（集合中是否存在元素）</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>        collection<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true（true表示集合中没有元素了！）</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 转换成数组是Object类型的数组（了解，使用不多。）</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objs <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> objs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 遍历数组</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> objs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="深入Collection集合的contains方法："><a href="#深入Collection集合的contains方法：" class="headerlink" title="深入Collection集合的contains方法："></a>深入Collection集合的contains方法：</h4><ol><li>contains方法是用来判断集合中是否包含某个元素的方法，那么它在底层是怎么判断集合中是否包含某个元素的呢？<br>调用了equals方法进行比对。equals方法返回true，就表示包含这个元素。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token comment">// 判断集合中是否包含某个对象o,如果包含返回true， 如果不包含返回false。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h6 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建集合对象</span>        <span class="token class-name">Collection</span> collection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 向集合中存储元素</span>        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// s1 = 0x99</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 放进去了一个"abc"</span>        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// s2 = 0x77</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 集合中元素的个数</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"元素的个数是："</span> <span class="token operator">+</span> collection<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2</span>        <span class="token comment">// 新建的对象String</span>        <span class="token class-name">String</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// x = 0x94</span>        <span class="token comment">// collection集合中是否包含x？结果猜测一下是true还是false？</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断集合中是否存在"abc" true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/collection-jie-kou/collection-jie-kou/Collection%E7%9A%84contains%E6%96%B9%E6%B3%95.png" alt="Collection的contains方法"></p><h4 id="深入Collection集合的remove方法"><a href="#深入Collection集合的remove方法" class="headerlink" title="深入Collection集合的remove方法"></a>深入Collection集合的remove方法</h4><p>remove方法与contains方法一样，都是调用了equals方法进行比对。一样的话全部删除。所以一定要重写equals方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建集合对象</span>        <span class="token class-name">Collection</span> collection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建用户对象</span>        <span class="token class-name">User</span> user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 加入集合</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 判断集合中是否包含user2</span>        <span class="token class-name">User</span> user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 没有重写equals之前：这个结果是false</span>        <span class="token comment">// System.out.println(collection.contains(user2)); // false</span>        <span class="token comment">// 重写equals方法之后，比较的时候会比较name。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>        collection<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0</span>        <span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>        <span class="token comment">// 创建集合对象</span>        <span class="token class-name">Collection</span> cc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建字符串对象</span>        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 加进去。</span>        cc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建了一个新的字符串对象</span>        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 删除s2</span>        cc<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// s1.equals(s2) java认为s1和s2是一样的。删除s2就是删除s1。</span>        <span class="token comment">// 集合中元素个数是？</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cc<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> obj <span class="token operator">||</span> <span class="token operator">!</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">User</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>        <span class="token comment">// 如果名字一样表示同一个人。（不再比较对象的内存地址了。比较内容。）</span>        <span class="token keyword">return</span> user<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的HashMap集合</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/hashmap-ji-he/hashmap-ji-he/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/hashmap-ji-he/hashmap-ji-he/</url>
      
        <content type="html"><![CDATA[<h3 id="HashMap集合"><a href="#HashMap集合" class="headerlink" title="HashMap集合"></a>HashMap集合</h3><ol><li><p>HashMap集合底层是哈希表&#x2F;散列表的数据结构。</p></li><li><p>哈希表是一个怎样的数据结构呢？</p><ol><li>哈希表是一个数组和单向链表的结合体。</li><li>数组：在查询方面效率很高，随机增删方面效率很低。</li><li>单向链表：在随机增删方面效率较高，在查询方面效率很低。</li><li>哈希表将以上的两种数据结构融合在一起，充分发挥它们各自的优点。</li><li>哈希表&#x2F;散列表：一维数组，这个数组中每一个元素是一个单向链表。（数组和链表的结合体。）</li></ol></li><li><p>HashMap集合底层的源代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMap</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span><span class="token punctuation">&#123;</span>    <span class="token comment">// HashMap底层实际上就是一个数组。（一维数组）</span>    <span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>    <span class="token comment">// 静态的内部类HashMap.Node</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span> <span class="token comment">// 哈希值（哈希值是key的hashCode()方法的执行结果。hash值通过哈希函数/算法，可以转换存储成数组的下标。）</span>        <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span> <span class="token comment">// 存储到Map集合中的那个key</span>        <span class="token class-name">V</span> value<span class="token punctuation">;</span> <span class="token comment">// 存储到Map集合中的那个value</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span> <span class="token comment">// // 下一个节点的内存地址。</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>必须的两个方法的原理：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span>v <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>HashMap集合的key部分特点：</p><ol><li>无序，不可重复。<ol><li>为什么无序？ 因为不一定挂到哪个单向链表上。Hash值是不一样的。即数组下标不一样。</li><li>不可重复是怎么保证的？ equals方法来保证HashMap集合的key不可重复。如果key重复了，value会覆盖。</li></ol></li></ol></li><li><p>放在HashMap集合key部分的元素其实就是放到HashSet集合中了。 所以HashSet集合中的元素也需要同时重写hashCode()+equals()方法。</p></li><li><p>哈希表HashMap使用不当时无法发挥性能！</p><ol><li>假设将所有的hashCode()方法返回值固定为某个值，那么会导致底层哈希表变成了纯单向链表。这种情况我们成为：散列分布不均匀。</li><li>什么是散列分布均匀？<ol><li>假设有100个元素，10个单向链表，那么每个单向链表上有10个节点，这是最好的，是散列分布均匀的。</li><li>散列分布均匀需要你重写hashCode()方法时有一定的技巧。</li></ol></li><li>假设将所有的hashCode()方法返回值都设定为不一样的值，可以吗，有什么问题？<ol><li>不行，因为这样的话导致底层哈希表就成为一维数组了，没有链表的概念了。也是散列分布不均匀。</li></ol></li></ol></li><li><p><strong>放在HashMap集合key部分的元素，以及放在HashSet集合中的元素，需要同时重写hashCode和equals方法。</strong></p></li><li><p>HashMap集合的默认初始化容量是16，默认加载因子是0.75，  这个默认加载因子是当HashMap集合底层数组的容量达到75%的时候，数组开始扩容。</p></li><li><p>重点，记住：HashMap集合初始化容量必须是2的倍数，这也是官方推荐的，这是因为达到散列均匀，为了提高HashMap集合的存取效率，所必须的。The default initial capacity - MUST be a power of two.</p></li><li><p>HashMap集合key部分允许null吗？</p><ol><li>允许，但是要注意：HashMap集合的key null值只能有一个。</li></ol></li><li><p>对于哈希表数据结构来说：</p><ol><li><p>如果o1和o2的hash值相同，一定是放到同一个单向链表上。</p></li><li><p>当然如果o1和o2的hash值不同，但由于哈希算法执行结束之后转换的数组下标可能相同，此时会发生“哈希碰撞”。</p><ol><li><p>例如：</p><p>7 % 3 &#x3D; 1，4 % 3 &#x3D; 1，这样数组下标都是1。</p></li></ol></li></ol></li><li><p><strong>放在HashMap集合key部分的，以及放在HashSet集合中的元素，需要同时重写hashCode方法和equals方法。</strong></p></li><li><p>向Map集合中存，以及从Map集合中取，都是先调用key的hashCode方法，然后再调用equals方法！equals方法有可能调用，也有可能不调用。</p><ol><li>拿put(k,v)举例，什么时候equals不会调用？k.hashCode()方法返回哈希值，哈希值经过哈希算法转换成数组下标。数组下标位置上如果是null，equals不需要执行。</li><li>拿get(k)举例，什么时候equals不会调用？k.hashCode()方法返回哈希值，哈希值经过哈希算法转换成数组下标。数组下标位置上如果是null，equals不需要执行。</li></ol></li><li><p>注意：如果一个类的equals方法重写了，那么hashCode()方法必须重写。并且equals方法返回如果是true，hashCode()方法返回的值必须一样。equals方法返回true表示两个对象相同，在同一个单向链表上比较。那么对于同一个单向链表上的节点来说，他们的哈希值都是相同的。所以hashCode()方法的返回值也应该相同。</p></li></ol><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/hashmap-ji-he/hashmap-ji-he/%E5%93%88%E5%B8%8C%E8%A1%A8%E6%88%96%E8%80%85%E6%95%A3%E5%88%97%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" alt="哈希表或者散列表数据结构">        </p><h5 id="根据hashCode获取数组下标的方法"><a href="#根据hashCode获取数组下标的方法" class="headerlink" title="根据hashCode获取数组下标的方法"></a>根据hashCode获取数组下标的方法</h5><h6 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> h<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="tableSizeFor方法"><a href="#tableSizeFor方法" class="headerlink" title="tableSizeFor方法"></a>tableSizeFor方法</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Returns a power of two size for the given target capacity. HashMap集合初始化容量必须是2的倍数</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">>>></span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">numberOfLeadingZeros</span><span class="token punctuation">(</span>cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token operator">?</span> MAXIMUM_CAPACITY <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HashMap实现了Map接口的put方法，该put方法调用了putVal方法，根据putVal方法中，有一段代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据tableSizeFor方法，对于创建hashMap时，他的size一定是2^n次方个，putVal方法中的&amp;运算类似于对数组元素下标进行取模运算。因为n是2的n次方,他的二进制是1后面+0的形式，如果减1之后就变为全部为1，比如n&#x3D;16的二进制10000,15的二进制1111，&amp;与操作是见0就是0，因此如果用16&amp;，不管hash值为多少后面4为全部都是0，这样跟hash表较少出现hash碰撞是相违背的，因为采用n-1的方式&amp;，这样在保证索引永远不大于n-1的同时，因为hash的随机也保证了数据均匀的散列在hash表里。进而实现散列分布均匀。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">>></span>表示右移，如果该数为正，则高位补<span class="token number">0</span>，若为负数，则高位补<span class="token number">1</span>；<span class="token operator">>>></span>表示无符号右移，也叫逻辑右移，即若该数为正，则高位补<span class="token number">0</span>，而若该数为负数，则右移后高位同样补<span class="token number">0</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="hash源码中的key-hashCode-保证唯一"><a href="#hash源码中的key-hashCode-保证唯一" class="headerlink" title="hash源码中的key.hashCode()保证唯一"></a>hash源码中的key.hashCode()保证唯一</h6><p> 因为返回的是对象在堆中的存储地址，所以可以保证唯一性!</p><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 测试HashMap集合key部分的元素特点</span>        <span class="token comment">// Integer是key，它的hashCode和equals都重写了。</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> integerStringMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        integerStringMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        integerStringMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        integerStringMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//key重复的时候value会自动覆盖。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integerStringMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>        <span class="token comment">// 遍历Map集合</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entrySet <span class="token operator">=</span> integerStringMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">:</span> entrySet<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 验证结果：HashMap集合key部分元素：无序不可重复。</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// HashMap集合允许key为null</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span>        <span class="token comment">// 通过key获取value</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>        <span class="token comment">// key重复的话value是覆盖！</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//1</span>        <span class="token comment">// 通过key获取value</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="重写hashCode方法和equals方法"><a href="#重写hashCode方法和equals方法" class="headerlink" title="重写hashCode方法和equals方法"></a>重写hashCode方法和equals方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span> student1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> student2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 重写equals方法之前是false</span>        <span class="token comment">// System.out.println(student1.equals(student2)); // false</span>        <span class="token comment">// 重写equals方法之后是true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>student2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true （student1和student2表示相等）</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"student1的hashCode="</span> <span class="token operator">+</span> student1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// student1的hashCode=2003749087 (重写hashCode之后：student1的hashCode=774920)</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"student2的hashCode="</span> <span class="token operator">+</span> student2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// student2的hashCode=1480010240 (重写hashCode之后：student1的hashCode=774920)</span>        <span class="token comment">// student1.equals(student2)结果已经是true了，表示student1和student2是一样的，相同的，那么往HashSet集合中放的话，按说只能放进去1个。（HashSet集合特点：无序不可重复）</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">;</span>        students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>student2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>students<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这个结果按说应该是1. 但是结果是2.显然不符合HashSet集合存储特点。怎么办？重写hashCode方法，重写之后就是1了。</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> student<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合概述</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/java-ji-he-gai-shu/java-ji-he-gai-shu/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/java-ji-he-gai-shu/java-ji-he-gai-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="集合概述"><a href="#集合概述" class="headerlink" title="集合概述"></a>集合概述</h3><ol><li><p>什么是集合？有什么用？</p><ol><li>数组其实就是一个集合。集合实际上就是一个容器。可以来容纳其它类型的数据。</li></ol></li><li><p>集合为什么说在开发中使用较多？</p><ol><li>​    集合是一个容器，是一个载体，可以一次容纳多个对象。在实际开发中，假设连接数据库，数据库当中有10条记录，那么假设把这10条记录查询出来，在java程序中会将10条数据封装成10个java对象，然后将10个java对象放到某一个集合当中，将集合传到前端，然后遍历集合，将一个数据一个数据展现出来。</li></ol></li><li><p>集合不能直接存储基本数据类型，另外集合也不能直接存储java对象，集合当中存储的都是java对象的内存地址。（或者说集合中存储的是引用。）</p><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/java-ji-he-gai-shu/java-ji-he-gai-shu/%E9%9B%86%E5%90%88%E4%B8%AD%E5%AD%98%E5%82%A8%E7%9A%84%E6%98%AF%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80.png" alt="集合中存储的是对象的内存地址"></p></li><li><p>注意：</p><ol><li>集合在java中本身是一个容器，是一个对象。</li><li>集合中任何时候存储的都是“引用”。</li></ol></li><li><p>在java中每一个不同的集合，底层会对应不同的数据结构。往不同的集合中存储元素，等于将数据放到了不同的数据结构当中。</p></li><li><p>什么是数据结构？</p><ol><li><p>数据存储的结构就是数据结构。不同的数据结构，数据存储方式不同。</p></li><li><p>例如：</p><ol><li>数组、二叉树、链表、哈希表…以上这些都是常见的数据结构。你往集合c1中放数据，可能是放到数组上了。你往集合c2中放数据，可能是放到二叉树上了。…..</li></ol></li><li><p>你使用不同的集合等同于使用了不同的数据结构。</p><ol><li><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个集合，底层是数组。</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个集合对象，底层是链表。</span><span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个集合对象，底层是二叉树。</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol></li><li><p>集合在java JDK中哪个包下？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment">// 所有的集合类和集合接口都在java.util包下。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>集合的继承结构图：</p><h5 id="Collection类"><a href="#Collection类" class="headerlink" title="Collection类"></a>Collection类</h5><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/java-ji-he-gai-shu/java-ji-he-gai-shu/%E9%9B%86%E5%90%88%E9%9B%86%E6%88%90%E5%85%B3%E7%B3%BBSet-List.jpg" alt="集合集成关系Set-List"></p><h5 id="Map类"><a href="#Map类" class="headerlink" title="Map类"></a>Map类</h5><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/java-ji-he-gai-shu/java-ji-he-gai-shu/%E9%9B%86%E5%90%88%E9%9B%86%E6%88%90%E5%85%B3%E7%B3%BBMap.jpg" alt="集合集成关系Map"></p></li><li><p>集合整个这个体系的结构</p><ol><li>一类是单个方式存储元素：单个方式存储元素，这一类集合中超级父接口：java.util.Collection;</li><li>一类是以键值对儿的方式存储元素，以键值对的方式存储元素，这一类集合中超级父接口：java.util.Map;</li></ol></li><li><p>总结重点：</p><ol><li>第一个重点：集合继承结构图。</li><li>第二个重点：Collection接口中常用方法。</li><li>第三个重点：迭代器。</li><li>第四个重点：Collection接口中的remove方法和contains方法底层都会调用equals。</li></ol></li></ol><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><h6 id="所有的实现类"><a href="#所有的实现类" class="headerlink" title="所有的实现类"></a>所有的实现类</h6><p>ArrayList：底层是数组。</p><p>LinkedList：底层是双向链表。</p><p>Vector：底层是数组，线程安全的，效率较低，使用较少。</p><p>HashSet：底层是HashMap，放到HashSet集合中的元素等同于放到HashMap集合key部分了。</p><p>TreeSet：底层是TreeMap，放到TreeSet集合中的元素等同于放到TreeMap集合key部分了。</p><p>HashMap：底层是Hash表。</p><p>Hashtable：底层是Hash表，只不过线程安全的，效率低，使用较少。</p><p>Properties：是线程安全的，并且key和value只能存储字符串。</p><p>TreeMap：底层是二叉树数据结构。TreeMap集合的Key可以自动按照大小顺序排序。</p><h6 id="List集合存储元素的特点："><a href="#List集合存储元素的特点：" class="headerlink" title="List集合存储元素的特点："></a>List集合存储元素的特点：</h6><ol><li>​    有序可重复的</li><li>​    有序：存进去的顺序和取出的顺序相同，每一个元素都有下标。</li><li>​    可重复：存进去1，可以在存储一个1。</li></ol><h6 id="Set（Map）集合存储元素的特点："><a href="#Set（Map）集合存储元素的特点：" class="headerlink" title="Set（Map）集合存储元素的特点："></a>Set（Map）集合存储元素的特点：</h6><ol><li>​    无序不可重复：</li><li>​    无序：存进去的顺序和取出的顺序不一定相同，另外Set集合中元素没有下标。</li><li>​    不可重复：存进去1，不能再存储1了。</li></ol><h6 id="SortedSet（SortedMap）集合存储元素的特点："><a href="#SortedSet（SortedMap）集合存储元素的特点：" class="headerlink" title="SortedSet（SortedMap）集合存储元素的特点："></a>SortedSet（SortedMap）集合存储元素的特点：</h6><ol><li>​    首先是无序不可重复的，但是SortedSet集合中的元素是可排序的。</li><li>​    无序：存进去的顺序和取出的顺序不一定相同，另外Set集合中元素没有下标。</li><li>​    不可重复：存进去1，不能再存储1了。</li><li>​    可排序：可以按照大小顺序排列。</li></ol><p><strong>Map集合的key就是一个Set集合。</strong></p><p><strong>往Set集合中放数据，实际上放到了Map集合的key部分。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的List集合</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/list-ji-he/list-ji-he/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/list-ji-he/list-ji-he/</url>
      
        <content type="html"><![CDATA[<h3 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h3><ol><li><p>List集合存储元素特点：</p><ol><li>有序可重复<ol><li>有序：List集合中的元素有下标。从0开始，以1递增。</li><li>可重复：存储一个1，还可以再存储1。</li></ol></li></ol></li><li><p>List既然是Collection接口的子接口，那么肯定List接口有自己“特色”的方法：以下只列出List接口特有的常用的方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Object</span> element<span class="token punctuation">)</span> <span class="token comment">// 在列表的指定位置插入指定元素（第一个参数是下标）</span><span class="token class-name">Object</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Object</span> element<span class="token punctuation">)</span> <span class="token comment">// 修改指定位置的元素</span><span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token comment">// 获取指定位置的元素。</span><span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token comment">// 获取指定对象第一次出现处的索引。</span><span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token comment">// 获取指定对象最后一次出现处的索引。</span><span class="token class-name">Object</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token comment">// 删除指定下标位置的元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>迭代器迭代元素的过程中不能使用集合对象的remove方法删除元素，要使用迭代器Iterator的remove方法来删除元素，防止出现异常：ConcurrentModificationException</p></li></ol><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建List类型的集合。</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加元素</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 默认都是向集合末尾添加元素。</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 在列表的指定位置插入指定元素（第一个参数是下标）</span>        <span class="token comment">// 这个方法使用不多，因为对于ArrayList集合来说效率比较低。</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"KING"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 迭代</span>        <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 根据下标获取元素</span>        <span class="token class-name">Object</span> firstObj <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>firstObj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// A</span>        <span class="token comment">// 因为有下标，所以List集合有自己比较特殊的遍历方式</span>        <span class="token comment">// 通过下标遍历。[List集合特有的方式，Set没有。]</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> allObj <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>allObj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 获取指定对象第一次出现处的索引。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>        <span class="token comment">// 获取指定对象最后一次出现处的索引。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>        <span class="token comment">// 删除指定下标位置的元素</span>        <span class="token comment">// 删除下标为0的元素</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4</span>        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>        <span class="token comment">// 修改指定位置的元素</span>        list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Soft"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 遍历集合</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的Map集合接口</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/map-jie-kou/map-jie-kou/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/map-jie-kou/map-jie-kou/</url>
      
        <content type="html"><![CDATA[<h3 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h3><ol><li><p>Map和Collection没有继承关系。</p></li><li><p>Map集合以key和value的方式存储数据：</p><ol><li>键值对key和value都是引用数据类型。key和value都是存储对象的内存地址。key起到主导的地位，value是key的一个附属品。</li></ol></li><li><p>遍历Map集合的两种方式：</p><ol><li>第一种：获取所有key，遍历每个key，通过key获取value.</li><li>第二种：获取Set&lt;Map.Entry&gt;即可，遍历Set集合中的Entry，调用entry.getKey()，entry.getValue()</li></ol></li><li><p>Map接口中常用方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token comment">// 向Map集合中添加键值对，V是Value的意思</span><span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token comment">// 通过key获取value</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 清空Map集合</span><span class="token keyword">boolean</span> <span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token comment">// 判断Map中是否包含某个key</span><span class="token keyword">boolean</span> <span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token comment">// 判断Map中是否包含某个value</span><span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 判断Map集合中元素个数是否为0</span><span class="token class-name">V</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token comment">// 通过key删除键值对</span><span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取Map集合中键值对的个数。</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取Map集合中所有的value，返回一个Collection</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">></span></span> <span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取Map集合所有的key（所有的键是一个set集合）</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 将Map集合转换成Set集合</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>假设现在有一个Map集合，如下所示：</p><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/map-jie-kou/map-jie-kou/Map%E9%9B%86%E5%90%88%E8%BD%AC%E6%8D%A2%E6%88%90Set%E9%9B%86%E5%90%88entrySet()%E6%96%B9%E6%B3%95.png" alt="Map集合转换成Set集合entrySet()方法"></p><p>注意：Map集合通过entrySet()方法转换成的这个Set集合，Set集合中元素的类型是 Map.Entry&lt;K,V&gt;</p><p>Map.Entry和String一样，都是一种类型的名字，只不过：Map.Entry是静态内部类，是Map中的静态内部类</p><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建Map集合对象</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> integerStringMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 向Map集合中添加键值对</span>        integerStringMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1在这里进行了自动装箱。</span>        integerStringMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 通过key获取value</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> integerStringMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 李四</span>        <span class="token comment">// 获取键值对的数量</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"键值对的数量："</span> <span class="token operator">+</span> integerStringMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 键值对的数量：2</span>        <span class="token comment">// 通过key删除key-value</span>        integerStringMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"键值对的数量："</span> <span class="token operator">+</span> integerStringMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 键值对的数量：1</span>        <span class="token comment">// 判断是否包含某个key</span>        <span class="token comment">// contains方法底层调用的都是equals进行比对的，所以自定义的类型需要重写equals方法。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integerStringMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>        <span class="token comment">// 判断是否包含某个value</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integerStringMap<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>        <span class="token comment">// 获取所有的value</span>        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> values <span class="token operator">=</span> integerStringMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// foreach</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span> values<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 张三</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 清空map集合</span>        integerStringMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"键值对的数量："</span> <span class="token operator">+</span> integerStringMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 键值对的数量：0</span>        <span class="token comment">// 判断是否为空</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integerStringMap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Map集合的遍历"><a href="#Map集合的遍历" class="headerlink" title="Map集合的遍历"></a>Map集合的遍历</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> integerStringMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        integerStringMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        integerStringMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 第一种方式：获取所有的key，通过遍历key，来遍历value</span>        <span class="token comment">// 遍历Map集合</span>        <span class="token comment">// 获取所有的key，所有的key是一个Set集合</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integerSet <span class="token operator">=</span> integerStringMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integerIterator <span class="token operator">=</span> integerSet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>integerIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 取出其中一个key</span>            <span class="token class-name">Integer</span> key <span class="token operator">=</span> integerIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 通过key获取value</span>            <span class="token class-name">String</span> value <span class="token operator">=</span> integerStringMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// foreach也可以</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> key <span class="token operator">:</span> integerSet<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> integerStringMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 第二种方式：Set&lt;Map.Entry&lt;K,V>> entrySet()</span>        <span class="token comment">// 以上这个方法是把Map集合直接全部转换成Set集合。</span>        <span class="token comment">// Set集合中元素的类型是：Map.Entry</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entrySet <span class="token operator">=</span> integerStringMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 遍历Set集合，每一次取出一个Node</span>        <span class="token comment">// 迭代器</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entryIterator <span class="token operator">=</span> entrySet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>entryIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> node <span class="token operator">=</span> entryIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Integer</span> key <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> value <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// foreach</span>        <span class="token comment">// 这种方式效率比较高，因为获取key和value都是直接从node对象中获取的属性值。</span>        <span class="token comment">// 这种方式比较适合于大数据量。</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> node <span class="token operator">:</span> entrySet<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"--->"</span> <span class="token operator">+</span> node<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><h6 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 声明一个静态内部类</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 静态方法</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态内部类的m1方法执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 实例方法</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态内部类中的实例方法执行！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 类名叫做：Test.InnerClass</span>        <span class="token class-name">Test<span class="token punctuation">.</span>InnerClass</span><span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建静态内部类对象</span>        <span class="token class-name">Test<span class="token punctuation">.</span>InnerClass</span> <span class="token class-name">Ti</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test<span class="token punctuation">.</span>InnerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Ti</span><span class="token punctuation">.</span><span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 给一个Set集合</span>        <span class="token comment">// 该Set集合中存储的对象是：Test.InnerClass类型</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Test<span class="token punctuation">.</span>InnerClass</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这个Set集合中存储的是字符串对象。</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyMap<span class="token punctuation">.</span>MyEntry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> set3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyMap</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的重要的Properties属性类</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/properties-shu-xing-lei/properties-shu-xing-lei/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/properties-shu-xing-lei/properties-shu-xing-lei/</url>
      
        <content type="html"><![CDATA[<h3 id="Properties属性类"><a href="#Properties属性类" class="headerlink" title="Properties属性类"></a>Properties属性类</h3><ol><li>Properties是一个Map集合，继承Hashtable，Properties的key和value都是String类型。</li><li>Properties被称为属性类对象。</li><li>Properties是线程安全的。</li></ol><p>两个方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> <span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存入数据。调用 Hashtable 的方法 put。</span><span class="token class-name">String</span> <span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token comment">// 根据key取出相应的内容。</span><span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> reader<span class="token punctuation">)</span> <span class="token comment">// 调用Properties对象的load方法将文件中的数据加载到Map集合中。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建一个Properties对象</span>        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"english"</span><span class="token punctuation">,</span><span class="token string">"150"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 通过key获取value</span>        <span class="token class-name">String</span> eng <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"english"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>eng<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="IO-Properties的联合应用"><a href="#IO-Properties的联合应用" class="headerlink" title="IO+Properties的联合应用"></a>IO+Properties的联合应用</h3><ol><li><p>设计理念：</p><ol><li><p>​    以后经常改变的数据，可以单独写到一个文件中，使用程序动态读取。将来只需要修改这个文件的内容，java代码不需要改动，不需要重新编译，服务器也不需要重启。就可以拿到动态的信息。</p></li><li><p>类似于以上机制的这种文件被称为配置文件。并且当配置文件中的内容格式是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">key1<span class="token operator">=</span>valuekey2<span class="token operator">=</span>value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>的时候，我们把这种配置文件叫做属性配置文件。</p></li></ol></li><li><p>java规范中有要求：属性配置文件建议以.properties结尾，但这不是必须的。这种以.properties结尾的文件在java中被称为：属性配置文件。其中Properties是专门存放属性配置文件内容的一个类。</p></li><li><p>在配置文件中：</p><ol><li>建议key和value之间使用&#x3D;的方式。不适用:</li><li>&#x3D;左边是key，&#x3D;右边是value</li><li>在属性配置文件中井号是注释###</li><li>属性配置文件的key重复的话，value会自动覆盖！</li><li>最好不要有空格</li></ol></li></ol><h6 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">// Properties是一个Map集合，key和value都是String类型。想将userinfo文件中的数据加载到Properties对象当中。</span>        <span class="token comment">// 新建一个输入流对象</span>        <span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src/userinfo.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 新建一个Map集合</span>        <span class="token class-name">Properties</span> pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用Properties对象的load方法将文件中的数据加载到Map集合中。</span>        pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 文件中的数据顺着管道加载到Map集合中，其中等号=左边做key，右边做value</span>        <span class="token comment">// 通过key来获取value</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的TreeSet集合</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/treeset-ji-he/treeset-ji-he/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/treeset-ji-he/treeset-ji-he/</url>
      
        <content type="html"><![CDATA[<h3 id="TreeSet集合"><a href="#TreeSet集合" class="headerlink" title="TreeSet集合"></a>TreeSet集合</h3><ol><li><p>TreeSet集合存储元素特点：</p><ol><li>无序不可重复的，但是存储的元素可以自动按照大小顺序排序！称为：可排序集合。</li><li>无序：这里的无序指的是存进去的顺序和取出来的顺序不同。并且没有下标。</li></ol></li><li><p>TreeSet集合底层实际上是一个TreeMap，TreeMap集合底层是一个二叉树。放到TreeSet集合中的元素，等同于放到TreeMap集合key部分了。</p></li><li><p>编写程序从数据库当中取出数据，在页面展示用户信息的时候按照生日升序或者降序。这个时候可以使用TreeSet集合，因为TreeSet集合放进去，拿出来就是有顺序的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建一个TreeSet集合</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stringSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加元素</span>        stringSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"K"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span> stringSet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/**             * A,C,K             * 从小到大自动排序！按照字典顺序，升序！             */</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对自定义的类型来说，TreeSet可以排序吗？</p><ol><li>没有指定对象之间的比较规则。所以不能排序，要指定对象之间的比较规则就要实现java.lang.Comparable接口，实现compareTo方法。equals可以不写。若不实现其接口，则会抛出java.lang.ClassCastException异常。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建TreeSet集合</span>        <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加元素</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"sort"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">"king"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token string">"echo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">User</span> user <span class="token operator">:</span> set<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 放在TreeSet集合中的元素需要实现java.lang.Comparable接口。</span><span class="token comment">// 并且实现compareTo方法。equals可以不写。</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"User&#123;"</span> <span class="token operator">+</span><span class="token string">"age="</span> <span class="token operator">+</span> age <span class="token operator">+</span><span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span><span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 需要在这个方法中编写比较的逻辑，或者说比较的规则，按照什么进行比较！</span>    <span class="token comment">// k.compareTo(t.key)</span>    <span class="token comment">// 拿着参数k和集合中的每一个k进行比较，返回值可能是>0 &lt;0 =0</span>    <span class="token comment">/*compareTo方法的返回值很重要：    返回0表示相同，value会覆盖。    返回>0，会继续在右子树上找。【10 - 9 = 1 ，1 > 0的说明左边这个数字比较大。所以在右子树上找。】    返回&lt;0，会继续在左子树上找。*/</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// user1.compareTo(user2);</span>        <span class="token comment">// this是user1</span>        <span class="token comment">// user是user2</span>        <span class="token comment">// user1和user2比较的时候，就是this和user比较。</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">==</span> user<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 年龄相同时按照名字排序。</span>            <span class="token comment">// 姓名是String类型，可以直接比。调用compareTo来完成比较。</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 年龄不一样</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">-</span> user<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token comment">// 返回值可能是>0 &lt;0 =0</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/treeset-ji-he/treeset-ji-he/%E8%87%AA%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="自平衡二叉树"></p><h5 id="使用比较器的方式对TreeSet集合进行排序"><a href="#使用比较器的方式对TreeSet集合进行排序" class="headerlink" title="使用比较器的方式对TreeSet集合进行排序"></a>使用比较器的方式对TreeSet集合进行排序</h5><ol><li><p>TreeSet集合中元素可排序的第二种方式：使用比较器的方式。</p></li><li><p>最终的结论：</p><ol><li>放到TreeSet或者TreeMap集合key部分的元素要想做到排序,包括两种方式：<ol><li>第一种：放在集合中的元素实现java.lang.Comparable接口。</li><li>第二种：在构造TreeSet或者TreeMap集合的时候给它传一个比较器对象。单独编写一个比较器Comparator接口。</li></ol></li></ol></li><li><p>Comparable和Comparator怎么选择呢？</p><ol><li>当比较规则不会发生改变的时候，或者说当比较规则只有1个的时候，建议实现Comparable接口。</li><li>如果比较规则有多个，并且需要多个比较规则之间频繁切换，建议使用Comparator接口。</li></ol></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建TreeSet集合的时候，需要使用这个比较器。</span>        <span class="token comment">// TreeSet&lt;WuGui> wuGuis = new TreeSet&lt;>();//这样不行，没有通过构造方法传递一个比较器进去。</span>        <span class="token comment">// 给构造方法传递一个比较器。</span>        <span class="token comment">// TreeSet&lt;Animal> treeSet = new TreeSet&lt;>(new AnimalComparator());</span>        <span class="token comment">// 可以使用匿名内部类的方式（这个类没有名字。直接new接口。）</span>        <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Animal</span><span class="token punctuation">></span></span> treeSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Animal</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> o1<span class="token punctuation">,</span> <span class="token class-name">Animal</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Animal</span> animal <span class="token operator">:</span> treeSet<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Animal&#123;"</span> <span class="token operator">+</span><span class="token string">"age="</span> <span class="token operator">+</span> age <span class="token operator">+</span><span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 单独在这里编写一个比较器</span><span class="token comment">// 比较器实现java.util.Comparator接口。（Comparable是java.lang包下的。Comparator是java.util包下的。）</span><span class="token keyword">class</span> <span class="token class-name">AnimalComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Animal</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> o1<span class="token punctuation">,</span> <span class="token class-name">Animal</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 指定比较规则</span>        <span class="token comment">// 按照年龄排序</span>        <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的Vector集合</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/vector/vector/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/vector/vector/</url>
      
        <content type="html"><![CDATA[<h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><ol><li><p>Vector底层也是一个数组。初始化容量：10</p></li><li><p>怎么扩容的？</p><ol><li>扩容之后是原容量的2倍。10–&gt; 20 –&gt; 40 –&gt; 80</li></ol></li><li><p>ArrayList集合扩容特点：ArrayList集合扩容是原容量1.5倍。</p></li><li><p>Vector中所有的方法都是线程同步的，都带有synchronized关键字，是线程安全的。效率比较低，使用较少了。</p></li><li><p>怎么将一个线程不安全的ArrayList集合转换成线程安全的呢？</p><ol><li><p>使用集合工具类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Collections</span><span class="token punctuation">;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Collection</span> <span class="token comment">// 是集合接口。</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Collections</span> <span class="token comment">// 是集合工具类。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建一个Vector集合</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加元素</span>        <span class="token comment">// 默认容量10个。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 满了之后扩容（扩容之后的容量是20.）</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 这个可能以后要使用！！！！</span>        <span class="token class-name">List</span> myList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 非线程安全的。</span>        <span class="token comment">// 变成线程安全的</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// myList集合就是线程安全的了。</span>        myList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的集合的迭代与遍历</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/die-dai-zhuan-ti/die-dai-zhuan-ti/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/die-dai-zhuan-ti/die-dai-zhuan-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="集合遍历-x2F-迭代"><a href="#集合遍历-x2F-迭代" class="headerlink" title="集合遍历&#x2F;迭代"></a>集合遍历&#x2F;迭代</h3><ol><li><p>所有的遍历方式&#x2F;迭代方式，是所有Collection通用的一种方式。在Map集合中不能用。在所有的Collection以及子类中使用。</p></li><li><p>对集合Collection进行遍历&#x2F;迭代</p><ol><li><p>第一步：获取集合对象的迭代器对象Iterator</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> <span class="token class-name">Collection</span>对象名<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>​    第二步：通过以上获取的迭代器对象开始迭代&#x2F;遍历集合。</p><ol><li><p>使用以下两个方法，这两个方法是迭代器对象Iterator中的方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 如果仍有元素可以迭代，则返回 true。</span><span class="token class-name">Object</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 返回迭代的下一个元素。不管你当初存进去什么，取出来统一都是Object。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol></li></ol></li></ol><h6 id="迭代原理"><a href="#迭代原理" class="headerlink" title="迭代原理"></a>迭代原理</h6><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/die-dai-zhuan-ti/die-dai-zhuan-ti/%E8%BF%AD%E4%BB%A3%E5%8E%9F%E7%90%86.png" alt="迭代原理"></p><h6 id="迭代集合的原理"><a href="#迭代集合的原理" class="headerlink" title="迭代集合的原理"></a>迭代集合的原理</h6><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/die-dai-zhuan-ti/die-dai-zhuan-ti/%E8%BF%AD%E4%BB%A3%E9%9B%86%E5%90%88%E7%9A%84%E5%8E%9F%E7%90%86.png" alt="迭代集合的原理"></p><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 创建集合对象</span>        <span class="token class-name">Collection</span> collection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 后面的集合无所谓，主要是看前面的Collection接口，怎么遍历/迭代。</span>        <span class="token comment">// 添加元素</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 对集合Collection进行遍历/迭代</span>        <span class="token comment">// 第一步：获取集合对象的迭代器对象Iterator</span>        <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 第二步：通过以上获取的迭代器对象开始迭代/遍历集合。</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 不管你当初存进去什么，取出来统一都是Object。</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 一直取，不判断，会出现异常：java.util.NoSuchElementException</span>        <span class="token comment">/*while (true)&#123;            Object obj = iterator.next();            System.out.println(obj);        &#125;*/</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="ArrayList集合与HashSet集合"><a href="#ArrayList集合与HashSet集合" class="headerlink" title="ArrayList集合与HashSet集合"></a>ArrayList集合与HashSet集合</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建集合对象</span>        <span class="token class-name">Collection</span> collection1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ArrayList集合：有序可重复</span>        <span class="token class-name">Collection</span> collection2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// HashSet集合：无序不可重复</span>        <span class="token comment">// 无序：存进去和取出的顺序不一定相同。</span>        <span class="token comment">// 不可重复：存储100，不能再存储100.</span>        collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 迭代集合</span>        <span class="token class-name">Iterator</span> iterator1 <span class="token operator">=</span> collection1<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span> iterator2 <span class="token operator">=</span> collection2<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 存进去是什么类型，取出来还是什么类型。</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> iterator1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Integer类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 只不过在输出的时候会转换成字符串。因为这里println会调用toString()方法。</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="集合元素的remove"><a href="#集合元素的remove" class="headerlink" title="集合元素的remove"></a>集合元素的remove</h4><p><strong>这是Iterator的remove方法</strong>。不是Collection的remove方法。</p><ol><li>关于集合元素的remove<ol><li>重点：当集合的结构发生改变时，迭代器必须重新获取，如果还是用以前老的迭代器，会出现异常：java.util.ConcurrentModificationException</li><li>重点：在迭代集合元素的过程中，不能调用集合对象的remove方法，删除元素：collection.remove(o); 迭代过程中不能这样。会出现：java.util.ConcurrentModificationException</li><li>重点：在迭代元素的过程当中，一定要使用迭代器Iterator的remove方法，删除元素，不要使用集合自带的remove方法删除元素。</li></ol></li></ol><h6 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 创建集合</span>        <span class="token class-name">Collection</span> collection1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 注意：此时获取的迭代器，指向的是那是集合中没有元素状态下的迭代器。</span>        <span class="token comment">// 一定要注意：集合结构只要发生改变，迭代器必须重新获取。</span>        <span class="token comment">// 当集合结构发生了改变，迭代器没有重新获取时，调用next()方法时：java.util.ConcurrentModificationException</span>        <span class="token class-name">Iterator</span> iterator1 <span class="token operator">=</span> collection1<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加元素</span>        collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Integer类型</span>        collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取迭代器</span>        <span class="token comment">/*Iterator iterator2 = collection.iterator();        while (iterator2.hasNext())&#123;            // 编写代码时next()方法返回值类型必须是Object。            // Integer i = iterator2.next();            Object obj = iterator2.next();            System.out.println(obj);        &#125;*/</span>        <span class="token class-name">Collection</span> collection2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collection2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"xyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span> it2 <span class="token operator">=</span> collection2<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> o <span class="token operator">=</span> it2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 删除元素</span>            <span class="token comment">// 删除元素之后，集合的结构发生了变化，应该重新去获取迭代器</span>            <span class="token comment">// 但是，循环下一次的时候并没有重新获取迭代器，所以会出现异常：java.util.ConcurrentModificationException</span>            <span class="token comment">// 出异常根本原因是：集合中元素删除了，但是没有更新迭代器（迭代器不知道集合变化了）</span>            <span class="token comment">// c2.remove(o); // 直接通过集合去删除元素，没有通知迭代器。（导致迭代器的快照和原集合状态不同。）</span>            <span class="token comment">// 使用迭代器来删除可以吗？</span>            <span class="token comment">// 迭代器去删除时，会自动更新迭代器，并且更新集合（删除集合中的元素）。</span>            it2<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删除的一定是迭代器指向的当前元素。</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>collection2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java单向链表</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/linkedlist-lian-biao/linkedlist-lian-biao-dan-xiang-lian-biao/linkedlist-lian-biao-dan-xiang-lian-biao/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/linkedlist-lian-biao/linkedlist-lian-biao-dan-xiang-lian-biao/linkedlist-lian-biao-dan-xiang-lian-biao/</url>
      
        <content type="html"><![CDATA[<h3 id="LinkedList链表（单向链表）"><a href="#LinkedList链表（单向链表）" class="headerlink" title="LinkedList链表（单向链表）"></a>LinkedList链表（单向链表）</h3><ol><li>链表的优点：<ol><li>由于链表上的元素在空间存储上内存地址不连续。所以随机增删元素的时候不会有大量元素位移，因此随机增删效率较高。在以后的开发中，如果遇到随机增删集合中元素的业务比较多时，建议使用LinkedList。</li></ol></li><li>链表的缺点：<ol><li>不能通过数学表达式计算被查找元素的内存地址，每一次查找都是从头节点开始遍历，直到找到为止。所以LinkedList集合检索&#x2F;查找的效率较低。</li></ol></li><li>单链表中的节点。节点是单向链表中基本的单元。<ol><li>每一个节点Node都有两个属性：<ol><li>一个属性：是存储的数据。</li><li>另一个属性：是下一个节点的内存地址。</li></ol></li></ol></li><li>ArrayList：把检索发挥到极致。（末尾添加元素效率还是很高的。）</li><li>LinkedList：把随机增删发挥到极致。</li><li>加元素都是往末尾添加，所以ArrayList用的比LinkedList多。</li><li>LinkedList集合底层也是有下标的。</li><li>注意：ArrayList之所以检索效率比较高，不是单纯因为下标的原因。是因为底层数组发挥的作用。</li><li>LinkedList集合照样有下标，但是检索&#x2F;查找某个元素的时候效率比较低，因为只能从头节点开始一个一个遍历。</li><li>LinkedList集合有初始化容量吗？没有。</li></ol><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/linkedlist-lian-biao/linkedlist-lian-biao-dan-xiang-lian-biao/linkedlist-lian-biao-dan-xiang-lian-biao/%E9%93%BE%E8%A1%A8%EF%BC%88%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%EF%BC%89.png" alt="链表（单向链表）"></p><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的双向链表</title>
      <link href="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/linkedlist-lian-biao/shuang-xiang-lian-biao/shuang-xiang-lian-biao/"/>
      <url>/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/linkedlist-lian-biao/shuang-xiang-lian-biao/shuang-xiang-lian-biao/</url>
      
        <content type="html"><![CDATA[<h3 id="LinkedList双向链表"><a href="#LinkedList双向链表" class="headerlink" title="LinkedList双向链表"></a>LinkedList双向链表</h3><ol><li>Java—–Collection 实现的LinkedList(双向链表)</li><li>最初这个链表中没有任何元素。first和last引用都是null。</li></ol><p><img src="/2022/04/09/bi-ji/java-xue-xi/java-jin-jie/java-ji-he/linkedlist-lian-biao/shuang-xiang-lian-biao/shuang-xiang-lian-biao/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.png" alt="双向链表"></p><h6 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 不管是LinkedList还是ArrayList，以后写代码时不需要关心具体是哪个集合。</span>        <span class="token comment">// 因为我们要面向接口编程，调用的方法都是接口中的方法。</span>        <span class="token comment">// List list = new ArrayList(); // 这样写表示底层你用了数组。</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这样写表示底层你用了双向链表。</span>        <span class="token comment">// 以下这些方法你面向的都是接口编程。</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
